// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Status string

const (
	StatusActiveHealthy   Status = "ACTIVE_HEALTHY"
	StatusActiveUnhealthy Status = "ACTIVE_UNHEALTHY"
	StatusComingUp        Status = "COMING_UP"
	StatusGoingDown       Status = "GOING_DOWN"
	StatusInactive        Status = "INACTIVE"
	StatusInitFailed      Status = "INIT_FAILED"
	StatusRemoved         Status = "REMOVED"
	StatusRestarting      Status = "RESTARTING"
	StatusUnknown         Status = "UNKNOWN"
	StatusUpgrading       Status = "UPGRADING"
	StatusPausing         Status = "PAUSING"
	StatusRestoring       Status = "RESTORING"
	StatusRestoreFailed   Status = "RESTORE_FAILED"
	StatusPauseFailed     Status = "PAUSE_FAILED"
	StatusResizing        Status = "RESIZING"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE_HEALTHY":
		fallthrough
	case "ACTIVE_UNHEALTHY":
		fallthrough
	case "COMING_UP":
		fallthrough
	case "GOING_DOWN":
		fallthrough
	case "INACTIVE":
		fallthrough
	case "INIT_FAILED":
		fallthrough
	case "REMOVED":
		fallthrough
	case "RESTARTING":
		fallthrough
	case "UNKNOWN":
		fallthrough
	case "UPGRADING":
		fallthrough
	case "PAUSING":
		fallthrough
	case "RESTORING":
		fallthrough
	case "RESTORE_FAILED":
		fallthrough
	case "PAUSE_FAILED":
		fallthrough
	case "RESIZING":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type BranchDetailResponse struct {
	DbPort          int64   `json:"db_port"`
	Ref             string  `json:"ref"`
	PostgresVersion string  `json:"postgres_version"`
	PostgresEngine  string  `json:"postgres_engine"`
	ReleaseChannel  string  `json:"release_channel"`
	Status          Status  `json:"status"`
	DbHost          string  `json:"db_host"`
	DbUser          *string `json:"db_user,omitempty"`
	DbPass          *string `json:"db_pass,omitempty"`
	JwtSecret       *string `json:"jwt_secret,omitempty"`
}

func (o *BranchDetailResponse) GetDbPort() int64 {
	if o == nil {
		return 0
	}
	return o.DbPort
}

func (o *BranchDetailResponse) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *BranchDetailResponse) GetPostgresVersion() string {
	if o == nil {
		return ""
	}
	return o.PostgresVersion
}

func (o *BranchDetailResponse) GetPostgresEngine() string {
	if o == nil {
		return ""
	}
	return o.PostgresEngine
}

func (o *BranchDetailResponse) GetReleaseChannel() string {
	if o == nil {
		return ""
	}
	return o.ReleaseChannel
}

func (o *BranchDetailResponse) GetStatus() Status {
	if o == nil {
		return Status("")
	}
	return o.Status
}

func (o *BranchDetailResponse) GetDbHost() string {
	if o == nil {
		return ""
	}
	return o.DbHost
}

func (o *BranchDetailResponse) GetDbUser() *string {
	if o == nil {
		return nil
	}
	return o.DbUser
}

func (o *BranchDetailResponse) GetDbPass() *string {
	if o == nil {
		return nil
	}
	return o.DbPass
}

func (o *BranchDetailResponse) GetJwtSecret() *string {
	if o == nil {
		return nil
	}
	return o.JwtSecret
}
