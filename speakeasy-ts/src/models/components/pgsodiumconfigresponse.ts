/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PgsodiumConfigResponse = {
  rootKey: string;
};

/** @internal */
export const PgsodiumConfigResponse$inboundSchema: z.ZodType<
  PgsodiumConfigResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  root_key: z.string(),
}).transform((v) => {
  return remap$(v, {
    "root_key": "rootKey",
  });
});

/** @internal */
export type PgsodiumConfigResponse$Outbound = {
  root_key: string;
};

/** @internal */
export const PgsodiumConfigResponse$outboundSchema: z.ZodType<
  PgsodiumConfigResponse$Outbound,
  z.ZodTypeDef,
  PgsodiumConfigResponse
> = z.object({
  rootKey: z.string(),
}).transform((v) => {
  return remap$(v, {
    rootKey: "root_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PgsodiumConfigResponse$ {
  /** @deprecated use `PgsodiumConfigResponse$inboundSchema` instead. */
  export const inboundSchema = PgsodiumConfigResponse$inboundSchema;
  /** @deprecated use `PgsodiumConfigResponse$outboundSchema` instead. */
  export const outboundSchema = PgsodiumConfigResponse$outboundSchema;
  /** @deprecated use `PgsodiumConfigResponse$Outbound` instead. */
  export type Outbound = PgsodiumConfigResponse$Outbound;
}

export function pgsodiumConfigResponseToJSON(
  pgsodiumConfigResponse: PgsodiumConfigResponse,
): string {
  return JSON.stringify(
    PgsodiumConfigResponse$outboundSchema.parse(pgsodiumConfigResponse),
  );
}

export function pgsodiumConfigResponseFromJSON(
  jsonString: string,
): SafeParseResult<PgsodiumConfigResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PgsodiumConfigResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PgsodiumConfigResponse' from JSON`,
  );
}
