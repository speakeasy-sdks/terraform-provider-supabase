// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Subscription Plan is now set on organization level and is ignored in this request
//
// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
type Plan string

const (
	PlanFree Plan = "free"
	PlanPro  Plan = "pro"
)

func (e Plan) ToPointer() *Plan {
	return &e
}
func (e *Plan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "free":
		fallthrough
	case "pro":
		*e = Plan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Plan: %v", v)
	}
}

// Region you want your server to reside in
type Region string

const (
	RegionUsEast1      Region = "us-east-1"
	RegionUsEast2      Region = "us-east-2"
	RegionUsWest1      Region = "us-west-1"
	RegionUsWest2      Region = "us-west-2"
	RegionApEast1      Region = "ap-east-1"
	RegionApSoutheast1 Region = "ap-southeast-1"
	RegionApNortheast1 Region = "ap-northeast-1"
	RegionApNortheast2 Region = "ap-northeast-2"
	RegionApSoutheast2 Region = "ap-southeast-2"
	RegionEuWest1      Region = "eu-west-1"
	RegionEuWest2      Region = "eu-west-2"
	RegionEuWest3      Region = "eu-west-3"
	RegionEuNorth1     Region = "eu-north-1"
	RegionEuCentral1   Region = "eu-central-1"
	RegionEuCentral2   Region = "eu-central-2"
	RegionCaCentral1   Region = "ca-central-1"
	RegionApSouth1     Region = "ap-south-1"
	RegionSaEast1      Region = "sa-east-1"
)

func (e Region) ToPointer() *Region {
	return &e
}
func (e *Region) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "us-east-1":
		fallthrough
	case "us-east-2":
		fallthrough
	case "us-west-1":
		fallthrough
	case "us-west-2":
		fallthrough
	case "ap-east-1":
		fallthrough
	case "ap-southeast-1":
		fallthrough
	case "ap-northeast-1":
		fallthrough
	case "ap-northeast-2":
		fallthrough
	case "ap-southeast-2":
		fallthrough
	case "eu-west-1":
		fallthrough
	case "eu-west-2":
		fallthrough
	case "eu-west-3":
		fallthrough
	case "eu-north-1":
		fallthrough
	case "eu-central-1":
		fallthrough
	case "eu-central-2":
		fallthrough
	case "ca-central-1":
		fallthrough
	case "ap-south-1":
		fallthrough
	case "sa-east-1":
		*e = Region(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Region: %v", v)
	}
}

type V1CreateProjectBodyDtoDesiredInstanceSize string

const (
	V1CreateProjectBodyDtoDesiredInstanceSizeMicro         V1CreateProjectBodyDtoDesiredInstanceSize = "micro"
	V1CreateProjectBodyDtoDesiredInstanceSizeSmall         V1CreateProjectBodyDtoDesiredInstanceSize = "small"
	V1CreateProjectBodyDtoDesiredInstanceSizeMedium        V1CreateProjectBodyDtoDesiredInstanceSize = "medium"
	V1CreateProjectBodyDtoDesiredInstanceSizeLarge         V1CreateProjectBodyDtoDesiredInstanceSize = "large"
	V1CreateProjectBodyDtoDesiredInstanceSizeXlarge        V1CreateProjectBodyDtoDesiredInstanceSize = "xlarge"
	V1CreateProjectBodyDtoDesiredInstanceSizeTwoxlarge     V1CreateProjectBodyDtoDesiredInstanceSize = "2xlarge"
	V1CreateProjectBodyDtoDesiredInstanceSizeFourxlarge    V1CreateProjectBodyDtoDesiredInstanceSize = "4xlarge"
	V1CreateProjectBodyDtoDesiredInstanceSizeEightxlarge   V1CreateProjectBodyDtoDesiredInstanceSize = "8xlarge"
	V1CreateProjectBodyDtoDesiredInstanceSizeTwelvexlarge  V1CreateProjectBodyDtoDesiredInstanceSize = "12xlarge"
	V1CreateProjectBodyDtoDesiredInstanceSizeSixteenxlarge V1CreateProjectBodyDtoDesiredInstanceSize = "16xlarge"
)

func (e V1CreateProjectBodyDtoDesiredInstanceSize) ToPointer() *V1CreateProjectBodyDtoDesiredInstanceSize {
	return &e
}
func (e *V1CreateProjectBodyDtoDesiredInstanceSize) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "micro":
		fallthrough
	case "small":
		fallthrough
	case "medium":
		fallthrough
	case "large":
		fallthrough
	case "xlarge":
		fallthrough
	case "2xlarge":
		fallthrough
	case "4xlarge":
		fallthrough
	case "8xlarge":
		fallthrough
	case "12xlarge":
		fallthrough
	case "16xlarge":
		*e = V1CreateProjectBodyDtoDesiredInstanceSize(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V1CreateProjectBodyDtoDesiredInstanceSize: %v", v)
	}
}

// V1CreateProjectBodyDtoReleaseChannel - Release channel. If not provided, GA will be used.
type V1CreateProjectBodyDtoReleaseChannel string

const (
	V1CreateProjectBodyDtoReleaseChannelInternal  V1CreateProjectBodyDtoReleaseChannel = "internal"
	V1CreateProjectBodyDtoReleaseChannelAlpha     V1CreateProjectBodyDtoReleaseChannel = "alpha"
	V1CreateProjectBodyDtoReleaseChannelBeta      V1CreateProjectBodyDtoReleaseChannel = "beta"
	V1CreateProjectBodyDtoReleaseChannelGa        V1CreateProjectBodyDtoReleaseChannel = "ga"
	V1CreateProjectBodyDtoReleaseChannelWithdrawn V1CreateProjectBodyDtoReleaseChannel = "withdrawn"
)

func (e V1CreateProjectBodyDtoReleaseChannel) ToPointer() *V1CreateProjectBodyDtoReleaseChannel {
	return &e
}
func (e *V1CreateProjectBodyDtoReleaseChannel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal":
		fallthrough
	case "alpha":
		fallthrough
	case "beta":
		fallthrough
	case "ga":
		fallthrough
	case "withdrawn":
		*e = V1CreateProjectBodyDtoReleaseChannel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V1CreateProjectBodyDtoReleaseChannel: %v", v)
	}
}

// V1CreateProjectBodyDtoPostgresEngine - Postgres engine version. If not provided, the latest version will be used.
type V1CreateProjectBodyDtoPostgresEngine string

const (
	V1CreateProjectBodyDtoPostgresEngineFifteen V1CreateProjectBodyDtoPostgresEngine = "15"
)

func (e V1CreateProjectBodyDtoPostgresEngine) ToPointer() *V1CreateProjectBodyDtoPostgresEngine {
	return &e
}
func (e *V1CreateProjectBodyDtoPostgresEngine) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "15":
		*e = V1CreateProjectBodyDtoPostgresEngine(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V1CreateProjectBodyDtoPostgresEngine: %v", v)
	}
}

type V1CreateProjectBodyDto struct {
	// Database password
	DbPass string `json:"db_pass"`
	// Name of your project, should not contain dots
	Name string `json:"name"`
	// Slug of your organization
	OrganizationID string `json:"organization_id"`
	// Subscription Plan is now set on organization level and is ignored in this request
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Plan *Plan `json:"plan,omitempty"`
	// Region you want your server to reside in
	Region Region `json:"region"`
	// This field is deprecated and is ignored in this request
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	KpsEnabled          *bool                                      `json:"kps_enabled,omitempty"`
	DesiredInstanceSize *V1CreateProjectBodyDtoDesiredInstanceSize `json:"desired_instance_size,omitempty"`
	// Template URL used to create the project from the CLI.
	TemplateURL *string `json:"template_url,omitempty"`
	// Release channel. If not provided, GA will be used.
	ReleaseChannel *V1CreateProjectBodyDtoReleaseChannel `json:"release_channel,omitempty"`
	// Postgres engine version. If not provided, the latest version will be used.
	PostgresEngine *V1CreateProjectBodyDtoPostgresEngine `json:"postgres_engine,omitempty"`
}

func (o *V1CreateProjectBodyDto) GetDbPass() string {
	if o == nil {
		return ""
	}
	return o.DbPass
}

func (o *V1CreateProjectBodyDto) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *V1CreateProjectBodyDto) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

func (o *V1CreateProjectBodyDto) GetPlan() *Plan {
	if o == nil {
		return nil
	}
	return o.Plan
}

func (o *V1CreateProjectBodyDto) GetRegion() Region {
	if o == nil {
		return Region("")
	}
	return o.Region
}

func (o *V1CreateProjectBodyDto) GetKpsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.KpsEnabled
}

func (o *V1CreateProjectBodyDto) GetDesiredInstanceSize() *V1CreateProjectBodyDtoDesiredInstanceSize {
	if o == nil {
		return nil
	}
	return o.DesiredInstanceSize
}

func (o *V1CreateProjectBodyDto) GetTemplateURL() *string {
	if o == nil {
		return nil
	}
	return o.TemplateURL
}

func (o *V1CreateProjectBodyDto) GetReleaseChannel() *V1CreateProjectBodyDtoReleaseChannel {
	if o == nil {
		return nil
	}
	return o.ReleaseChannel
}

func (o *V1CreateProjectBodyDto) GetPostgresEngine() *V1CreateProjectBodyDtoPostgresEngine {
	if o == nil {
		return nil
	}
	return o.PostgresEngine
}
