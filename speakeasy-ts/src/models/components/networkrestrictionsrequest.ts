/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NetworkRestrictionsRequest = {
  dbAllowedCidrs?: Array<string> | undefined;
  dbAllowedCidrsV6?: Array<string> | undefined;
};

/** @internal */
export const NetworkRestrictionsRequest$inboundSchema: z.ZodType<
  NetworkRestrictionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  dbAllowedCidrs: z.array(z.string()).optional(),
  dbAllowedCidrsV6: z.array(z.string()).optional(),
});

/** @internal */
export type NetworkRestrictionsRequest$Outbound = {
  dbAllowedCidrs?: Array<string> | undefined;
  dbAllowedCidrsV6?: Array<string> | undefined;
};

/** @internal */
export const NetworkRestrictionsRequest$outboundSchema: z.ZodType<
  NetworkRestrictionsRequest$Outbound,
  z.ZodTypeDef,
  NetworkRestrictionsRequest
> = z.object({
  dbAllowedCidrs: z.array(z.string()).optional(),
  dbAllowedCidrsV6: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NetworkRestrictionsRequest$ {
  /** @deprecated use `NetworkRestrictionsRequest$inboundSchema` instead. */
  export const inboundSchema = NetworkRestrictionsRequest$inboundSchema;
  /** @deprecated use `NetworkRestrictionsRequest$outboundSchema` instead. */
  export const outboundSchema = NetworkRestrictionsRequest$outboundSchema;
  /** @deprecated use `NetworkRestrictionsRequest$Outbound` instead. */
  export type Outbound = NetworkRestrictionsRequest$Outbound;
}

export function networkRestrictionsRequestToJSON(
  networkRestrictionsRequest: NetworkRestrictionsRequest,
): string {
  return JSON.stringify(
    NetworkRestrictionsRequest$outboundSchema.parse(networkRestrictionsRequest),
  );
}

export function networkRestrictionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<NetworkRestrictionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NetworkRestrictionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NetworkRestrictionsRequest' from JSON`,
  );
}
