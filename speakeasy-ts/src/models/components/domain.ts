/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Domain = {
  id: string;
  domain?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const Domain$inboundSchema: z.ZodType<Domain, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    domain: z.string().optional(),
    created_at: z.string().optional(),
    updated_at: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Domain$Outbound = {
  id: string;
  domain?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const Domain$outboundSchema: z.ZodType<
  Domain$Outbound,
  z.ZodTypeDef,
  Domain
> = z.object({
  id: z.string(),
  domain: z.string().optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Domain$ {
  /** @deprecated use `Domain$inboundSchema` instead. */
  export const inboundSchema = Domain$inboundSchema;
  /** @deprecated use `Domain$outboundSchema` instead. */
  export const outboundSchema = Domain$outboundSchema;
  /** @deprecated use `Domain$Outbound` instead. */
  export type Outbound = Domain$Outbound;
}

export function domainToJSON(domain: Domain): string {
  return JSON.stringify(Domain$outboundSchema.parse(domain));
}

export function domainFromJSON(
  jsonString: string,
): SafeParseResult<Domain, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Domain$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Domain' from JSON`,
  );
}
