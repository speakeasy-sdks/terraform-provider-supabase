/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomJwks = {};

export type CreateThirdPartyAuthBody = {
  oidcIssuerUrl?: string | undefined;
  jwksUrl?: string | undefined;
  customJwks?: CustomJwks | undefined;
};

/** @internal */
export const CustomJwks$inboundSchema: z.ZodType<
  CustomJwks,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CustomJwks$Outbound = {};

/** @internal */
export const CustomJwks$outboundSchema: z.ZodType<
  CustomJwks$Outbound,
  z.ZodTypeDef,
  CustomJwks
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomJwks$ {
  /** @deprecated use `CustomJwks$inboundSchema` instead. */
  export const inboundSchema = CustomJwks$inboundSchema;
  /** @deprecated use `CustomJwks$outboundSchema` instead. */
  export const outboundSchema = CustomJwks$outboundSchema;
  /** @deprecated use `CustomJwks$Outbound` instead. */
  export type Outbound = CustomJwks$Outbound;
}

export function customJwksToJSON(customJwks: CustomJwks): string {
  return JSON.stringify(CustomJwks$outboundSchema.parse(customJwks));
}

export function customJwksFromJSON(
  jsonString: string,
): SafeParseResult<CustomJwks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomJwks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomJwks' from JSON`,
  );
}

/** @internal */
export const CreateThirdPartyAuthBody$inboundSchema: z.ZodType<
  CreateThirdPartyAuthBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  oidc_issuer_url: z.string().optional(),
  jwks_url: z.string().optional(),
  custom_jwks: z.lazy(() => CustomJwks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "oidc_issuer_url": "oidcIssuerUrl",
    "jwks_url": "jwksUrl",
    "custom_jwks": "customJwks",
  });
});

/** @internal */
export type CreateThirdPartyAuthBody$Outbound = {
  oidc_issuer_url?: string | undefined;
  jwks_url?: string | undefined;
  custom_jwks?: CustomJwks$Outbound | undefined;
};

/** @internal */
export const CreateThirdPartyAuthBody$outboundSchema: z.ZodType<
  CreateThirdPartyAuthBody$Outbound,
  z.ZodTypeDef,
  CreateThirdPartyAuthBody
> = z.object({
  oidcIssuerUrl: z.string().optional(),
  jwksUrl: z.string().optional(),
  customJwks: z.lazy(() => CustomJwks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    oidcIssuerUrl: "oidc_issuer_url",
    jwksUrl: "jwks_url",
    customJwks: "custom_jwks",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThirdPartyAuthBody$ {
  /** @deprecated use `CreateThirdPartyAuthBody$inboundSchema` instead. */
  export const inboundSchema = CreateThirdPartyAuthBody$inboundSchema;
  /** @deprecated use `CreateThirdPartyAuthBody$outboundSchema` instead. */
  export const outboundSchema = CreateThirdPartyAuthBody$outboundSchema;
  /** @deprecated use `CreateThirdPartyAuthBody$Outbound` instead. */
  export type Outbound = CreateThirdPartyAuthBody$Outbound;
}

export function createThirdPartyAuthBodyToJSON(
  createThirdPartyAuthBody: CreateThirdPartyAuthBody,
): string {
  return JSON.stringify(
    CreateThirdPartyAuthBody$outboundSchema.parse(createThirdPartyAuthBody),
  );
}

export function createThirdPartyAuthBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateThirdPartyAuthBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateThirdPartyAuthBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateThirdPartyAuthBody' from JSON`,
  );
}
