// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/speakeasy/terraform-provider-supabase/internal/sdk"
	"github.com/speakeasy/terraform-provider-supabase/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &PostgresDataSource{}
var _ datasource.DataSourceWithConfigure = &PostgresDataSource{}

func NewPostgresDataSource() datasource.DataSource {
	return &PostgresDataSource{}
}

// PostgresDataSource is the data source implementation.
type PostgresDataSource struct {
	client *sdk.Supabase
}

// PostgresDataSourceModel describes the data model.
type PostgresDataSourceModel struct {
	EffectiveCacheSize            types.String `tfsdk:"effective_cache_size"`
	LogicalDecodingWorkMem        types.String `tfsdk:"logical_decoding_work_mem"`
	MaintenanceWorkMem            types.String `tfsdk:"maintenance_work_mem"`
	MaxConnections                types.Int64  `tfsdk:"max_connections"`
	MaxLocksPerTransaction        types.Int64  `tfsdk:"max_locks_per_transaction"`
	MaxParallelMaintenanceWorkers types.Int64  `tfsdk:"max_parallel_maintenance_workers"`
	MaxParallelWorkers            types.Int64  `tfsdk:"max_parallel_workers"`
	MaxParallelWorkersPerGather   types.Int64  `tfsdk:"max_parallel_workers_per_gather"`
	MaxReplicationSlots           types.Int64  `tfsdk:"max_replication_slots"`
	MaxSlotWalKeepSize            types.String `tfsdk:"max_slot_wal_keep_size"`
	MaxStandbyArchiveDelay        types.String `tfsdk:"max_standby_archive_delay"`
	MaxStandbyStreamingDelay      types.String `tfsdk:"max_standby_streaming_delay"`
	MaxWalSenders                 types.Int64  `tfsdk:"max_wal_senders"`
	MaxWalSize                    types.String `tfsdk:"max_wal_size"`
	MaxWorkerProcesses            types.Int64  `tfsdk:"max_worker_processes"`
	Ref                           types.String `tfsdk:"ref"`
	SessionReplicationRole        types.String `tfsdk:"session_replication_role"`
	SharedBuffers                 types.String `tfsdk:"shared_buffers"`
	StatementTimeout              types.String `tfsdk:"statement_timeout"`
	TrackCommitTimestamp          types.Bool   `tfsdk:"track_commit_timestamp"`
	WalKeepSize                   types.String `tfsdk:"wal_keep_size"`
	WalSenderTimeout              types.String `tfsdk:"wal_sender_timeout"`
	WorkMem                       types.String `tfsdk:"work_mem"`
}

// Metadata returns the data source type name.
func (r *PostgresDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_postgres"
}

// Schema defines the schema for the data source.
func (r *PostgresDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Postgres DataSource",

		Attributes: map[string]schema.Attribute{
			"effective_cache_size": schema.StringAttribute{
				Computed: true,
			},
			"logical_decoding_work_mem": schema.StringAttribute{
				Computed: true,
			},
			"maintenance_work_mem": schema.StringAttribute{
				Computed: true,
			},
			"max_connections": schema.Int64Attribute{
				Computed: true,
			},
			"max_locks_per_transaction": schema.Int64Attribute{
				Computed: true,
			},
			"max_parallel_maintenance_workers": schema.Int64Attribute{
				Computed: true,
			},
			"max_parallel_workers": schema.Int64Attribute{
				Computed: true,
			},
			"max_parallel_workers_per_gather": schema.Int64Attribute{
				Computed: true,
			},
			"max_replication_slots": schema.Int64Attribute{
				Computed: true,
			},
			"max_slot_wal_keep_size": schema.StringAttribute{
				Computed: true,
			},
			"max_standby_archive_delay": schema.StringAttribute{
				Computed: true,
			},
			"max_standby_streaming_delay": schema.StringAttribute{
				Computed: true,
			},
			"max_wal_senders": schema.Int64Attribute{
				Computed: true,
			},
			"max_wal_size": schema.StringAttribute{
				Computed: true,
			},
			"max_worker_processes": schema.Int64Attribute{
				Computed: true,
			},
			"ref": schema.StringAttribute{
				Required:    true,
				Description: `Project ref`,
			},
			"session_replication_role": schema.StringAttribute{
				Computed: true,
			},
			"shared_buffers": schema.StringAttribute{
				Computed: true,
			},
			"statement_timeout": schema.StringAttribute{
				Computed: true,
			},
			"track_commit_timestamp": schema.BoolAttribute{
				Computed: true,
			},
			"wal_keep_size": schema.StringAttribute{
				Computed: true,
			},
			"wal_sender_timeout": schema.StringAttribute{
				Computed: true,
			},
			"work_mem": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *PostgresDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Supabase)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Supabase, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *PostgresDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *PostgresDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var ref string
	ref = data.Ref.ValueString()

	request := operations.V1GetPostgresConfigRequest{
		Ref: ref,
	}
	res, err := r.client.Database.GetPostgresConfig(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PostgresConfigResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedPostgresConfigResponse(res.PostgresConfigResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
