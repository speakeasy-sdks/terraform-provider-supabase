/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OwnershipVerification = {
  type: string;
  name: string;
  value: string;
};

/** @internal */
export const OwnershipVerification$inboundSchema: z.ZodType<
  OwnershipVerification,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type OwnershipVerification$Outbound = {
  type: string;
  name: string;
  value: string;
};

/** @internal */
export const OwnershipVerification$outboundSchema: z.ZodType<
  OwnershipVerification$Outbound,
  z.ZodTypeDef,
  OwnershipVerification
> = z.object({
  type: z.string(),
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OwnershipVerification$ {
  /** @deprecated use `OwnershipVerification$inboundSchema` instead. */
  export const inboundSchema = OwnershipVerification$inboundSchema;
  /** @deprecated use `OwnershipVerification$outboundSchema` instead. */
  export const outboundSchema = OwnershipVerification$outboundSchema;
  /** @deprecated use `OwnershipVerification$Outbound` instead. */
  export type Outbound = OwnershipVerification$Outbound;
}

export function ownershipVerificationToJSON(
  ownershipVerification: OwnershipVerification,
): string {
  return JSON.stringify(
    OwnershipVerification$outboundSchema.parse(ownershipVerification),
  );
}

export function ownershipVerificationFromJSON(
  jsonString: string,
): SafeParseResult<OwnershipVerification, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OwnershipVerification$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OwnershipVerification' from JSON`,
  );
}
