/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AttributeMapping,
  AttributeMapping$inboundSchema,
  AttributeMapping$Outbound,
  AttributeMapping$outboundSchema,
} from "./attributemapping.js";

/**
 * What type of provider will be created
 */
export const CreateProviderBodyType = {
  Saml: "saml",
} as const;
/**
 * What type of provider will be created
 */
export type CreateProviderBodyType = ClosedEnum<typeof CreateProviderBodyType>;

export type CreateProviderBody = {
  /**
   * What type of provider will be created
   */
  type: CreateProviderBodyType;
  metadataXml?: string | undefined;
  metadataUrl?: string | undefined;
  domains?: Array<string> | undefined;
  attributeMapping?: AttributeMapping | undefined;
};

/** @internal */
export const CreateProviderBodyType$inboundSchema: z.ZodNativeEnum<
  typeof CreateProviderBodyType
> = z.nativeEnum(CreateProviderBodyType);

/** @internal */
export const CreateProviderBodyType$outboundSchema: z.ZodNativeEnum<
  typeof CreateProviderBodyType
> = CreateProviderBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProviderBodyType$ {
  /** @deprecated use `CreateProviderBodyType$inboundSchema` instead. */
  export const inboundSchema = CreateProviderBodyType$inboundSchema;
  /** @deprecated use `CreateProviderBodyType$outboundSchema` instead. */
  export const outboundSchema = CreateProviderBodyType$outboundSchema;
}

/** @internal */
export const CreateProviderBody$inboundSchema: z.ZodType<
  CreateProviderBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateProviderBodyType$inboundSchema,
  metadata_xml: z.string().optional(),
  metadata_url: z.string().optional(),
  domains: z.array(z.string()).optional(),
  attribute_mapping: AttributeMapping$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "metadata_xml": "metadataXml",
    "metadata_url": "metadataUrl",
    "attribute_mapping": "attributeMapping",
  });
});

/** @internal */
export type CreateProviderBody$Outbound = {
  type: string;
  metadata_xml?: string | undefined;
  metadata_url?: string | undefined;
  domains?: Array<string> | undefined;
  attribute_mapping?: AttributeMapping$Outbound | undefined;
};

/** @internal */
export const CreateProviderBody$outboundSchema: z.ZodType<
  CreateProviderBody$Outbound,
  z.ZodTypeDef,
  CreateProviderBody
> = z.object({
  type: CreateProviderBodyType$outboundSchema,
  metadataXml: z.string().optional(),
  metadataUrl: z.string().optional(),
  domains: z.array(z.string()).optional(),
  attributeMapping: AttributeMapping$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    metadataXml: "metadata_xml",
    metadataUrl: "metadata_url",
    attributeMapping: "attribute_mapping",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProviderBody$ {
  /** @deprecated use `CreateProviderBody$inboundSchema` instead. */
  export const inboundSchema = CreateProviderBody$inboundSchema;
  /** @deprecated use `CreateProviderBody$outboundSchema` instead. */
  export const outboundSchema = CreateProviderBody$outboundSchema;
  /** @deprecated use `CreateProviderBody$Outbound` instead. */
  export type Outbound = CreateProviderBody$Outbound;
}

export function createProviderBodyToJSON(
  createProviderBody: CreateProviderBody,
): string {
  return JSON.stringify(
    CreateProviderBody$outboundSchema.parse(createProviderBody),
  );
}

export function createProviderBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateProviderBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProviderBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProviderBody' from JSON`,
  );
}
