/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OwnershipVerification,
  OwnershipVerification$inboundSchema,
  OwnershipVerification$Outbound,
  OwnershipVerification$outboundSchema,
} from "./ownershipverification.js";
import {
  SslValidation,
  SslValidation$inboundSchema,
  SslValidation$Outbound,
  SslValidation$outboundSchema,
} from "./sslvalidation.js";

export type CustomHostnameDetails = {
  id: string;
  hostname: string;
  ssl: SslValidation;
  ownershipVerification: OwnershipVerification;
  customOriginServer: string;
  verificationErrors?: Array<string> | undefined;
  status: string;
};

/** @internal */
export const CustomHostnameDetails$inboundSchema: z.ZodType<
  CustomHostnameDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  hostname: z.string(),
  ssl: SslValidation$inboundSchema,
  ownership_verification: OwnershipVerification$inboundSchema,
  custom_origin_server: z.string(),
  verification_errors: z.array(z.string()).optional(),
  status: z.string(),
}).transform((v) => {
  return remap$(v, {
    "ownership_verification": "ownershipVerification",
    "custom_origin_server": "customOriginServer",
    "verification_errors": "verificationErrors",
  });
});

/** @internal */
export type CustomHostnameDetails$Outbound = {
  id: string;
  hostname: string;
  ssl: SslValidation$Outbound;
  ownership_verification: OwnershipVerification$Outbound;
  custom_origin_server: string;
  verification_errors?: Array<string> | undefined;
  status: string;
};

/** @internal */
export const CustomHostnameDetails$outboundSchema: z.ZodType<
  CustomHostnameDetails$Outbound,
  z.ZodTypeDef,
  CustomHostnameDetails
> = z.object({
  id: z.string(),
  hostname: z.string(),
  ssl: SslValidation$outboundSchema,
  ownershipVerification: OwnershipVerification$outboundSchema,
  customOriginServer: z.string(),
  verificationErrors: z.array(z.string()).optional(),
  status: z.string(),
}).transform((v) => {
  return remap$(v, {
    ownershipVerification: "ownership_verification",
    customOriginServer: "custom_origin_server",
    verificationErrors: "verification_errors",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomHostnameDetails$ {
  /** @deprecated use `CustomHostnameDetails$inboundSchema` instead. */
  export const inboundSchema = CustomHostnameDetails$inboundSchema;
  /** @deprecated use `CustomHostnameDetails$outboundSchema` instead. */
  export const outboundSchema = CustomHostnameDetails$outboundSchema;
  /** @deprecated use `CustomHostnameDetails$Outbound` instead. */
  export type Outbound = CustomHostnameDetails$Outbound;
}

export function customHostnameDetailsToJSON(
  customHostnameDetails: CustomHostnameDetails,
): string {
  return JSON.stringify(
    CustomHostnameDetails$outboundSchema.parse(customHostnameDetails),
  );
}

export function customHostnameDetailsFromJSON(
  jsonString: string,
): SafeParseResult<CustomHostnameDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomHostnameDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomHostnameDetails' from JSON`,
  );
}
