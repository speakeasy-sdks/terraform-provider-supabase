/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1ListAllBackupsRequest = {
  /**
   * Project ref
   */
  ref: string;
};

/** @internal */
export const V1ListAllBackupsRequest$inboundSchema: z.ZodType<
  V1ListAllBackupsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ref: z.string(),
});

/** @internal */
export type V1ListAllBackupsRequest$Outbound = {
  ref: string;
};

/** @internal */
export const V1ListAllBackupsRequest$outboundSchema: z.ZodType<
  V1ListAllBackupsRequest$Outbound,
  z.ZodTypeDef,
  V1ListAllBackupsRequest
> = z.object({
  ref: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1ListAllBackupsRequest$ {
  /** @deprecated use `V1ListAllBackupsRequest$inboundSchema` instead. */
  export const inboundSchema = V1ListAllBackupsRequest$inboundSchema;
  /** @deprecated use `V1ListAllBackupsRequest$outboundSchema` instead. */
  export const outboundSchema = V1ListAllBackupsRequest$outboundSchema;
  /** @deprecated use `V1ListAllBackupsRequest$Outbound` instead. */
  export type Outbound = V1ListAllBackupsRequest$Outbound;
}

export function v1ListAllBackupsRequestToJSON(
  v1ListAllBackupsRequest: V1ListAllBackupsRequest,
): string {
  return JSON.stringify(
    V1ListAllBackupsRequest$outboundSchema.parse(v1ListAllBackupsRequest),
  );
}

export function v1ListAllBackupsRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1ListAllBackupsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1ListAllBackupsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1ListAllBackupsRequest' from JSON`,
  );
}
