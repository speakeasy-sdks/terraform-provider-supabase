/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DesiredInstanceSize,
  DesiredInstanceSize$inboundSchema,
  DesiredInstanceSize$outboundSchema,
} from "./desiredinstancesize.js";
import {
  PostgresEngine,
  PostgresEngine$inboundSchema,
  PostgresEngine$outboundSchema,
} from "./postgresengine.js";
import {
  ReleaseChannel,
  ReleaseChannel$inboundSchema,
  ReleaseChannel$outboundSchema,
} from "./releasechannel.js";

export type CreateBranchBody = {
  desiredInstanceSize?: DesiredInstanceSize | undefined;
  releaseChannel?: ReleaseChannel | undefined;
  /**
   * Postgres engine version. If not provided, the latest version will be used.
   */
  postgresEngine?: PostgresEngine | undefined;
  branchName: string;
  gitBranch?: string | undefined;
  persistent?: boolean | undefined;
  region?: string | undefined;
};

/** @internal */
export const CreateBranchBody$inboundSchema: z.ZodType<
  CreateBranchBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  desired_instance_size: DesiredInstanceSize$inboundSchema.optional(),
  release_channel: ReleaseChannel$inboundSchema.optional(),
  postgres_engine: PostgresEngine$inboundSchema.optional(),
  branch_name: z.string(),
  git_branch: z.string().optional(),
  persistent: z.boolean().optional(),
  region: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "desired_instance_size": "desiredInstanceSize",
    "release_channel": "releaseChannel",
    "postgres_engine": "postgresEngine",
    "branch_name": "branchName",
    "git_branch": "gitBranch",
  });
});

/** @internal */
export type CreateBranchBody$Outbound = {
  desired_instance_size?: string | undefined;
  release_channel?: string | undefined;
  postgres_engine?: string | undefined;
  branch_name: string;
  git_branch?: string | undefined;
  persistent?: boolean | undefined;
  region?: string | undefined;
};

/** @internal */
export const CreateBranchBody$outboundSchema: z.ZodType<
  CreateBranchBody$Outbound,
  z.ZodTypeDef,
  CreateBranchBody
> = z.object({
  desiredInstanceSize: DesiredInstanceSize$outboundSchema.optional(),
  releaseChannel: ReleaseChannel$outboundSchema.optional(),
  postgresEngine: PostgresEngine$outboundSchema.optional(),
  branchName: z.string(),
  gitBranch: z.string().optional(),
  persistent: z.boolean().optional(),
  region: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    desiredInstanceSize: "desired_instance_size",
    releaseChannel: "release_channel",
    postgresEngine: "postgres_engine",
    branchName: "branch_name",
    gitBranch: "git_branch",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBranchBody$ {
  /** @deprecated use `CreateBranchBody$inboundSchema` instead. */
  export const inboundSchema = CreateBranchBody$inboundSchema;
  /** @deprecated use `CreateBranchBody$outboundSchema` instead. */
  export const outboundSchema = CreateBranchBody$outboundSchema;
  /** @deprecated use `CreateBranchBody$Outbound` instead. */
  export type Outbound = CreateBranchBody$Outbound;
}

export function createBranchBodyToJSON(
  createBranchBody: CreateBranchBody,
): string {
  return JSON.stringify(
    CreateBranchBody$outboundSchema.parse(createBranchBody),
  );
}

export function createBranchBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateBranchBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBranchBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBranchBody' from JSON`,
  );
}
