/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1ListAllSnippetsRequest = {
  projectRef?: string | undefined;
};

/** @internal */
export const V1ListAllSnippetsRequest$inboundSchema: z.ZodType<
  V1ListAllSnippetsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_ref: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "project_ref": "projectRef",
  });
});

/** @internal */
export type V1ListAllSnippetsRequest$Outbound = {
  project_ref?: string | undefined;
};

/** @internal */
export const V1ListAllSnippetsRequest$outboundSchema: z.ZodType<
  V1ListAllSnippetsRequest$Outbound,
  z.ZodTypeDef,
  V1ListAllSnippetsRequest
> = z.object({
  projectRef: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    projectRef: "project_ref",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1ListAllSnippetsRequest$ {
  /** @deprecated use `V1ListAllSnippetsRequest$inboundSchema` instead. */
  export const inboundSchema = V1ListAllSnippetsRequest$inboundSchema;
  /** @deprecated use `V1ListAllSnippetsRequest$outboundSchema` instead. */
  export const outboundSchema = V1ListAllSnippetsRequest$outboundSchema;
  /** @deprecated use `V1ListAllSnippetsRequest$Outbound` instead. */
  export type Outbound = V1ListAllSnippetsRequest$Outbound;
}

export function v1ListAllSnippetsRequestToJSON(
  v1ListAllSnippetsRequest: V1ListAllSnippetsRequest,
): string {
  return JSON.stringify(
    V1ListAllSnippetsRequest$outboundSchema.parse(v1ListAllSnippetsRequest),
  );
}

export function v1ListAllSnippetsRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1ListAllSnippetsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1ListAllSnippetsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1ListAllSnippetsRequest' from JSON`,
  );
}
