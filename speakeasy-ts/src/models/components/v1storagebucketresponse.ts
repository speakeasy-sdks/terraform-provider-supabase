/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1StorageBucketResponse = {
  id: string;
  name: string;
  owner: string;
  createdAt: string;
  updatedAt: string;
  public: boolean;
};

/** @internal */
export const V1StorageBucketResponse$inboundSchema: z.ZodType<
  V1StorageBucketResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  owner: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
  public: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type V1StorageBucketResponse$Outbound = {
  id: string;
  name: string;
  owner: string;
  created_at: string;
  updated_at: string;
  public: boolean;
};

/** @internal */
export const V1StorageBucketResponse$outboundSchema: z.ZodType<
  V1StorageBucketResponse$Outbound,
  z.ZodTypeDef,
  V1StorageBucketResponse
> = z.object({
  id: z.string(),
  name: z.string(),
  owner: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  public: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1StorageBucketResponse$ {
  /** @deprecated use `V1StorageBucketResponse$inboundSchema` instead. */
  export const inboundSchema = V1StorageBucketResponse$inboundSchema;
  /** @deprecated use `V1StorageBucketResponse$outboundSchema` instead. */
  export const outboundSchema = V1StorageBucketResponse$outboundSchema;
  /** @deprecated use `V1StorageBucketResponse$Outbound` instead. */
  export type Outbound = V1StorageBucketResponse$Outbound;
}

export function v1StorageBucketResponseToJSON(
  v1StorageBucketResponse: V1StorageBucketResponse,
): string {
  return JSON.stringify(
    V1StorageBucketResponse$outboundSchema.parse(v1StorageBucketResponse),
  );
}

export function v1StorageBucketResponseFromJSON(
  jsonString: string,
): SafeParseResult<V1StorageBucketResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1StorageBucketResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1StorageBucketResponse' from JSON`,
  );
}
