/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PostgresEngine,
  PostgresEngine$inboundSchema,
  PostgresEngine$outboundSchema,
} from "./postgresengine.js";
import {
  ReleaseChannel,
  ReleaseChannel$inboundSchema,
  ReleaseChannel$outboundSchema,
} from "./releasechannel.js";

export type ProjectVersion = {
  /**
   * Postgres engine version. If not provided, the latest version will be used.
   */
  postgresVersion: PostgresEngine;
  releaseChannel: ReleaseChannel;
  appVersion: string;
};

/** @internal */
export const ProjectVersion$inboundSchema: z.ZodType<
  ProjectVersion,
  z.ZodTypeDef,
  unknown
> = z.object({
  postgres_version: PostgresEngine$inboundSchema,
  release_channel: ReleaseChannel$inboundSchema,
  app_version: z.string(),
}).transform((v) => {
  return remap$(v, {
    "postgres_version": "postgresVersion",
    "release_channel": "releaseChannel",
    "app_version": "appVersion",
  });
});

/** @internal */
export type ProjectVersion$Outbound = {
  postgres_version: string;
  release_channel: string;
  app_version: string;
};

/** @internal */
export const ProjectVersion$outboundSchema: z.ZodType<
  ProjectVersion$Outbound,
  z.ZodTypeDef,
  ProjectVersion
> = z.object({
  postgresVersion: PostgresEngine$outboundSchema,
  releaseChannel: ReleaseChannel$outboundSchema,
  appVersion: z.string(),
}).transform((v) => {
  return remap$(v, {
    postgresVersion: "postgres_version",
    releaseChannel: "release_channel",
    appVersion: "app_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectVersion$ {
  /** @deprecated use `ProjectVersion$inboundSchema` instead. */
  export const inboundSchema = ProjectVersion$inboundSchema;
  /** @deprecated use `ProjectVersion$outboundSchema` instead. */
  export const outboundSchema = ProjectVersion$outboundSchema;
  /** @deprecated use `ProjectVersion$Outbound` instead. */
  export type Outbound = ProjectVersion$Outbound;
}

export function projectVersionToJSON(projectVersion: ProjectVersion): string {
  return JSON.stringify(ProjectVersion$outboundSchema.parse(projectVersion));
}

export function projectVersionFromJSON(
  jsonString: string,
): SafeParseResult<ProjectVersion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectVersion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectVersion' from JSON`,
  );
}
