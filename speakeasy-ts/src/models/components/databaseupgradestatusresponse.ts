/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const DatabaseUpgradeStatusResponseStatus = {
  Zero: 0,
  One: 1,
  Two: 2,
} as const;
export type DatabaseUpgradeStatusResponseStatus = ClosedEnum<
  typeof DatabaseUpgradeStatusResponseStatus
>;

export const ErrorT = {
  OneUpgradedInstanceLaunchFailed: "1_upgraded_instance_launch_failed",
  TwoVolumeDetachchmentFromUpgradedInstanceFailed:
    "2_volume_detachchment_from_upgraded_instance_failed",
  ThreeVolumeAttachmentToOriginalInstanceFailed:
    "3_volume_attachment_to_original_instance_failed",
  FourDataUpgradeInitiationFailed: "4_data_upgrade_initiation_failed",
  FiveDataUpgradeCompletionFailed: "5_data_upgrade_completion_failed",
  SixVolumeDetachchmentFromOriginalInstanceFailed:
    "6_volume_detachchment_from_original_instance_failed",
  SevenVolumeAttachmentToUpgradedInstanceFailed:
    "7_volume_attachment_to_upgraded_instance_failed",
  EightUpgradeCompletionFailed: "8_upgrade_completion_failed",
  NinePostPhysicalBackupFailed: "9_post_physical_backup_failed",
} as const;
export type ErrorT = ClosedEnum<typeof ErrorT>;

export const Progress = {
  ZeroRequested: "0_requested",
  OneStarted: "1_started",
  TwoLaunchedUpgradedInstance: "2_launched_upgraded_instance",
  ThreeDetachedVolumeFromUpgradedInstance:
    "3_detached_volume_from_upgraded_instance",
  FourAttachedVolumeToOriginalInstance:
    "4_attached_volume_to_original_instance",
  FiveInitiatedDataUpgrade: "5_initiated_data_upgrade",
  SixCompletedDataUpgrade: "6_completed_data_upgrade",
  SevenDetachedVolumeFromOriginalInstance:
    "7_detached_volume_from_original_instance",
  EightAttachedVolumeToUpgradedInstance:
    "8_attached_volume_to_upgraded_instance",
  NineCompletedUpgrade: "9_completed_upgrade",
  TenCompletedPostPhysicalBackup: "10_completed_post_physical_backup",
} as const;
export type Progress = ClosedEnum<typeof Progress>;

export type DatabaseUpgradeStatus = {
  targetVersion: number;
  status: DatabaseUpgradeStatusResponseStatus;
  initiatedAt: string;
  latestStatusAt: string;
  error?: ErrorT | undefined;
  progress?: Progress | undefined;
};

export type DatabaseUpgradeStatusResponse = {
  databaseUpgradeStatus: DatabaseUpgradeStatus | null;
};

/** @internal */
export const DatabaseUpgradeStatusResponseStatus$inboundSchema: z.ZodNativeEnum<
  typeof DatabaseUpgradeStatusResponseStatus
> = z.nativeEnum(DatabaseUpgradeStatusResponseStatus);

/** @internal */
export const DatabaseUpgradeStatusResponseStatus$outboundSchema:
  z.ZodNativeEnum<typeof DatabaseUpgradeStatusResponseStatus> =
    DatabaseUpgradeStatusResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DatabaseUpgradeStatusResponseStatus$ {
  /** @deprecated use `DatabaseUpgradeStatusResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    DatabaseUpgradeStatusResponseStatus$inboundSchema;
  /** @deprecated use `DatabaseUpgradeStatusResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    DatabaseUpgradeStatusResponseStatus$outboundSchema;
}

/** @internal */
export const ErrorT$inboundSchema: z.ZodNativeEnum<typeof ErrorT> = z
  .nativeEnum(ErrorT);

/** @internal */
export const ErrorT$outboundSchema: z.ZodNativeEnum<typeof ErrorT> =
  ErrorT$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorT$ {
  /** @deprecated use `ErrorT$inboundSchema` instead. */
  export const inboundSchema = ErrorT$inboundSchema;
  /** @deprecated use `ErrorT$outboundSchema` instead. */
  export const outboundSchema = ErrorT$outboundSchema;
}

/** @internal */
export const Progress$inboundSchema: z.ZodNativeEnum<typeof Progress> = z
  .nativeEnum(Progress);

/** @internal */
export const Progress$outboundSchema: z.ZodNativeEnum<typeof Progress> =
  Progress$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Progress$ {
  /** @deprecated use `Progress$inboundSchema` instead. */
  export const inboundSchema = Progress$inboundSchema;
  /** @deprecated use `Progress$outboundSchema` instead. */
  export const outboundSchema = Progress$outboundSchema;
}

/** @internal */
export const DatabaseUpgradeStatus$inboundSchema: z.ZodType<
  DatabaseUpgradeStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  target_version: z.number().int(),
  status: DatabaseUpgradeStatusResponseStatus$inboundSchema,
  initiated_at: z.string(),
  latest_status_at: z.string(),
  error: ErrorT$inboundSchema.optional(),
  progress: Progress$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "target_version": "targetVersion",
    "initiated_at": "initiatedAt",
    "latest_status_at": "latestStatusAt",
  });
});

/** @internal */
export type DatabaseUpgradeStatus$Outbound = {
  target_version: number;
  status: number;
  initiated_at: string;
  latest_status_at: string;
  error?: string | undefined;
  progress?: string | undefined;
};

/** @internal */
export const DatabaseUpgradeStatus$outboundSchema: z.ZodType<
  DatabaseUpgradeStatus$Outbound,
  z.ZodTypeDef,
  DatabaseUpgradeStatus
> = z.object({
  targetVersion: z.number().int(),
  status: DatabaseUpgradeStatusResponseStatus$outboundSchema,
  initiatedAt: z.string(),
  latestStatusAt: z.string(),
  error: ErrorT$outboundSchema.optional(),
  progress: Progress$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    targetVersion: "target_version",
    initiatedAt: "initiated_at",
    latestStatusAt: "latest_status_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DatabaseUpgradeStatus$ {
  /** @deprecated use `DatabaseUpgradeStatus$inboundSchema` instead. */
  export const inboundSchema = DatabaseUpgradeStatus$inboundSchema;
  /** @deprecated use `DatabaseUpgradeStatus$outboundSchema` instead. */
  export const outboundSchema = DatabaseUpgradeStatus$outboundSchema;
  /** @deprecated use `DatabaseUpgradeStatus$Outbound` instead. */
  export type Outbound = DatabaseUpgradeStatus$Outbound;
}

export function databaseUpgradeStatusToJSON(
  databaseUpgradeStatus: DatabaseUpgradeStatus,
): string {
  return JSON.stringify(
    DatabaseUpgradeStatus$outboundSchema.parse(databaseUpgradeStatus),
  );
}

export function databaseUpgradeStatusFromJSON(
  jsonString: string,
): SafeParseResult<DatabaseUpgradeStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DatabaseUpgradeStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DatabaseUpgradeStatus' from JSON`,
  );
}

/** @internal */
export const DatabaseUpgradeStatusResponse$inboundSchema: z.ZodType<
  DatabaseUpgradeStatusResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  databaseUpgradeStatus: z.nullable(
    z.lazy(() => DatabaseUpgradeStatus$inboundSchema),
  ),
});

/** @internal */
export type DatabaseUpgradeStatusResponse$Outbound = {
  databaseUpgradeStatus: DatabaseUpgradeStatus$Outbound | null;
};

/** @internal */
export const DatabaseUpgradeStatusResponse$outboundSchema: z.ZodType<
  DatabaseUpgradeStatusResponse$Outbound,
  z.ZodTypeDef,
  DatabaseUpgradeStatusResponse
> = z.object({
  databaseUpgradeStatus: z.nullable(
    z.lazy(() => DatabaseUpgradeStatus$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DatabaseUpgradeStatusResponse$ {
  /** @deprecated use `DatabaseUpgradeStatusResponse$inboundSchema` instead. */
  export const inboundSchema = DatabaseUpgradeStatusResponse$inboundSchema;
  /** @deprecated use `DatabaseUpgradeStatusResponse$outboundSchema` instead. */
  export const outboundSchema = DatabaseUpgradeStatusResponse$outboundSchema;
  /** @deprecated use `DatabaseUpgradeStatusResponse$Outbound` instead. */
  export type Outbound = DatabaseUpgradeStatusResponse$Outbound;
}

export function databaseUpgradeStatusResponseToJSON(
  databaseUpgradeStatusResponse: DatabaseUpgradeStatusResponse,
): string {
  return JSON.stringify(
    DatabaseUpgradeStatusResponse$outboundSchema.parse(
      databaseUpgradeStatusResponse,
    ),
  );
}

export function databaseUpgradeStatusResponseFromJSON(
  jsonString: string,
): SafeParseResult<DatabaseUpgradeStatusResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DatabaseUpgradeStatusResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DatabaseUpgradeStatusResponse' from JSON`,
  );
}
