/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1PostgrestConfigResponse = {
  maxRows: number;
  /**
   * If `null`, the value is automatically configured based on compute size.
   */
  dbPool: number | null;
  dbSchema: string;
  dbExtraSearchPath: string;
};

/** @internal */
export const V1PostgrestConfigResponse$inboundSchema: z.ZodType<
  V1PostgrestConfigResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  max_rows: z.number().int(),
  db_pool: z.nullable(z.number().int()),
  db_schema: z.string(),
  db_extra_search_path: z.string(),
}).transform((v) => {
  return remap$(v, {
    "max_rows": "maxRows",
    "db_pool": "dbPool",
    "db_schema": "dbSchema",
    "db_extra_search_path": "dbExtraSearchPath",
  });
});

/** @internal */
export type V1PostgrestConfigResponse$Outbound = {
  max_rows: number;
  db_pool: number | null;
  db_schema: string;
  db_extra_search_path: string;
};

/** @internal */
export const V1PostgrestConfigResponse$outboundSchema: z.ZodType<
  V1PostgrestConfigResponse$Outbound,
  z.ZodTypeDef,
  V1PostgrestConfigResponse
> = z.object({
  maxRows: z.number().int(),
  dbPool: z.nullable(z.number().int()),
  dbSchema: z.string(),
  dbExtraSearchPath: z.string(),
}).transform((v) => {
  return remap$(v, {
    maxRows: "max_rows",
    dbPool: "db_pool",
    dbSchema: "db_schema",
    dbExtraSearchPath: "db_extra_search_path",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1PostgrestConfigResponse$ {
  /** @deprecated use `V1PostgrestConfigResponse$inboundSchema` instead. */
  export const inboundSchema = V1PostgrestConfigResponse$inboundSchema;
  /** @deprecated use `V1PostgrestConfigResponse$outboundSchema` instead. */
  export const outboundSchema = V1PostgrestConfigResponse$outboundSchema;
  /** @deprecated use `V1PostgrestConfigResponse$Outbound` instead. */
  export type Outbound = V1PostgrestConfigResponse$Outbound;
}

export function v1PostgrestConfigResponseToJSON(
  v1PostgrestConfigResponse: V1PostgrestConfigResponse,
): string {
  return JSON.stringify(
    V1PostgrestConfigResponse$outboundSchema.parse(v1PostgrestConfigResponse),
  );
}

export function v1PostgrestConfigResponseFromJSON(
  jsonString: string,
): SafeParseResult<V1PostgrestConfigResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1PostgrestConfigResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1PostgrestConfigResponse' from JSON`,
  );
}
