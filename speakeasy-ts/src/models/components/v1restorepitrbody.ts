/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1RestorePitrBody = {
  recoveryTimeTargetUnix: number;
};

/** @internal */
export const V1RestorePitrBody$inboundSchema: z.ZodType<
  V1RestorePitrBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  recovery_time_target_unix: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "recovery_time_target_unix": "recoveryTimeTargetUnix",
  });
});

/** @internal */
export type V1RestorePitrBody$Outbound = {
  recovery_time_target_unix: number;
};

/** @internal */
export const V1RestorePitrBody$outboundSchema: z.ZodType<
  V1RestorePitrBody$Outbound,
  z.ZodTypeDef,
  V1RestorePitrBody
> = z.object({
  recoveryTimeTargetUnix: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    recoveryTimeTargetUnix: "recovery_time_target_unix",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1RestorePitrBody$ {
  /** @deprecated use `V1RestorePitrBody$inboundSchema` instead. */
  export const inboundSchema = V1RestorePitrBody$inboundSchema;
  /** @deprecated use `V1RestorePitrBody$outboundSchema` instead. */
  export const outboundSchema = V1RestorePitrBody$outboundSchema;
  /** @deprecated use `V1RestorePitrBody$Outbound` instead. */
  export type Outbound = V1RestorePitrBody$Outbound;
}

export function v1RestorePitrBodyToJSON(
  v1RestorePitrBody: V1RestorePitrBody,
): string {
  return JSON.stringify(
    V1RestorePitrBody$outboundSchema.parse(v1RestorePitrBody),
  );
}

export function v1RestorePitrBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1RestorePitrBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1RestorePitrBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1RestorePitrBody' from JSON`,
  );
}
