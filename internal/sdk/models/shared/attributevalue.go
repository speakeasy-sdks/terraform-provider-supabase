// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-supabase/internal/sdk/internal/utils"
)

type One struct {
}

type DefaultType string

const (
	DefaultTypeOne     DefaultType = "1"
	DefaultTypeNumber  DefaultType = "number"
	DefaultTypeStr     DefaultType = "str"
	DefaultTypeBoolean DefaultType = "boolean"
)

type Default struct {
	One     *One     `queryParam:"inline"`
	Number  *float64 `queryParam:"inline"`
	Str     *string  `queryParam:"inline"`
	Boolean *bool    `queryParam:"inline"`

	Type DefaultType
}

func CreateDefaultOne(one One) Default {
	typ := DefaultTypeOne

	return Default{
		One:  &one,
		Type: typ,
	}
}

func CreateDefaultNumber(number float64) Default {
	typ := DefaultTypeNumber

	return Default{
		Number: &number,
		Type:   typ,
	}
}

func CreateDefaultStr(str string) Default {
	typ := DefaultTypeStr

	return Default{
		Str:  &str,
		Type: typ,
	}
}

func CreateDefaultBoolean(boolean bool) Default {
	typ := DefaultTypeBoolean

	return Default{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *Default) UnmarshalJSON(data []byte) error {

	var one One = One{}
	if err := utils.UnmarshalJSON(data, &one, "", true, true); err == nil {
		u.One = &one
		u.Type = DefaultTypeOne
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = DefaultTypeNumber
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = DefaultTypeStr
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = DefaultTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Default", string(data))
}

func (u Default) MarshalJSON() ([]byte, error) {
	if u.One != nil {
		return utils.MarshalJSON(u.One, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type Default: all fields are null")
}

type AttributeValue struct {
	Default *Default `json:"default,omitempty"`
	Name    *string  `json:"name,omitempty"`
	Names   []string `json:"names,omitempty"`
	Array   *bool    `json:"array,omitempty"`
}

func (o *AttributeValue) GetDefault() *Default {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *AttributeValue) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AttributeValue) GetNames() []string {
	if o == nil {
		return nil
	}
	return o.Names
}

func (o *AttributeValue) GetArray() *bool {
	if o == nil {
		return nil
	}
	return o.Array
}
