// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type V1BackupStatus string

const (
	V1BackupStatusCompleted V1BackupStatus = "COMPLETED"
	V1BackupStatusFailed    V1BackupStatus = "FAILED"
	V1BackupStatusPending   V1BackupStatus = "PENDING"
	V1BackupStatusRemoved   V1BackupStatus = "REMOVED"
	V1BackupStatusArchived  V1BackupStatus = "ARCHIVED"
	V1BackupStatusCancelled V1BackupStatus = "CANCELLED"
)

func (e V1BackupStatus) ToPointer() *V1BackupStatus {
	return &e
}
func (e *V1BackupStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "COMPLETED":
		fallthrough
	case "FAILED":
		fallthrough
	case "PENDING":
		fallthrough
	case "REMOVED":
		fallthrough
	case "ARCHIVED":
		fallthrough
	case "CANCELLED":
		*e = V1BackupStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V1BackupStatus: %v", v)
	}
}

type V1Backup struct {
	Status           V1BackupStatus `json:"status"`
	IsPhysicalBackup bool           `json:"is_physical_backup"`
	InsertedAt       string         `json:"inserted_at"`
}

func (o *V1Backup) GetStatus() V1BackupStatus {
	if o == nil {
		return V1BackupStatus("")
	}
	return o.Status
}

func (o *V1Backup) GetIsPhysicalBackup() bool {
	if o == nil {
		return false
	}
	return o.IsPhysicalBackup
}

func (o *V1Backup) GetInsertedAt() string {
	if o == nil {
		return ""
	}
	return o.InsertedAt
}
