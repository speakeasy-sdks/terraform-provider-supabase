/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1SetupAReadReplicaRequest = {
  /**
   * Project ref
   */
  ref: string;
  setUpReadReplicaBody: components.SetUpReadReplicaBody;
};

/** @internal */
export const V1SetupAReadReplicaRequest$inboundSchema: z.ZodType<
  V1SetupAReadReplicaRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ref: z.string(),
  SetUpReadReplicaBody: components.SetUpReadReplicaBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "SetUpReadReplicaBody": "setUpReadReplicaBody",
  });
});

/** @internal */
export type V1SetupAReadReplicaRequest$Outbound = {
  ref: string;
  SetUpReadReplicaBody: components.SetUpReadReplicaBody$Outbound;
};

/** @internal */
export const V1SetupAReadReplicaRequest$outboundSchema: z.ZodType<
  V1SetupAReadReplicaRequest$Outbound,
  z.ZodTypeDef,
  V1SetupAReadReplicaRequest
> = z.object({
  ref: z.string(),
  setUpReadReplicaBody: components.SetUpReadReplicaBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    setUpReadReplicaBody: "SetUpReadReplicaBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1SetupAReadReplicaRequest$ {
  /** @deprecated use `V1SetupAReadReplicaRequest$inboundSchema` instead. */
  export const inboundSchema = V1SetupAReadReplicaRequest$inboundSchema;
  /** @deprecated use `V1SetupAReadReplicaRequest$outboundSchema` instead. */
  export const outboundSchema = V1SetupAReadReplicaRequest$outboundSchema;
  /** @deprecated use `V1SetupAReadReplicaRequest$Outbound` instead. */
  export type Outbound = V1SetupAReadReplicaRequest$Outbound;
}

export function v1SetupAReadReplicaRequestToJSON(
  v1SetupAReadReplicaRequest: V1SetupAReadReplicaRequest,
): string {
  return JSON.stringify(
    V1SetupAReadReplicaRequest$outboundSchema.parse(v1SetupAReadReplicaRequest),
  );
}

export function v1SetupAReadReplicaRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1SetupAReadReplicaRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1SetupAReadReplicaRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1SetupAReadReplicaRequest' from JSON`,
  );
}
