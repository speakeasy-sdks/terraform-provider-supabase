/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiKeyRequest = {
  /**
   * Project ref
   */
  ref: string;
  id: string;
  reveal: boolean;
};

/** @internal */
export const GetApiKeyRequest$inboundSchema: z.ZodType<
  GetApiKeyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ref: z.string(),
  id: z.string(),
  reveal: z.boolean(),
});

/** @internal */
export type GetApiKeyRequest$Outbound = {
  ref: string;
  id: string;
  reveal: boolean;
};

/** @internal */
export const GetApiKeyRequest$outboundSchema: z.ZodType<
  GetApiKeyRequest$Outbound,
  z.ZodTypeDef,
  GetApiKeyRequest
> = z.object({
  ref: z.string(),
  id: z.string(),
  reveal: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiKeyRequest$ {
  /** @deprecated use `GetApiKeyRequest$inboundSchema` instead. */
  export const inboundSchema = GetApiKeyRequest$inboundSchema;
  /** @deprecated use `GetApiKeyRequest$outboundSchema` instead. */
  export const outboundSchema = GetApiKeyRequest$outboundSchema;
  /** @deprecated use `GetApiKeyRequest$Outbound` instead. */
  export type Outbound = GetApiKeyRequest$Outbound;
}

export function getApiKeyRequestToJSON(
  getApiKeyRequest: GetApiKeyRequest,
): string {
  return JSON.stringify(
    GetApiKeyRequest$outboundSchema.parse(getApiKeyRequest),
  );
}

export function getApiKeyRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetApiKeyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiKeyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiKeyRequest' from JSON`,
  );
}
