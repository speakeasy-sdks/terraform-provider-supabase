/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateSecretBody = {
  /**
   * Secret name must not start with the SUPABASE_ prefix.
   */
  name: string;
  value: string;
};

/** @internal */
export const CreateSecretBody$inboundSchema: z.ZodType<
  CreateSecretBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type CreateSecretBody$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const CreateSecretBody$outboundSchema: z.ZodType<
  CreateSecretBody$Outbound,
  z.ZodTypeDef,
  CreateSecretBody
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSecretBody$ {
  /** @deprecated use `CreateSecretBody$inboundSchema` instead. */
  export const inboundSchema = CreateSecretBody$inboundSchema;
  /** @deprecated use `CreateSecretBody$outboundSchema` instead. */
  export const outboundSchema = CreateSecretBody$outboundSchema;
  /** @deprecated use `CreateSecretBody$Outbound` instead. */
  export type Outbound = CreateSecretBody$Outbound;
}

export function createSecretBodyToJSON(
  createSecretBody: CreateSecretBody,
): string {
  return JSON.stringify(
    CreateSecretBody$outboundSchema.parse(createSecretBody),
  );
}

export function createSecretBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateSecretBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSecretBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSecretBody' from JSON`,
  );
}
