/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1UpdateABranchConfigRequest = {
  /**
   * Branch ID
   */
  branchId: string;
  updateBranchBody: components.UpdateBranchBody;
};

/** @internal */
export const V1UpdateABranchConfigRequest$inboundSchema: z.ZodType<
  V1UpdateABranchConfigRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  branch_id: z.string(),
  UpdateBranchBody: components.UpdateBranchBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "branch_id": "branchId",
    "UpdateBranchBody": "updateBranchBody",
  });
});

/** @internal */
export type V1UpdateABranchConfigRequest$Outbound = {
  branch_id: string;
  UpdateBranchBody: components.UpdateBranchBody$Outbound;
};

/** @internal */
export const V1UpdateABranchConfigRequest$outboundSchema: z.ZodType<
  V1UpdateABranchConfigRequest$Outbound,
  z.ZodTypeDef,
  V1UpdateABranchConfigRequest
> = z.object({
  branchId: z.string(),
  updateBranchBody: components.UpdateBranchBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    branchId: "branch_id",
    updateBranchBody: "UpdateBranchBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1UpdateABranchConfigRequest$ {
  /** @deprecated use `V1UpdateABranchConfigRequest$inboundSchema` instead. */
  export const inboundSchema = V1UpdateABranchConfigRequest$inboundSchema;
  /** @deprecated use `V1UpdateABranchConfigRequest$outboundSchema` instead. */
  export const outboundSchema = V1UpdateABranchConfigRequest$outboundSchema;
  /** @deprecated use `V1UpdateABranchConfigRequest$Outbound` instead. */
  export type Outbound = V1UpdateABranchConfigRequest$Outbound;
}

export function v1UpdateABranchConfigRequestToJSON(
  v1UpdateABranchConfigRequest: V1UpdateABranchConfigRequest,
): string {
  return JSON.stringify(
    V1UpdateABranchConfigRequest$outboundSchema.parse(
      v1UpdateABranchConfigRequest,
    ),
  );
}

export function v1UpdateABranchConfigRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1UpdateABranchConfigRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1UpdateABranchConfigRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1UpdateABranchConfigRequest' from JSON`,
  );
}
