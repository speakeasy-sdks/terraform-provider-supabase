/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ThirdPartyAuthCustomJwks = {};

export type ResolvedJwks = {};

export type ThirdPartyAuth = {
  id: string;
  type: string;
  oidcIssuerUrl?: string | null | undefined;
  jwksUrl?: string | null | undefined;
  customJwks?: ThirdPartyAuthCustomJwks | null | undefined;
  resolvedJwks?: ResolvedJwks | null | undefined;
  insertedAt: string;
  updatedAt: string;
  resolvedAt?: string | null | undefined;
};

/** @internal */
export const ThirdPartyAuthCustomJwks$inboundSchema: z.ZodType<
  ThirdPartyAuthCustomJwks,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ThirdPartyAuthCustomJwks$Outbound = {};

/** @internal */
export const ThirdPartyAuthCustomJwks$outboundSchema: z.ZodType<
  ThirdPartyAuthCustomJwks$Outbound,
  z.ZodTypeDef,
  ThirdPartyAuthCustomJwks
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThirdPartyAuthCustomJwks$ {
  /** @deprecated use `ThirdPartyAuthCustomJwks$inboundSchema` instead. */
  export const inboundSchema = ThirdPartyAuthCustomJwks$inboundSchema;
  /** @deprecated use `ThirdPartyAuthCustomJwks$outboundSchema` instead. */
  export const outboundSchema = ThirdPartyAuthCustomJwks$outboundSchema;
  /** @deprecated use `ThirdPartyAuthCustomJwks$Outbound` instead. */
  export type Outbound = ThirdPartyAuthCustomJwks$Outbound;
}

export function thirdPartyAuthCustomJwksToJSON(
  thirdPartyAuthCustomJwks: ThirdPartyAuthCustomJwks,
): string {
  return JSON.stringify(
    ThirdPartyAuthCustomJwks$outboundSchema.parse(thirdPartyAuthCustomJwks),
  );
}

export function thirdPartyAuthCustomJwksFromJSON(
  jsonString: string,
): SafeParseResult<ThirdPartyAuthCustomJwks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ThirdPartyAuthCustomJwks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ThirdPartyAuthCustomJwks' from JSON`,
  );
}

/** @internal */
export const ResolvedJwks$inboundSchema: z.ZodType<
  ResolvedJwks,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ResolvedJwks$Outbound = {};

/** @internal */
export const ResolvedJwks$outboundSchema: z.ZodType<
  ResolvedJwks$Outbound,
  z.ZodTypeDef,
  ResolvedJwks
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResolvedJwks$ {
  /** @deprecated use `ResolvedJwks$inboundSchema` instead. */
  export const inboundSchema = ResolvedJwks$inboundSchema;
  /** @deprecated use `ResolvedJwks$outboundSchema` instead. */
  export const outboundSchema = ResolvedJwks$outboundSchema;
  /** @deprecated use `ResolvedJwks$Outbound` instead. */
  export type Outbound = ResolvedJwks$Outbound;
}

export function resolvedJwksToJSON(resolvedJwks: ResolvedJwks): string {
  return JSON.stringify(ResolvedJwks$outboundSchema.parse(resolvedJwks));
}

export function resolvedJwksFromJSON(
  jsonString: string,
): SafeParseResult<ResolvedJwks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResolvedJwks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResolvedJwks' from JSON`,
  );
}

/** @internal */
export const ThirdPartyAuth$inboundSchema: z.ZodType<
  ThirdPartyAuth,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: z.string(),
  oidc_issuer_url: z.nullable(z.string()).optional(),
  jwks_url: z.nullable(z.string()).optional(),
  custom_jwks: z.nullable(z.lazy(() => ThirdPartyAuthCustomJwks$inboundSchema))
    .optional(),
  resolved_jwks: z.nullable(z.lazy(() => ResolvedJwks$inboundSchema))
    .optional(),
  inserted_at: z.string(),
  updated_at: z.string(),
  resolved_at: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "oidc_issuer_url": "oidcIssuerUrl",
    "jwks_url": "jwksUrl",
    "custom_jwks": "customJwks",
    "resolved_jwks": "resolvedJwks",
    "inserted_at": "insertedAt",
    "updated_at": "updatedAt",
    "resolved_at": "resolvedAt",
  });
});

/** @internal */
export type ThirdPartyAuth$Outbound = {
  id: string;
  type: string;
  oidc_issuer_url?: string | null | undefined;
  jwks_url?: string | null | undefined;
  custom_jwks?: ThirdPartyAuthCustomJwks$Outbound | null | undefined;
  resolved_jwks?: ResolvedJwks$Outbound | null | undefined;
  inserted_at: string;
  updated_at: string;
  resolved_at?: string | null | undefined;
};

/** @internal */
export const ThirdPartyAuth$outboundSchema: z.ZodType<
  ThirdPartyAuth$Outbound,
  z.ZodTypeDef,
  ThirdPartyAuth
> = z.object({
  id: z.string(),
  type: z.string(),
  oidcIssuerUrl: z.nullable(z.string()).optional(),
  jwksUrl: z.nullable(z.string()).optional(),
  customJwks: z.nullable(z.lazy(() => ThirdPartyAuthCustomJwks$outboundSchema))
    .optional(),
  resolvedJwks: z.nullable(z.lazy(() => ResolvedJwks$outboundSchema))
    .optional(),
  insertedAt: z.string(),
  updatedAt: z.string(),
  resolvedAt: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    oidcIssuerUrl: "oidc_issuer_url",
    jwksUrl: "jwks_url",
    customJwks: "custom_jwks",
    resolvedJwks: "resolved_jwks",
    insertedAt: "inserted_at",
    updatedAt: "updated_at",
    resolvedAt: "resolved_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThirdPartyAuth$ {
  /** @deprecated use `ThirdPartyAuth$inboundSchema` instead. */
  export const inboundSchema = ThirdPartyAuth$inboundSchema;
  /** @deprecated use `ThirdPartyAuth$outboundSchema` instead. */
  export const outboundSchema = ThirdPartyAuth$outboundSchema;
  /** @deprecated use `ThirdPartyAuth$Outbound` instead. */
  export type Outbound = ThirdPartyAuth$Outbound;
}

export function thirdPartyAuthToJSON(thirdPartyAuth: ThirdPartyAuth): string {
  return JSON.stringify(ThirdPartyAuth$outboundSchema.parse(thirdPartyAuth));
}

export function thirdPartyAuthFromJSON(
  jsonString: string,
): SafeParseResult<ThirdPartyAuth, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ThirdPartyAuth$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ThirdPartyAuth' from JSON`,
  );
}
