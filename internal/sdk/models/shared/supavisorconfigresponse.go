// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DatabaseType string

const (
	DatabaseTypePrimary     DatabaseType = "PRIMARY"
	DatabaseTypeReadReplica DatabaseType = "READ_REPLICA"
)

func (e DatabaseType) ToPointer() *DatabaseType {
	return &e
}
func (e *DatabaseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PRIMARY":
		fallthrough
	case "READ_REPLICA":
		*e = DatabaseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DatabaseType: %v", v)
	}
}

type SupavisorConfigResponsePoolMode string

const (
	SupavisorConfigResponsePoolModeTransaction SupavisorConfigResponsePoolMode = "transaction"
	SupavisorConfigResponsePoolModeSession     SupavisorConfigResponsePoolMode = "session"
)

func (e SupavisorConfigResponsePoolMode) ToPointer() *SupavisorConfigResponsePoolMode {
	return &e
}
func (e *SupavisorConfigResponsePoolMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "transaction":
		fallthrough
	case "session":
		*e = SupavisorConfigResponsePoolMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SupavisorConfigResponsePoolMode: %v", v)
	}
}

type SupavisorConfigResponse struct {
	DbPort           int64                           `json:"db_port"`
	DefaultPoolSize  *int64                          `json:"default_pool_size"`
	MaxClientConn    *int64                          `json:"max_client_conn"`
	Identifier       string                          `json:"identifier"`
	DatabaseType     DatabaseType                    `json:"database_type"`
	IsUsingScramAuth bool                            `json:"is_using_scram_auth"`
	DbUser           string                          `json:"db_user"`
	DbHost           string                          `json:"db_host"`
	DbName           string                          `json:"db_name"`
	ConnectionString string                          `json:"connectionString"`
	PoolMode         SupavisorConfigResponsePoolMode `json:"pool_mode"`
}

func (o *SupavisorConfigResponse) GetDbPort() int64 {
	if o == nil {
		return 0
	}
	return o.DbPort
}

func (o *SupavisorConfigResponse) GetDefaultPoolSize() *int64 {
	if o == nil {
		return nil
	}
	return o.DefaultPoolSize
}

func (o *SupavisorConfigResponse) GetMaxClientConn() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxClientConn
}

func (o *SupavisorConfigResponse) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SupavisorConfigResponse) GetDatabaseType() DatabaseType {
	if o == nil {
		return DatabaseType("")
	}
	return o.DatabaseType
}

func (o *SupavisorConfigResponse) GetIsUsingScramAuth() bool {
	if o == nil {
		return false
	}
	return o.IsUsingScramAuth
}

func (o *SupavisorConfigResponse) GetDbUser() string {
	if o == nil {
		return ""
	}
	return o.DbUser
}

func (o *SupavisorConfigResponse) GetDbHost() string {
	if o == nil {
		return ""
	}
	return o.DbHost
}

func (o *SupavisorConfigResponse) GetDbName() string {
	if o == nil {
		return ""
	}
	return o.DbName
}

func (o *SupavisorConfigResponse) GetConnectionString() string {
	if o == nil {
		return ""
	}
	return o.ConnectionString
}

func (o *SupavisorConfigResponse) GetPoolMode() SupavisorConfigResponsePoolMode {
	if o == nil {
		return SupavisorConfigResponsePoolMode("")
	}
	return o.PoolMode
}
