/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { authCreateSsoProvider } from "../funcs/authCreateSsoProvider.js";
import { authCreateThirdPartyAuth } from "../funcs/authCreateThirdPartyAuth.js";
import { authDeleteSsoProvider } from "../funcs/authDeleteSsoProvider.js";
import { authDeleteThirdPartyAuth } from "../funcs/authDeleteThirdPartyAuth.js";
import { authGetConfig } from "../funcs/authGetConfig.js";
import { authGetSsoProvider } from "../funcs/authGetSsoProvider.js";
import { authGetThirdPartyAuth } from "../funcs/authGetThirdPartyAuth.js";
import { authListSsoProviders } from "../funcs/authListSsoProviders.js";
import { authListThirdPartyAuth } from "../funcs/authListThirdPartyAuth.js";
import { authUpdateAuthConfig } from "../funcs/authUpdateAuthConfig.js";
import { authUpdateSsoProvider } from "../funcs/authUpdateSsoProvider.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Auth extends ClientSDK {
  /**
   * Gets project's auth config
   */
  async getConfig(
    request: operations.V1GetAuthServiceConfigRequest,
    options?: RequestOptions,
  ): Promise<components.AuthConfigResponse> {
    return unwrapAsync(authGetConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Updates a project's auth config
   */
  async updateAuthConfig(
    request: operations.V1UpdateAuthServiceConfigRequest,
    options?: RequestOptions,
  ): Promise<components.AuthConfigResponse> {
    return unwrapAsync(authUpdateAuthConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates a new third-party auth integration
   */
  async createThirdPartyAuth(
    request: operations.CreateTPAForProjectRequest,
    options?: RequestOptions,
  ): Promise<components.ThirdPartyAuth> {
    return unwrapAsync(authCreateThirdPartyAuth(
      this,
      request,
      options,
    ));
  }

  /**
   * [Alpha] Lists all third-party auth integrations
   */
  async listThirdPartyAuth(
    request: operations.ListTPAForProjectRequest,
    options?: RequestOptions,
  ): Promise<Array<components.ThirdPartyAuth>> {
    return unwrapAsync(authListThirdPartyAuth(
      this,
      request,
      options,
    ));
  }

  /**
   * [Alpha] Removes a third-party auth integration
   */
  async deleteThirdPartyAuth(
    request: operations.DeleteTPAForProjectRequest,
    options?: RequestOptions,
  ): Promise<components.ThirdPartyAuth> {
    return unwrapAsync(authDeleteThirdPartyAuth(
      this,
      request,
      options,
    ));
  }

  /**
   * [Alpha] Get a third-party integration
   */
  async getThirdPartyAuth(
    request: operations.GetTPAForProjectRequest,
    options?: RequestOptions,
  ): Promise<components.ThirdPartyAuth> {
    return unwrapAsync(authGetThirdPartyAuth(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates a new SSO provider
   */
  async createSsoProvider(
    request: operations.V1CreateASsoProviderRequest,
    options?: RequestOptions,
  ): Promise<components.CreateProviderResponse> {
    return unwrapAsync(authCreateSsoProvider(
      this,
      request,
      options,
    ));
  }

  /**
   * Lists all SSO providers
   */
  async listSsoProviders(
    request: operations.V1ListAllSsoProviderRequest,
    options?: RequestOptions,
  ): Promise<components.ListProvidersResponse> {
    return unwrapAsync(authListSsoProviders(
      this,
      request,
      options,
    ));
  }

  /**
   * Gets a SSO provider by its UUID
   */
  async getSsoProvider(
    request: operations.V1GetASsoProviderRequest,
    options?: RequestOptions,
  ): Promise<components.GetProviderResponse> {
    return unwrapAsync(authGetSsoProvider(
      this,
      request,
      options,
    ));
  }

  /**
   * Updates a SSO provider by its UUID
   */
  async updateSsoProvider(
    request: operations.V1UpdateASsoProviderRequest,
    options?: RequestOptions,
  ): Promise<components.UpdateProviderResponse> {
    return unwrapAsync(authUpdateSsoProvider(
      this,
      request,
      options,
    ));
  }

  /**
   * Removes a SSO provider by its UUID
   */
  async deleteSsoProvider(
    request: operations.V1DeleteASsoProviderRequest,
    options?: RequestOptions,
  ): Promise<components.DeleteProviderResponse> {
    return unwrapAsync(authDeleteSsoProvider(
      this,
      request,
      options,
    ));
  }
}
