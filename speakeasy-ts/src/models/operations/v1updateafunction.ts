/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1UpdateAFunctionRequest = {
  /**
   * Project ref
   */
  ref: string;
  /**
   * Function slug
   */
  slug: string;
  name?: string | undefined;
  verifyJwt?: boolean | undefined;
  importMap?: boolean | undefined;
  entrypointPath?: string | undefined;
  importMapPath?: string | undefined;
  computeMultiplier?: number | undefined;
  v1UpdateFunctionBody: components.V1UpdateFunctionBody;
};

/** @internal */
export const V1UpdateAFunctionRequest$inboundSchema: z.ZodType<
  V1UpdateAFunctionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ref: z.string(),
  slug: z.string(),
  name: z.string().optional(),
  verify_jwt: z.boolean().optional(),
  import_map: z.boolean().optional(),
  entrypoint_path: z.string().optional(),
  import_map_path: z.string().optional(),
  compute_multiplier: z.number().optional(),
  V1UpdateFunctionBody: components.V1UpdateFunctionBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "verify_jwt": "verifyJwt",
    "import_map": "importMap",
    "entrypoint_path": "entrypointPath",
    "import_map_path": "importMapPath",
    "compute_multiplier": "computeMultiplier",
    "V1UpdateFunctionBody": "v1UpdateFunctionBody",
  });
});

/** @internal */
export type V1UpdateAFunctionRequest$Outbound = {
  ref: string;
  slug: string;
  name?: string | undefined;
  verify_jwt?: boolean | undefined;
  import_map?: boolean | undefined;
  entrypoint_path?: string | undefined;
  import_map_path?: string | undefined;
  compute_multiplier?: number | undefined;
  V1UpdateFunctionBody: components.V1UpdateFunctionBody$Outbound;
};

/** @internal */
export const V1UpdateAFunctionRequest$outboundSchema: z.ZodType<
  V1UpdateAFunctionRequest$Outbound,
  z.ZodTypeDef,
  V1UpdateAFunctionRequest
> = z.object({
  ref: z.string(),
  slug: z.string(),
  name: z.string().optional(),
  verifyJwt: z.boolean().optional(),
  importMap: z.boolean().optional(),
  entrypointPath: z.string().optional(),
  importMapPath: z.string().optional(),
  computeMultiplier: z.number().optional(),
  v1UpdateFunctionBody: components.V1UpdateFunctionBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    verifyJwt: "verify_jwt",
    importMap: "import_map",
    entrypointPath: "entrypoint_path",
    importMapPath: "import_map_path",
    computeMultiplier: "compute_multiplier",
    v1UpdateFunctionBody: "V1UpdateFunctionBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1UpdateAFunctionRequest$ {
  /** @deprecated use `V1UpdateAFunctionRequest$inboundSchema` instead. */
  export const inboundSchema = V1UpdateAFunctionRequest$inboundSchema;
  /** @deprecated use `V1UpdateAFunctionRequest$outboundSchema` instead. */
  export const outboundSchema = V1UpdateAFunctionRequest$outboundSchema;
  /** @deprecated use `V1UpdateAFunctionRequest$Outbound` instead. */
  export type Outbound = V1UpdateAFunctionRequest$Outbound;
}

export function v1UpdateAFunctionRequestToJSON(
  v1UpdateAFunctionRequest: V1UpdateAFunctionRequest,
): string {
  return JSON.stringify(
    V1UpdateAFunctionRequest$outboundSchema.parse(v1UpdateAFunctionRequest),
  );
}

export function v1UpdateAFunctionRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1UpdateAFunctionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1UpdateAFunctionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1UpdateAFunctionRequest' from JSON`,
  );
}
