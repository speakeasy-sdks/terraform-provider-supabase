/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1CreateASsoProviderRequest = {
  /**
   * Project ref
   */
  ref: string;
  createProviderBody: components.CreateProviderBody;
};

/** @internal */
export const V1CreateASsoProviderRequest$inboundSchema: z.ZodType<
  V1CreateASsoProviderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ref: z.string(),
  CreateProviderBody: components.CreateProviderBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CreateProviderBody": "createProviderBody",
  });
});

/** @internal */
export type V1CreateASsoProviderRequest$Outbound = {
  ref: string;
  CreateProviderBody: components.CreateProviderBody$Outbound;
};

/** @internal */
export const V1CreateASsoProviderRequest$outboundSchema: z.ZodType<
  V1CreateASsoProviderRequest$Outbound,
  z.ZodTypeDef,
  V1CreateASsoProviderRequest
> = z.object({
  ref: z.string(),
  createProviderBody: components.CreateProviderBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createProviderBody: "CreateProviderBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1CreateASsoProviderRequest$ {
  /** @deprecated use `V1CreateASsoProviderRequest$inboundSchema` instead. */
  export const inboundSchema = V1CreateASsoProviderRequest$inboundSchema;
  /** @deprecated use `V1CreateASsoProviderRequest$outboundSchema` instead. */
  export const outboundSchema = V1CreateASsoProviderRequest$outboundSchema;
  /** @deprecated use `V1CreateASsoProviderRequest$Outbound` instead. */
  export type Outbound = V1CreateASsoProviderRequest$Outbound;
}

export function v1CreateASsoProviderRequestToJSON(
  v1CreateASsoProviderRequest: V1CreateASsoProviderRequest,
): string {
  return JSON.stringify(
    V1CreateASsoProviderRequest$outboundSchema.parse(
      v1CreateASsoProviderRequest,
    ),
  );
}

export function v1CreateASsoProviderRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1CreateASsoProviderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1CreateASsoProviderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1CreateASsoProviderRequest' from JSON`,
  );
}
