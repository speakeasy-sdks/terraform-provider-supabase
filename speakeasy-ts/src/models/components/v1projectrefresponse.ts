/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1ProjectRefResponse = {
  id: number;
  ref: string;
  name: string;
};

/** @internal */
export const V1ProjectRefResponse$inboundSchema: z.ZodType<
  V1ProjectRefResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  ref: z.string(),
  name: z.string(),
});

/** @internal */
export type V1ProjectRefResponse$Outbound = {
  id: number;
  ref: string;
  name: string;
};

/** @internal */
export const V1ProjectRefResponse$outboundSchema: z.ZodType<
  V1ProjectRefResponse$Outbound,
  z.ZodTypeDef,
  V1ProjectRefResponse
> = z.object({
  id: z.number().int(),
  ref: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1ProjectRefResponse$ {
  /** @deprecated use `V1ProjectRefResponse$inboundSchema` instead. */
  export const inboundSchema = V1ProjectRefResponse$inboundSchema;
  /** @deprecated use `V1ProjectRefResponse$outboundSchema` instead. */
  export const outboundSchema = V1ProjectRefResponse$outboundSchema;
  /** @deprecated use `V1ProjectRefResponse$Outbound` instead. */
  export type Outbound = V1ProjectRefResponse$Outbound;
}

export function v1ProjectRefResponseToJSON(
  v1ProjectRefResponse: V1ProjectRefResponse,
): string {
  return JSON.stringify(
    V1ProjectRefResponse$outboundSchema.parse(v1ProjectRefResponse),
  );
}

export function v1ProjectRefResponseFromJSON(
  jsonString: string,
): SafeParseResult<V1ProjectRefResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1ProjectRefResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1ProjectRefResponse' from JSON`,
  );
}
