/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1GetASsoProviderRequest = {
  /**
   * Project ref
   */
  ref: string;
  providerId: string;
};

/** @internal */
export const V1GetASsoProviderRequest$inboundSchema: z.ZodType<
  V1GetASsoProviderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ref: z.string(),
  provider_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "provider_id": "providerId",
  });
});

/** @internal */
export type V1GetASsoProviderRequest$Outbound = {
  ref: string;
  provider_id: string;
};

/** @internal */
export const V1GetASsoProviderRequest$outboundSchema: z.ZodType<
  V1GetASsoProviderRequest$Outbound,
  z.ZodTypeDef,
  V1GetASsoProviderRequest
> = z.object({
  ref: z.string(),
  providerId: z.string(),
}).transform((v) => {
  return remap$(v, {
    providerId: "provider_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1GetASsoProviderRequest$ {
  /** @deprecated use `V1GetASsoProviderRequest$inboundSchema` instead. */
  export const inboundSchema = V1GetASsoProviderRequest$inboundSchema;
  /** @deprecated use `V1GetASsoProviderRequest$outboundSchema` instead. */
  export const outboundSchema = V1GetASsoProviderRequest$outboundSchema;
  /** @deprecated use `V1GetASsoProviderRequest$Outbound` instead. */
  export type Outbound = V1GetASsoProviderRequest$Outbound;
}

export function v1GetASsoProviderRequestToJSON(
  v1GetASsoProviderRequest: V1GetASsoProviderRequest,
): string {
  return JSON.stringify(
    V1GetASsoProviderRequest$outboundSchema.parse(v1GetASsoProviderRequest),
  );
}

export function v1GetASsoProviderRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1GetASsoProviderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1GetASsoProviderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1GetASsoProviderRequest' from JSON`,
  );
}
