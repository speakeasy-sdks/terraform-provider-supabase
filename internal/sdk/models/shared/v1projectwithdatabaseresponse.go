// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type V1ProjectWithDatabaseResponseStatus string

const (
	V1ProjectWithDatabaseResponseStatusActiveHealthy   V1ProjectWithDatabaseResponseStatus = "ACTIVE_HEALTHY"
	V1ProjectWithDatabaseResponseStatusActiveUnhealthy V1ProjectWithDatabaseResponseStatus = "ACTIVE_UNHEALTHY"
	V1ProjectWithDatabaseResponseStatusComingUp        V1ProjectWithDatabaseResponseStatus = "COMING_UP"
	V1ProjectWithDatabaseResponseStatusGoingDown       V1ProjectWithDatabaseResponseStatus = "GOING_DOWN"
	V1ProjectWithDatabaseResponseStatusInactive        V1ProjectWithDatabaseResponseStatus = "INACTIVE"
	V1ProjectWithDatabaseResponseStatusInitFailed      V1ProjectWithDatabaseResponseStatus = "INIT_FAILED"
	V1ProjectWithDatabaseResponseStatusRemoved         V1ProjectWithDatabaseResponseStatus = "REMOVED"
	V1ProjectWithDatabaseResponseStatusRestarting      V1ProjectWithDatabaseResponseStatus = "RESTARTING"
	V1ProjectWithDatabaseResponseStatusUnknown         V1ProjectWithDatabaseResponseStatus = "UNKNOWN"
	V1ProjectWithDatabaseResponseStatusUpgrading       V1ProjectWithDatabaseResponseStatus = "UPGRADING"
	V1ProjectWithDatabaseResponseStatusPausing         V1ProjectWithDatabaseResponseStatus = "PAUSING"
	V1ProjectWithDatabaseResponseStatusRestoring       V1ProjectWithDatabaseResponseStatus = "RESTORING"
	V1ProjectWithDatabaseResponseStatusRestoreFailed   V1ProjectWithDatabaseResponseStatus = "RESTORE_FAILED"
	V1ProjectWithDatabaseResponseStatusPauseFailed     V1ProjectWithDatabaseResponseStatus = "PAUSE_FAILED"
	V1ProjectWithDatabaseResponseStatusResizing        V1ProjectWithDatabaseResponseStatus = "RESIZING"
)

func (e V1ProjectWithDatabaseResponseStatus) ToPointer() *V1ProjectWithDatabaseResponseStatus {
	return &e
}
func (e *V1ProjectWithDatabaseResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE_HEALTHY":
		fallthrough
	case "ACTIVE_UNHEALTHY":
		fallthrough
	case "COMING_UP":
		fallthrough
	case "GOING_DOWN":
		fallthrough
	case "INACTIVE":
		fallthrough
	case "INIT_FAILED":
		fallthrough
	case "REMOVED":
		fallthrough
	case "RESTARTING":
		fallthrough
	case "UNKNOWN":
		fallthrough
	case "UPGRADING":
		fallthrough
	case "PAUSING":
		fallthrough
	case "RESTORING":
		fallthrough
	case "RESTORE_FAILED":
		fallthrough
	case "PAUSE_FAILED":
		fallthrough
	case "RESIZING":
		*e = V1ProjectWithDatabaseResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V1ProjectWithDatabaseResponseStatus: %v", v)
	}
}

type V1ProjectWithDatabaseResponse struct {
	// Id of your project
	ID string `json:"id"`
	// Slug of your organization
	OrganizationID string `json:"organization_id"`
	// Name of your project
	Name string `json:"name"`
	// Region of your project
	Region string `json:"region"`
	// Creation timestamp
	CreatedAt string                              `json:"created_at"`
	Database  V1DatabaseResponse                  `json:"database"`
	Status    V1ProjectWithDatabaseResponseStatus `json:"status"`
}

func (o *V1ProjectWithDatabaseResponse) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *V1ProjectWithDatabaseResponse) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

func (o *V1ProjectWithDatabaseResponse) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *V1ProjectWithDatabaseResponse) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *V1ProjectWithDatabaseResponse) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *V1ProjectWithDatabaseResponse) GetDatabase() V1DatabaseResponse {
	if o == nil {
		return V1DatabaseResponse{}
	}
	return o.Database
}

func (o *V1ProjectWithDatabaseResponse) GetStatus() V1ProjectWithDatabaseResponseStatus {
	if o == nil {
		return V1ProjectWithDatabaseResponseStatus("")
	}
	return o.Status
}
