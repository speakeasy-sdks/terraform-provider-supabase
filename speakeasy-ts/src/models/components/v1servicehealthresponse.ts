/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AuthHealthResponse,
  AuthHealthResponse$inboundSchema,
  AuthHealthResponse$Outbound,
  AuthHealthResponse$outboundSchema,
} from "./authhealthresponse.js";
import {
  RealtimeHealthResponse,
  RealtimeHealthResponse$inboundSchema,
  RealtimeHealthResponse$Outbound,
  RealtimeHealthResponse$outboundSchema,
} from "./realtimehealthresponse.js";

export type Info = AuthHealthResponse | RealtimeHealthResponse;

export const V1ServiceHealthResponseName = {
  Auth: "auth",
  Db: "db",
  Pooler: "pooler",
  Realtime: "realtime",
  Rest: "rest",
  Storage: "storage",
} as const;
export type V1ServiceHealthResponseName = ClosedEnum<
  typeof V1ServiceHealthResponseName
>;

export const V1ServiceHealthResponseStatus = {
  ComingUp: "COMING_UP",
  ActiveHealthy: "ACTIVE_HEALTHY",
  Unhealthy: "UNHEALTHY",
} as const;
export type V1ServiceHealthResponseStatus = ClosedEnum<
  typeof V1ServiceHealthResponseStatus
>;

export type V1ServiceHealthResponse = {
  info?: AuthHealthResponse | RealtimeHealthResponse | undefined;
  name: V1ServiceHealthResponseName;
  healthy: boolean;
  status: V1ServiceHealthResponseStatus;
  error?: string | undefined;
};

/** @internal */
export const Info$inboundSchema: z.ZodType<Info, z.ZodTypeDef, unknown> = z
  .union([
    AuthHealthResponse$inboundSchema,
    RealtimeHealthResponse$inboundSchema,
  ]);

/** @internal */
export type Info$Outbound =
  | AuthHealthResponse$Outbound
  | RealtimeHealthResponse$Outbound;

/** @internal */
export const Info$outboundSchema: z.ZodType<Info$Outbound, z.ZodTypeDef, Info> =
  z.union([
    AuthHealthResponse$outboundSchema,
    RealtimeHealthResponse$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Info$ {
  /** @deprecated use `Info$inboundSchema` instead. */
  export const inboundSchema = Info$inboundSchema;
  /** @deprecated use `Info$outboundSchema` instead. */
  export const outboundSchema = Info$outboundSchema;
  /** @deprecated use `Info$Outbound` instead. */
  export type Outbound = Info$Outbound;
}

export function infoToJSON(info: Info): string {
  return JSON.stringify(Info$outboundSchema.parse(info));
}

export function infoFromJSON(
  jsonString: string,
): SafeParseResult<Info, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Info$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Info' from JSON`,
  );
}

/** @internal */
export const V1ServiceHealthResponseName$inboundSchema: z.ZodNativeEnum<
  typeof V1ServiceHealthResponseName
> = z.nativeEnum(V1ServiceHealthResponseName);

/** @internal */
export const V1ServiceHealthResponseName$outboundSchema: z.ZodNativeEnum<
  typeof V1ServiceHealthResponseName
> = V1ServiceHealthResponseName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1ServiceHealthResponseName$ {
  /** @deprecated use `V1ServiceHealthResponseName$inboundSchema` instead. */
  export const inboundSchema = V1ServiceHealthResponseName$inboundSchema;
  /** @deprecated use `V1ServiceHealthResponseName$outboundSchema` instead. */
  export const outboundSchema = V1ServiceHealthResponseName$outboundSchema;
}

/** @internal */
export const V1ServiceHealthResponseStatus$inboundSchema: z.ZodNativeEnum<
  typeof V1ServiceHealthResponseStatus
> = z.nativeEnum(V1ServiceHealthResponseStatus);

/** @internal */
export const V1ServiceHealthResponseStatus$outboundSchema: z.ZodNativeEnum<
  typeof V1ServiceHealthResponseStatus
> = V1ServiceHealthResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1ServiceHealthResponseStatus$ {
  /** @deprecated use `V1ServiceHealthResponseStatus$inboundSchema` instead. */
  export const inboundSchema = V1ServiceHealthResponseStatus$inboundSchema;
  /** @deprecated use `V1ServiceHealthResponseStatus$outboundSchema` instead. */
  export const outboundSchema = V1ServiceHealthResponseStatus$outboundSchema;
}

/** @internal */
export const V1ServiceHealthResponse$inboundSchema: z.ZodType<
  V1ServiceHealthResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  info: z.union([
    AuthHealthResponse$inboundSchema,
    RealtimeHealthResponse$inboundSchema,
  ]).optional(),
  name: V1ServiceHealthResponseName$inboundSchema,
  healthy: z.boolean(),
  status: V1ServiceHealthResponseStatus$inboundSchema,
  error: z.string().optional(),
});

/** @internal */
export type V1ServiceHealthResponse$Outbound = {
  info?:
    | AuthHealthResponse$Outbound
    | RealtimeHealthResponse$Outbound
    | undefined;
  name: string;
  healthy: boolean;
  status: string;
  error?: string | undefined;
};

/** @internal */
export const V1ServiceHealthResponse$outboundSchema: z.ZodType<
  V1ServiceHealthResponse$Outbound,
  z.ZodTypeDef,
  V1ServiceHealthResponse
> = z.object({
  info: z.union([
    AuthHealthResponse$outboundSchema,
    RealtimeHealthResponse$outboundSchema,
  ]).optional(),
  name: V1ServiceHealthResponseName$outboundSchema,
  healthy: z.boolean(),
  status: V1ServiceHealthResponseStatus$outboundSchema,
  error: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1ServiceHealthResponse$ {
  /** @deprecated use `V1ServiceHealthResponse$inboundSchema` instead. */
  export const inboundSchema = V1ServiceHealthResponse$inboundSchema;
  /** @deprecated use `V1ServiceHealthResponse$outboundSchema` instead. */
  export const outboundSchema = V1ServiceHealthResponse$outboundSchema;
  /** @deprecated use `V1ServiceHealthResponse$Outbound` instead. */
  export type Outbound = V1ServiceHealthResponse$Outbound;
}

export function v1ServiceHealthResponseToJSON(
  v1ServiceHealthResponse: V1ServiceHealthResponse,
): string {
  return JSON.stringify(
    V1ServiceHealthResponse$outboundSchema.parse(v1ServiceHealthResponse),
  );
}

export function v1ServiceHealthResponseFromJSON(
  jsonString: string,
): SafeParseResult<V1ServiceHealthResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1ServiceHealthResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1ServiceHealthResponse' from JSON`,
  );
}
