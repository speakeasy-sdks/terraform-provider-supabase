/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SecretResponse = {
  name: string;
  value: string;
};

/** @internal */
export const SecretResponse$inboundSchema: z.ZodType<
  SecretResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
});

/** @internal */
export type SecretResponse$Outbound = {
  name: string;
  value: string;
};

/** @internal */
export const SecretResponse$outboundSchema: z.ZodType<
  SecretResponse$Outbound,
  z.ZodTypeDef,
  SecretResponse
> = z.object({
  name: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SecretResponse$ {
  /** @deprecated use `SecretResponse$inboundSchema` instead. */
  export const inboundSchema = SecretResponse$inboundSchema;
  /** @deprecated use `SecretResponse$outboundSchema` instead. */
  export const outboundSchema = SecretResponse$outboundSchema;
  /** @deprecated use `SecretResponse$Outbound` instead. */
  export type Outbound = SecretResponse$Outbound;
}

export function secretResponseToJSON(secretResponse: SecretResponse): string {
  return JSON.stringify(SecretResponse$outboundSchema.parse(secretResponse));
}

export function secretResponseFromJSON(
  jsonString: string,
): SafeParseResult<SecretResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SecretResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SecretResponse' from JSON`,
  );
}
