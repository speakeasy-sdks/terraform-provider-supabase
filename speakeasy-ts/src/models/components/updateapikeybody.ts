/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateApiKeyBodySecretJwtTemplate = {
  role: string;
};

export type UpdateApiKeyBody = {
  description?: string | null | undefined;
  secretJwtTemplate?: UpdateApiKeyBodySecretJwtTemplate | null | undefined;
};

/** @internal */
export const UpdateApiKeyBodySecretJwtTemplate$inboundSchema: z.ZodType<
  UpdateApiKeyBodySecretJwtTemplate,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: z.string(),
});

/** @internal */
export type UpdateApiKeyBodySecretJwtTemplate$Outbound = {
  role: string;
};

/** @internal */
export const UpdateApiKeyBodySecretJwtTemplate$outboundSchema: z.ZodType<
  UpdateApiKeyBodySecretJwtTemplate$Outbound,
  z.ZodTypeDef,
  UpdateApiKeyBodySecretJwtTemplate
> = z.object({
  role: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateApiKeyBodySecretJwtTemplate$ {
  /** @deprecated use `UpdateApiKeyBodySecretJwtTemplate$inboundSchema` instead. */
  export const inboundSchema = UpdateApiKeyBodySecretJwtTemplate$inboundSchema;
  /** @deprecated use `UpdateApiKeyBodySecretJwtTemplate$outboundSchema` instead. */
  export const outboundSchema =
    UpdateApiKeyBodySecretJwtTemplate$outboundSchema;
  /** @deprecated use `UpdateApiKeyBodySecretJwtTemplate$Outbound` instead. */
  export type Outbound = UpdateApiKeyBodySecretJwtTemplate$Outbound;
}

export function updateApiKeyBodySecretJwtTemplateToJSON(
  updateApiKeyBodySecretJwtTemplate: UpdateApiKeyBodySecretJwtTemplate,
): string {
  return JSON.stringify(
    UpdateApiKeyBodySecretJwtTemplate$outboundSchema.parse(
      updateApiKeyBodySecretJwtTemplate,
    ),
  );
}

export function updateApiKeyBodySecretJwtTemplateFromJSON(
  jsonString: string,
): SafeParseResult<UpdateApiKeyBodySecretJwtTemplate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateApiKeyBodySecretJwtTemplate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateApiKeyBodySecretJwtTemplate' from JSON`,
  );
}

/** @internal */
export const UpdateApiKeyBody$inboundSchema: z.ZodType<
  UpdateApiKeyBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.nullable(z.string()).optional(),
  secret_jwt_template: z.nullable(
    z.lazy(() => UpdateApiKeyBodySecretJwtTemplate$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "secret_jwt_template": "secretJwtTemplate",
  });
});

/** @internal */
export type UpdateApiKeyBody$Outbound = {
  description?: string | null | undefined;
  secret_jwt_template?:
    | UpdateApiKeyBodySecretJwtTemplate$Outbound
    | null
    | undefined;
};

/** @internal */
export const UpdateApiKeyBody$outboundSchema: z.ZodType<
  UpdateApiKeyBody$Outbound,
  z.ZodTypeDef,
  UpdateApiKeyBody
> = z.object({
  description: z.nullable(z.string()).optional(),
  secretJwtTemplate: z.nullable(
    z.lazy(() => UpdateApiKeyBodySecretJwtTemplate$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    secretJwtTemplate: "secret_jwt_template",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateApiKeyBody$ {
  /** @deprecated use `UpdateApiKeyBody$inboundSchema` instead. */
  export const inboundSchema = UpdateApiKeyBody$inboundSchema;
  /** @deprecated use `UpdateApiKeyBody$outboundSchema` instead. */
  export const outboundSchema = UpdateApiKeyBody$outboundSchema;
  /** @deprecated use `UpdateApiKeyBody$Outbound` instead. */
  export type Outbound = UpdateApiKeyBody$Outbound;
}

export function updateApiKeyBodyToJSON(
  updateApiKeyBody: UpdateApiKeyBody,
): string {
  return JSON.stringify(
    UpdateApiKeyBody$outboundSchema.parse(updateApiKeyBody),
  );
}

export function updateApiKeyBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateApiKeyBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateApiKeyBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateApiKeyBody' from JSON`,
  );
}
