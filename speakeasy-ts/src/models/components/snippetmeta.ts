/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SnippetProject,
  SnippetProject$inboundSchema,
  SnippetProject$Outbound,
  SnippetProject$outboundSchema,
} from "./snippetproject.js";
import {
  SnippetUser,
  SnippetUser$inboundSchema,
  SnippetUser$Outbound,
  SnippetUser$outboundSchema,
} from "./snippetuser.js";

export const Type = {
  Sql: "sql",
} as const;
export type Type = ClosedEnum<typeof Type>;

export const Visibility = {
  User: "user",
  Project: "project",
  Org: "org",
  Public: "public",
} as const;
export type Visibility = ClosedEnum<typeof Visibility>;

export type SnippetMeta = {
  id: string;
  insertedAt: string;
  updatedAt: string;
  type: Type;
  visibility: Visibility;
  name: string;
  description?: string | undefined;
  project: SnippetProject;
  owner: SnippetUser;
  updatedBy: SnippetUser;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const Visibility$inboundSchema: z.ZodNativeEnum<typeof Visibility> = z
  .nativeEnum(Visibility);

/** @internal */
export const Visibility$outboundSchema: z.ZodNativeEnum<typeof Visibility> =
  Visibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Visibility$ {
  /** @deprecated use `Visibility$inboundSchema` instead. */
  export const inboundSchema = Visibility$inboundSchema;
  /** @deprecated use `Visibility$outboundSchema` instead. */
  export const outboundSchema = Visibility$outboundSchema;
}

/** @internal */
export const SnippetMeta$inboundSchema: z.ZodType<
  SnippetMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  inserted_at: z.string(),
  updated_at: z.string(),
  type: Type$inboundSchema,
  visibility: Visibility$inboundSchema,
  name: z.string(),
  description: z.string().optional(),
  project: SnippetProject$inboundSchema,
  owner: SnippetUser$inboundSchema,
  updated_by: SnippetUser$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "inserted_at": "insertedAt",
    "updated_at": "updatedAt",
    "updated_by": "updatedBy",
  });
});

/** @internal */
export type SnippetMeta$Outbound = {
  id: string;
  inserted_at: string;
  updated_at: string;
  type: string;
  visibility: string;
  name: string;
  description?: string | undefined;
  project: SnippetProject$Outbound;
  owner: SnippetUser$Outbound;
  updated_by: SnippetUser$Outbound;
};

/** @internal */
export const SnippetMeta$outboundSchema: z.ZodType<
  SnippetMeta$Outbound,
  z.ZodTypeDef,
  SnippetMeta
> = z.object({
  id: z.string(),
  insertedAt: z.string(),
  updatedAt: z.string(),
  type: Type$outboundSchema,
  visibility: Visibility$outboundSchema,
  name: z.string(),
  description: z.string().optional(),
  project: SnippetProject$outboundSchema,
  owner: SnippetUser$outboundSchema,
  updatedBy: SnippetUser$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    insertedAt: "inserted_at",
    updatedAt: "updated_at",
    updatedBy: "updated_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SnippetMeta$ {
  /** @deprecated use `SnippetMeta$inboundSchema` instead. */
  export const inboundSchema = SnippetMeta$inboundSchema;
  /** @deprecated use `SnippetMeta$outboundSchema` instead. */
  export const outboundSchema = SnippetMeta$outboundSchema;
  /** @deprecated use `SnippetMeta$Outbound` instead. */
  export type Outbound = SnippetMeta$Outbound;
}

export function snippetMetaToJSON(snippetMeta: SnippetMeta): string {
  return JSON.stringify(SnippetMeta$outboundSchema.parse(snippetMeta));
}

export function snippetMetaFromJSON(
  jsonString: string,
): SafeParseResult<SnippetMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SnippetMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SnippetMeta' from JSON`,
  );
}
