/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type One = {};

export type Default = One | number | string | boolean;

export type AttributeValue = {
  default?: One | number | string | boolean | undefined;
  name?: string | undefined;
  names?: Array<string> | undefined;
  array?: boolean | undefined;
};

/** @internal */
export const One$inboundSchema: z.ZodType<One, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type One$Outbound = {};

/** @internal */
export const One$outboundSchema: z.ZodType<One$Outbound, z.ZodTypeDef, One> = z
  .object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One$ {
  /** @deprecated use `One$inboundSchema` instead. */
  export const inboundSchema = One$inboundSchema;
  /** @deprecated use `One$outboundSchema` instead. */
  export const outboundSchema = One$outboundSchema;
  /** @deprecated use `One$Outbound` instead. */
  export type Outbound = One$Outbound;
}

export function oneToJSON(one: One): string {
  return JSON.stringify(One$outboundSchema.parse(one));
}

export function oneFromJSON(
  jsonString: string,
): SafeParseResult<One, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => One$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'One' from JSON`,
  );
}

/** @internal */
export const Default$inboundSchema: z.ZodType<Default, z.ZodTypeDef, unknown> =
  z.union([
    z.lazy(() => One$inboundSchema),
    z.number(),
    z.string(),
    z.boolean(),
  ]);

/** @internal */
export type Default$Outbound = One$Outbound | number | string | boolean;

/** @internal */
export const Default$outboundSchema: z.ZodType<
  Default$Outbound,
  z.ZodTypeDef,
  Default
> = z.union([
  z.lazy(() => One$outboundSchema),
  z.number(),
  z.string(),
  z.boolean(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Default$ {
  /** @deprecated use `Default$inboundSchema` instead. */
  export const inboundSchema = Default$inboundSchema;
  /** @deprecated use `Default$outboundSchema` instead. */
  export const outboundSchema = Default$outboundSchema;
  /** @deprecated use `Default$Outbound` instead. */
  export type Outbound = Default$Outbound;
}

export function defaultToJSON(value: Default): string {
  return JSON.stringify(Default$outboundSchema.parse(value));
}

export function defaultFromJSON(
  jsonString: string,
): SafeParseResult<Default, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Default$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Default' from JSON`,
  );
}

/** @internal */
export const AttributeValue$inboundSchema: z.ZodType<
  AttributeValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  default: z.union([
    z.lazy(() => One$inboundSchema),
    z.number(),
    z.string(),
    z.boolean(),
  ]).optional(),
  name: z.string().optional(),
  names: z.array(z.string()).optional(),
  array: z.boolean().optional(),
});

/** @internal */
export type AttributeValue$Outbound = {
  default?: One$Outbound | number | string | boolean | undefined;
  name?: string | undefined;
  names?: Array<string> | undefined;
  array?: boolean | undefined;
};

/** @internal */
export const AttributeValue$outboundSchema: z.ZodType<
  AttributeValue$Outbound,
  z.ZodTypeDef,
  AttributeValue
> = z.object({
  default: z.union([
    z.lazy(() => One$outboundSchema),
    z.number(),
    z.string(),
    z.boolean(),
  ]).optional(),
  name: z.string().optional(),
  names: z.array(z.string()).optional(),
  array: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttributeValue$ {
  /** @deprecated use `AttributeValue$inboundSchema` instead. */
  export const inboundSchema = AttributeValue$inboundSchema;
  /** @deprecated use `AttributeValue$outboundSchema` instead. */
  export const outboundSchema = AttributeValue$outboundSchema;
  /** @deprecated use `AttributeValue$Outbound` instead. */
  export type Outbound = AttributeValue$Outbound;
}

export function attributeValueToJSON(attributeValue: AttributeValue): string {
  return JSON.stringify(AttributeValue$outboundSchema.parse(attributeValue));
}

export function attributeValueFromJSON(
  jsonString: string,
): SafeParseResult<AttributeValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttributeValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttributeValue' from JSON`,
  );
}
