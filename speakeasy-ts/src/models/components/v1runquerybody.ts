/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1RunQueryBody = {
  query: string;
};

/** @internal */
export const V1RunQueryBody$inboundSchema: z.ZodType<
  V1RunQueryBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string(),
});

/** @internal */
export type V1RunQueryBody$Outbound = {
  query: string;
};

/** @internal */
export const V1RunQueryBody$outboundSchema: z.ZodType<
  V1RunQueryBody$Outbound,
  z.ZodTypeDef,
  V1RunQueryBody
> = z.object({
  query: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1RunQueryBody$ {
  /** @deprecated use `V1RunQueryBody$inboundSchema` instead. */
  export const inboundSchema = V1RunQueryBody$inboundSchema;
  /** @deprecated use `V1RunQueryBody$outboundSchema` instead. */
  export const outboundSchema = V1RunQueryBody$outboundSchema;
  /** @deprecated use `V1RunQueryBody$Outbound` instead. */
  export type Outbound = V1RunQueryBody$Outbound;
}

export function v1RunQueryBodyToJSON(v1RunQueryBody: V1RunQueryBody): string {
  return JSON.stringify(V1RunQueryBody$outboundSchema.parse(v1RunQueryBody));
}

export function v1RunQueryBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1RunQueryBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1RunQueryBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1RunQueryBody' from JSON`,
  );
}
