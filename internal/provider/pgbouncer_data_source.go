// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/speakeasy/terraform-provider-supabase/internal/sdk"
	"github.com/speakeasy/terraform-provider-supabase/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &PgbouncerDataSource{}
var _ datasource.DataSourceWithConfigure = &PgbouncerDataSource{}

func NewPgbouncerDataSource() datasource.DataSource {
	return &PgbouncerDataSource{}
}

// PgbouncerDataSource is the data source implementation.
type PgbouncerDataSource struct {
	client *sdk.Supabase
}

// PgbouncerDataSourceModel describes the data model.
type PgbouncerDataSourceModel struct {
	ConnectionString        types.String `tfsdk:"connection_string"`
	DefaultPoolSize         types.Number `tfsdk:"default_pool_size"`
	IgnoreStartupParameters types.String `tfsdk:"ignore_startup_parameters"`
	MaxClientConn           types.Number `tfsdk:"max_client_conn"`
	PoolMode                types.String `tfsdk:"pool_mode"`
	Ref                     types.String `tfsdk:"ref"`
}

// Metadata returns the data source type name.
func (r *PgbouncerDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_pgbouncer"
}

// Schema defines the schema for the data source.
func (r *PgbouncerDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Pgbouncer DataSource",

		Attributes: map[string]schema.Attribute{
			"connection_string": schema.StringAttribute{
				Computed: true,
			},
			"default_pool_size": schema.NumberAttribute{
				Computed: true,
			},
			"ignore_startup_parameters": schema.StringAttribute{
				Computed: true,
			},
			"max_client_conn": schema.NumberAttribute{
				Computed: true,
			},
			"pool_mode": schema.StringAttribute{
				Computed: true,
			},
			"ref": schema.StringAttribute{
				Required:    true,
				Description: `Project ref`,
			},
		},
	}
}

func (r *PgbouncerDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Supabase)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Supabase, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *PgbouncerDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *PgbouncerDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var ref string
	ref = data.Ref.ValueString()

	request := operations.V1GetProjectPgbouncerConfigRequest{
		Ref: ref,
	}
	res, err := r.client.Database.V1GetProjectPgbouncerConfig(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.V1PgbouncerConfigResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedV1PgbouncerConfigResponse(res.V1PgbouncerConfigResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
