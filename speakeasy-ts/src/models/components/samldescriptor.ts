/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AttributeMapping,
  AttributeMapping$inboundSchema,
  AttributeMapping$Outbound,
  AttributeMapping$outboundSchema,
} from "./attributemapping.js";

export type SamlDescriptor = {
  id: string;
  entityId: string;
  metadataUrl?: string | undefined;
  metadataXml?: string | undefined;
  attributeMapping?: AttributeMapping | undefined;
};

/** @internal */
export const SamlDescriptor$inboundSchema: z.ZodType<
  SamlDescriptor,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  entity_id: z.string(),
  metadata_url: z.string().optional(),
  metadata_xml: z.string().optional(),
  attribute_mapping: AttributeMapping$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "entity_id": "entityId",
    "metadata_url": "metadataUrl",
    "metadata_xml": "metadataXml",
    "attribute_mapping": "attributeMapping",
  });
});

/** @internal */
export type SamlDescriptor$Outbound = {
  id: string;
  entity_id: string;
  metadata_url?: string | undefined;
  metadata_xml?: string | undefined;
  attribute_mapping?: AttributeMapping$Outbound | undefined;
};

/** @internal */
export const SamlDescriptor$outboundSchema: z.ZodType<
  SamlDescriptor$Outbound,
  z.ZodTypeDef,
  SamlDescriptor
> = z.object({
  id: z.string(),
  entityId: z.string(),
  metadataUrl: z.string().optional(),
  metadataXml: z.string().optional(),
  attributeMapping: AttributeMapping$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    entityId: "entity_id",
    metadataUrl: "metadata_url",
    metadataXml: "metadata_xml",
    attributeMapping: "attribute_mapping",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SamlDescriptor$ {
  /** @deprecated use `SamlDescriptor$inboundSchema` instead. */
  export const inboundSchema = SamlDescriptor$inboundSchema;
  /** @deprecated use `SamlDescriptor$outboundSchema` instead. */
  export const outboundSchema = SamlDescriptor$outboundSchema;
  /** @deprecated use `SamlDescriptor$Outbound` instead. */
  export type Outbound = SamlDescriptor$Outbound;
}

export function samlDescriptorToJSON(samlDescriptor: SamlDescriptor): string {
  return JSON.stringify(SamlDescriptor$outboundSchema.parse(samlDescriptor));
}

export function samlDescriptorFromJSON(
  jsonString: string,
): SafeParseResult<SamlDescriptor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SamlDescriptor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SamlDescriptor' from JSON`,
  );
}
