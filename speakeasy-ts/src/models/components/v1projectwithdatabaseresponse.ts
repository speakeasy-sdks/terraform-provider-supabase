/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V1DatabaseResponse,
  V1DatabaseResponse$inboundSchema,
  V1DatabaseResponse$Outbound,
  V1DatabaseResponse$outboundSchema,
} from "./v1databaseresponse.js";

export const V1ProjectWithDatabaseResponseStatus = {
  ActiveHealthy: "ACTIVE_HEALTHY",
  ActiveUnhealthy: "ACTIVE_UNHEALTHY",
  ComingUp: "COMING_UP",
  GoingDown: "GOING_DOWN",
  Inactive: "INACTIVE",
  InitFailed: "INIT_FAILED",
  Removed: "REMOVED",
  Restarting: "RESTARTING",
  Unknown: "UNKNOWN",
  Upgrading: "UPGRADING",
  Pausing: "PAUSING",
  Restoring: "RESTORING",
  RestoreFailed: "RESTORE_FAILED",
  PauseFailed: "PAUSE_FAILED",
  Resizing: "RESIZING",
} as const;
export type V1ProjectWithDatabaseResponseStatus = ClosedEnum<
  typeof V1ProjectWithDatabaseResponseStatus
>;

export type V1ProjectWithDatabaseResponse = {
  /**
   * Id of your project
   */
  id: string;
  /**
   * Slug of your organization
   */
  organizationId: string;
  /**
   * Name of your project
   */
  name: string;
  /**
   * Region of your project
   */
  region: string;
  /**
   * Creation timestamp
   */
  createdAt: string;
  database: V1DatabaseResponse;
  status: V1ProjectWithDatabaseResponseStatus;
};

/** @internal */
export const V1ProjectWithDatabaseResponseStatus$inboundSchema: z.ZodNativeEnum<
  typeof V1ProjectWithDatabaseResponseStatus
> = z.nativeEnum(V1ProjectWithDatabaseResponseStatus);

/** @internal */
export const V1ProjectWithDatabaseResponseStatus$outboundSchema:
  z.ZodNativeEnum<typeof V1ProjectWithDatabaseResponseStatus> =
    V1ProjectWithDatabaseResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1ProjectWithDatabaseResponseStatus$ {
  /** @deprecated use `V1ProjectWithDatabaseResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    V1ProjectWithDatabaseResponseStatus$inboundSchema;
  /** @deprecated use `V1ProjectWithDatabaseResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    V1ProjectWithDatabaseResponseStatus$outboundSchema;
}

/** @internal */
export const V1ProjectWithDatabaseResponse$inboundSchema: z.ZodType<
  V1ProjectWithDatabaseResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  organization_id: z.string(),
  name: z.string(),
  region: z.string(),
  created_at: z.string(),
  database: V1DatabaseResponse$inboundSchema,
  status: V1ProjectWithDatabaseResponseStatus$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "created_at": "createdAt",
  });
});

/** @internal */
export type V1ProjectWithDatabaseResponse$Outbound = {
  id: string;
  organization_id: string;
  name: string;
  region: string;
  created_at: string;
  database: V1DatabaseResponse$Outbound;
  status: string;
};

/** @internal */
export const V1ProjectWithDatabaseResponse$outboundSchema: z.ZodType<
  V1ProjectWithDatabaseResponse$Outbound,
  z.ZodTypeDef,
  V1ProjectWithDatabaseResponse
> = z.object({
  id: z.string(),
  organizationId: z.string(),
  name: z.string(),
  region: z.string(),
  createdAt: z.string(),
  database: V1DatabaseResponse$outboundSchema,
  status: V1ProjectWithDatabaseResponseStatus$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1ProjectWithDatabaseResponse$ {
  /** @deprecated use `V1ProjectWithDatabaseResponse$inboundSchema` instead. */
  export const inboundSchema = V1ProjectWithDatabaseResponse$inboundSchema;
  /** @deprecated use `V1ProjectWithDatabaseResponse$outboundSchema` instead. */
  export const outboundSchema = V1ProjectWithDatabaseResponse$outboundSchema;
  /** @deprecated use `V1ProjectWithDatabaseResponse$Outbound` instead. */
  export type Outbound = V1ProjectWithDatabaseResponse$Outbound;
}

export function v1ProjectWithDatabaseResponseToJSON(
  v1ProjectWithDatabaseResponse: V1ProjectWithDatabaseResponse,
): string {
  return JSON.stringify(
    V1ProjectWithDatabaseResponse$outboundSchema.parse(
      v1ProjectWithDatabaseResponse,
    ),
  );
}

export function v1ProjectWithDatabaseResponseFromJSON(
  jsonString: string,
): SafeParseResult<V1ProjectWithDatabaseResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1ProjectWithDatabaseResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1ProjectWithDatabaseResponse' from JSON`,
  );
}
