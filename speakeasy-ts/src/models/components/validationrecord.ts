/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ValidationRecord = {
  txtName: string;
  txtValue: string;
};

/** @internal */
export const ValidationRecord$inboundSchema: z.ZodType<
  ValidationRecord,
  z.ZodTypeDef,
  unknown
> = z.object({
  txt_name: z.string(),
  txt_value: z.string(),
}).transform((v) => {
  return remap$(v, {
    "txt_name": "txtName",
    "txt_value": "txtValue",
  });
});

/** @internal */
export type ValidationRecord$Outbound = {
  txt_name: string;
  txt_value: string;
};

/** @internal */
export const ValidationRecord$outboundSchema: z.ZodType<
  ValidationRecord$Outbound,
  z.ZodTypeDef,
  ValidationRecord
> = z.object({
  txtName: z.string(),
  txtValue: z.string(),
}).transform((v) => {
  return remap$(v, {
    txtName: "txt_name",
    txtValue: "txt_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidationRecord$ {
  /** @deprecated use `ValidationRecord$inboundSchema` instead. */
  export const inboundSchema = ValidationRecord$inboundSchema;
  /** @deprecated use `ValidationRecord$outboundSchema` instead. */
  export const outboundSchema = ValidationRecord$outboundSchema;
  /** @deprecated use `ValidationRecord$Outbound` instead. */
  export type Outbound = ValidationRecord$Outbound;
}

export function validationRecordToJSON(
  validationRecord: ValidationRecord,
): string {
  return JSON.stringify(
    ValidationRecord$outboundSchema.parse(validationRecord),
  );
}

export function validationRecordFromJSON(
  jsonString: string,
): SafeParseResult<ValidationRecord, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValidationRecord$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValidationRecord' from JSON`,
  );
}
