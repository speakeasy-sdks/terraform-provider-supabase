/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1CreateABranchRequest = {
  /**
   * Project ref
   */
  ref: string;
  createBranchBody: components.CreateBranchBody;
};

/** @internal */
export const V1CreateABranchRequest$inboundSchema: z.ZodType<
  V1CreateABranchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ref: z.string(),
  CreateBranchBody: components.CreateBranchBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CreateBranchBody": "createBranchBody",
  });
});

/** @internal */
export type V1CreateABranchRequest$Outbound = {
  ref: string;
  CreateBranchBody: components.CreateBranchBody$Outbound;
};

/** @internal */
export const V1CreateABranchRequest$outboundSchema: z.ZodType<
  V1CreateABranchRequest$Outbound,
  z.ZodTypeDef,
  V1CreateABranchRequest
> = z.object({
  ref: z.string(),
  createBranchBody: components.CreateBranchBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createBranchBody: "CreateBranchBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1CreateABranchRequest$ {
  /** @deprecated use `V1CreateABranchRequest$inboundSchema` instead. */
  export const inboundSchema = V1CreateABranchRequest$inboundSchema;
  /** @deprecated use `V1CreateABranchRequest$outboundSchema` instead. */
  export const outboundSchema = V1CreateABranchRequest$outboundSchema;
  /** @deprecated use `V1CreateABranchRequest$Outbound` instead. */
  export type Outbound = V1CreateABranchRequest$Outbound;
}

export function v1CreateABranchRequestToJSON(
  v1CreateABranchRequest: V1CreateABranchRequest,
): string {
  return JSON.stringify(
    V1CreateABranchRequest$outboundSchema.parse(v1CreateABranchRequest),
  );
}

export function v1CreateABranchRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1CreateABranchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1CreateABranchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1CreateABranchRequest' from JSON`,
  );
}
