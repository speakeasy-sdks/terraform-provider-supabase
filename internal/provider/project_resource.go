// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/speakeasy/terraform-provider-supabase/internal/provider/types"
	"github.com/speakeasy/terraform-provider-supabase/internal/sdk"
	"github.com/speakeasy/terraform-provider-supabase/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &ProjectResource{}
var _ resource.ResourceWithImportState = &ProjectResource{}

func NewProjectResource() resource.Resource {
	return &ProjectResource{}
}

// ProjectResource defines the resource implementation.
type ProjectResource struct {
	client *sdk.Supabase
}

// ProjectResourceModel describes the resource data model.
type ProjectResourceModel struct {
	CreatedAt           types.String               `tfsdk:"created_at"`
	Database            tfTypes.V1DatabaseResponse `tfsdk:"database"`
	DbPass              types.String               `tfsdk:"db_pass"`
	DesiredInstanceSize types.String               `tfsdk:"desired_instance_size"`
	ID                  types.String               `tfsdk:"id"`
	Name                types.String               `tfsdk:"name"`
	OrganizationID      types.String               `tfsdk:"organization_id"`
	PostgresEngine      types.String               `tfsdk:"postgres_engine"`
	Ref                 types.String               `tfsdk:"ref"`
	Region              types.String               `tfsdk:"region"`
	ReleaseChannel      types.String               `tfsdk:"release_channel"`
	Status              types.String               `tfsdk:"status"`
	TemplateURL         types.String               `tfsdk:"template_url"`
}

func (r *ProjectResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_project"
}

func (r *ProjectResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Project Resource",
		Attributes: map[string]schema.Attribute{
			"created_at": schema.StringAttribute{
				Computed:    true,
				Description: `Creation timestamp`,
			},
			"database": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"host": schema.StringAttribute{
						Computed:    true,
						Description: `Database host`,
					},
					"postgres_engine": schema.StringAttribute{
						Computed:    true,
						Description: `Database engine`,
					},
					"release_channel": schema.StringAttribute{
						Computed:    true,
						Description: `Release channel`,
					},
					"version": schema.StringAttribute{
						Computed:    true,
						Description: `Database version`,
					},
				},
			},
			"db_pass": schema.StringAttribute{
				Required:    true,
				Sensitive:   true,
				Description: `Database password`,
			},
			"desired_instance_size": schema.StringAttribute{
				Optional:    true,
				Description: `must be one of ["micro", "small", "medium", "large", "xlarge", "2xlarge", "4xlarge", "8xlarge", "12xlarge", "16xlarge"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"micro",
						"small",
						"medium",
						"large",
						"xlarge",
						"2xlarge",
						"4xlarge",
						"8xlarge",
						"12xlarge",
						"16xlarge",
					),
				},
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `Id of your project`,
			},
			"name": schema.StringAttribute{
				Required:    true,
				Description: `Name of your project, should not contain dots`,
			},
			"organization_id": schema.StringAttribute{
				Required:    true,
				Description: `Slug of your organization`,
			},
			"postgres_engine": schema.StringAttribute{
				Optional:    true,
				Description: `Postgres engine version. If not provided, the latest version will be used. must be "15"`,
				Validators: []validator.String{
					stringvalidator.OneOf("15"),
				},
			},
			"ref": schema.StringAttribute{
				Required:    true,
				Description: `Project ref`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthBetween(20, 20),
				},
			},
			"region": schema.StringAttribute{
				Required:    true,
				Description: `Region you want your server to reside in. must be one of ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "ap-east-1", "ap-southeast-1", "ap-northeast-1", "ap-northeast-2", "ap-southeast-2", "eu-west-1", "eu-west-2", "eu-west-3", "eu-north-1", "eu-central-1", "eu-central-2", "ca-central-1", "ap-south-1", "sa-east-1"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"us-east-1",
						"us-east-2",
						"us-west-1",
						"us-west-2",
						"ap-east-1",
						"ap-southeast-1",
						"ap-northeast-1",
						"ap-northeast-2",
						"ap-southeast-2",
						"eu-west-1",
						"eu-west-2",
						"eu-west-3",
						"eu-north-1",
						"eu-central-1",
						"eu-central-2",
						"ca-central-1",
						"ap-south-1",
						"sa-east-1",
					),
				},
			},
			"release_channel": schema.StringAttribute{
				Optional:    true,
				Description: `Release channel. If not provided, GA will be used. must be one of ["internal", "alpha", "beta", "ga", "withdrawn"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"internal",
						"alpha",
						"beta",
						"ga",
						"withdrawn",
					),
				},
			},
			"status": schema.StringAttribute{
				Computed:    true,
				Description: `must be one of ["ACTIVE_HEALTHY", "ACTIVE_UNHEALTHY", "COMING_UP", "GOING_DOWN", "INACTIVE", "INIT_FAILED", "REMOVED", "RESTARTING", "UNKNOWN", "UPGRADING", "PAUSING", "RESTORING", "RESTORE_FAILED", "PAUSE_FAILED", "RESIZING"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"ACTIVE_HEALTHY",
						"ACTIVE_UNHEALTHY",
						"COMING_UP",
						"GOING_DOWN",
						"INACTIVE",
						"INIT_FAILED",
						"REMOVED",
						"RESTARTING",
						"UNKNOWN",
						"UPGRADING",
						"PAUSING",
						"RESTORING",
						"RESTORE_FAILED",
						"PAUSE_FAILED",
						"RESIZING",
					),
				},
			},
			"template_url": schema.StringAttribute{
				Optional:    true,
				Description: `Template URL used to create the project from the CLI.`,
			},
		},
	}
}

func (r *ProjectResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Supabase)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Supabase, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ProjectResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *ProjectResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := *data.ToSharedV1CreateProjectBodyDto()
	res, err := r.client.Projects.Create(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.V1ProjectResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedV1ProjectResponse(res.V1ProjectResponse)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var id string
	id = data.ID.ValueString()

	request1 := operations.V1GetProjectRequest{
		ID: id,
	}
	res1, err := r.client.Projects.Get(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.V1ProjectWithDatabaseResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedV1ProjectWithDatabaseResponse(res1.V1ProjectWithDatabaseResponse)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ProjectResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *ProjectResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var id string
	id = data.ID.ValueString()

	request := operations.V1GetProjectRequest{
		ID: id,
	}
	res, err := r.client.Projects.Get(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.V1ProjectWithDatabaseResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedV1ProjectWithDatabaseResponse(res.V1ProjectWithDatabaseResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ProjectResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *ProjectResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request := *data.ToSharedV1CreateProjectBodyDto()
	res, err := r.client.Projects.Create(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.V1ProjectResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedV1ProjectResponse(res.V1ProjectResponse)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var id string
	id = data.ID.ValueString()

	request1 := operations.V1GetProjectRequest{
		ID: id,
	}
	res1, err := r.client.Projects.Get(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.V1ProjectWithDatabaseResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedV1ProjectWithDatabaseResponse(res1.V1ProjectWithDatabaseResponse)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ProjectResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *ProjectResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var ref string
	ref = data.Ref.ValueString()

	request := operations.V1DeleteAProjectRequest{
		Ref: ref,
	}
	res, err := r.client.Projects.Delete(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *ProjectResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), req.ID)...)
}
