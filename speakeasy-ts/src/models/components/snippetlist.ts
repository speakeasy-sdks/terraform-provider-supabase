/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SnippetMeta,
  SnippetMeta$inboundSchema,
  SnippetMeta$Outbound,
  SnippetMeta$outboundSchema,
} from "./snippetmeta.js";

export type SnippetList = {
  data: Array<SnippetMeta>;
};

/** @internal */
export const SnippetList$inboundSchema: z.ZodType<
  SnippetList,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(SnippetMeta$inboundSchema),
});

/** @internal */
export type SnippetList$Outbound = {
  data: Array<SnippetMeta$Outbound>;
};

/** @internal */
export const SnippetList$outboundSchema: z.ZodType<
  SnippetList$Outbound,
  z.ZodTypeDef,
  SnippetList
> = z.object({
  data: z.array(SnippetMeta$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SnippetList$ {
  /** @deprecated use `SnippetList$inboundSchema` instead. */
  export const inboundSchema = SnippetList$inboundSchema;
  /** @deprecated use `SnippetList$outboundSchema` instead. */
  export const outboundSchema = SnippetList$outboundSchema;
  /** @deprecated use `SnippetList$Outbound` instead. */
  export type Outbound = SnippetList$Outbound;
}

export function snippetListToJSON(snippetList: SnippetList): string {
  return JSON.stringify(SnippetList$outboundSchema.parse(snippetList));
}

export function snippetListFromJSON(
  jsonString: string,
): SafeParseResult<SnippetList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SnippetList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SnippetList' from JSON`,
  );
}
