/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GrantType = {
  AuthorizationCode: "authorization_code",
  RefreshToken: "refresh_token",
} as const;
export type GrantType = ClosedEnum<typeof GrantType>;

export type OAuthTokenBody = {
  grantType: GrantType;
  clientId: string;
  clientSecret: string;
  code?: string | undefined;
  codeVerifier?: string | undefined;
  redirectUri?: string | undefined;
  refreshToken?: string | undefined;
};

/** @internal */
export const GrantType$inboundSchema: z.ZodNativeEnum<typeof GrantType> = z
  .nativeEnum(GrantType);

/** @internal */
export const GrantType$outboundSchema: z.ZodNativeEnum<typeof GrantType> =
  GrantType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantType$ {
  /** @deprecated use `GrantType$inboundSchema` instead. */
  export const inboundSchema = GrantType$inboundSchema;
  /** @deprecated use `GrantType$outboundSchema` instead. */
  export const outboundSchema = GrantType$outboundSchema;
}

/** @internal */
export const OAuthTokenBody$inboundSchema: z.ZodType<
  OAuthTokenBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  grant_type: GrantType$inboundSchema,
  client_id: z.string(),
  client_secret: z.string(),
  code: z.string().optional(),
  code_verifier: z.string().optional(),
  redirect_uri: z.string().optional(),
  refresh_token: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "grant_type": "grantType",
    "client_id": "clientId",
    "client_secret": "clientSecret",
    "code_verifier": "codeVerifier",
    "redirect_uri": "redirectUri",
    "refresh_token": "refreshToken",
  });
});

/** @internal */
export type OAuthTokenBody$Outbound = {
  grant_type: string;
  client_id: string;
  client_secret: string;
  code?: string | undefined;
  code_verifier?: string | undefined;
  redirect_uri?: string | undefined;
  refresh_token?: string | undefined;
};

/** @internal */
export const OAuthTokenBody$outboundSchema: z.ZodType<
  OAuthTokenBody$Outbound,
  z.ZodTypeDef,
  OAuthTokenBody
> = z.object({
  grantType: GrantType$outboundSchema,
  clientId: z.string(),
  clientSecret: z.string(),
  code: z.string().optional(),
  codeVerifier: z.string().optional(),
  redirectUri: z.string().optional(),
  refreshToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    grantType: "grant_type",
    clientId: "client_id",
    clientSecret: "client_secret",
    codeVerifier: "code_verifier",
    redirectUri: "redirect_uri",
    refreshToken: "refresh_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OAuthTokenBody$ {
  /** @deprecated use `OAuthTokenBody$inboundSchema` instead. */
  export const inboundSchema = OAuthTokenBody$inboundSchema;
  /** @deprecated use `OAuthTokenBody$outboundSchema` instead. */
  export const outboundSchema = OAuthTokenBody$outboundSchema;
  /** @deprecated use `OAuthTokenBody$Outbound` instead. */
  export type Outbound = OAuthTokenBody$Outbound;
}

export function oAuthTokenBodyToJSON(oAuthTokenBody: OAuthTokenBody): string {
  return JSON.stringify(OAuthTokenBody$outboundSchema.parse(oAuthTokenBody));
}

export function oAuthTokenBodyFromJSON(
  jsonString: string,
): SafeParseResult<OAuthTokenBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OAuthTokenBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OAuthTokenBody' from JSON`,
  );
}
