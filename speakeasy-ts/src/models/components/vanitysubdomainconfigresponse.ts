/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const VanitySubdomainConfigResponseStatus = {
  NotUsed: "not-used",
  CustomDomainUsed: "custom-domain-used",
  Active: "active",
} as const;
export type VanitySubdomainConfigResponseStatus = ClosedEnum<
  typeof VanitySubdomainConfigResponseStatus
>;

export type VanitySubdomainConfigResponse = {
  status: VanitySubdomainConfigResponseStatus;
  customDomain?: string | undefined;
};

/** @internal */
export const VanitySubdomainConfigResponseStatus$inboundSchema: z.ZodNativeEnum<
  typeof VanitySubdomainConfigResponseStatus
> = z.nativeEnum(VanitySubdomainConfigResponseStatus);

/** @internal */
export const VanitySubdomainConfigResponseStatus$outboundSchema:
  z.ZodNativeEnum<typeof VanitySubdomainConfigResponseStatus> =
    VanitySubdomainConfigResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VanitySubdomainConfigResponseStatus$ {
  /** @deprecated use `VanitySubdomainConfigResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    VanitySubdomainConfigResponseStatus$inboundSchema;
  /** @deprecated use `VanitySubdomainConfigResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    VanitySubdomainConfigResponseStatus$outboundSchema;
}

/** @internal */
export const VanitySubdomainConfigResponse$inboundSchema: z.ZodType<
  VanitySubdomainConfigResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: VanitySubdomainConfigResponseStatus$inboundSchema,
  custom_domain: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "custom_domain": "customDomain",
  });
});

/** @internal */
export type VanitySubdomainConfigResponse$Outbound = {
  status: string;
  custom_domain?: string | undefined;
};

/** @internal */
export const VanitySubdomainConfigResponse$outboundSchema: z.ZodType<
  VanitySubdomainConfigResponse$Outbound,
  z.ZodTypeDef,
  VanitySubdomainConfigResponse
> = z.object({
  status: VanitySubdomainConfigResponseStatus$outboundSchema,
  customDomain: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    customDomain: "custom_domain",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VanitySubdomainConfigResponse$ {
  /** @deprecated use `VanitySubdomainConfigResponse$inboundSchema` instead. */
  export const inboundSchema = VanitySubdomainConfigResponse$inboundSchema;
  /** @deprecated use `VanitySubdomainConfigResponse$outboundSchema` instead. */
  export const outboundSchema = VanitySubdomainConfigResponse$outboundSchema;
  /** @deprecated use `VanitySubdomainConfigResponse$Outbound` instead. */
  export type Outbound = VanitySubdomainConfigResponse$Outbound;
}

export function vanitySubdomainConfigResponseToJSON(
  vanitySubdomainConfigResponse: VanitySubdomainConfigResponse,
): string {
  return JSON.stringify(
    VanitySubdomainConfigResponse$outboundSchema.parse(
      vanitySubdomainConfigResponse,
    ),
  );
}

export function vanitySubdomainConfigResponseFromJSON(
  jsonString: string,
): SafeParseResult<VanitySubdomainConfigResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VanitySubdomainConfigResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VanitySubdomainConfigResponse' from JSON`,
  );
}
