/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const UpdateBranchBodyStatus = {
  CreatingProject: "CREATING_PROJECT",
  RunningMigrations: "RUNNING_MIGRATIONS",
  MigrationsPassed: "MIGRATIONS_PASSED",
  MigrationsFailed: "MIGRATIONS_FAILED",
  FunctionsDeployed: "FUNCTIONS_DEPLOYED",
  FunctionsFailed: "FUNCTIONS_FAILED",
} as const;
export type UpdateBranchBodyStatus = ClosedEnum<typeof UpdateBranchBodyStatus>;

export type UpdateBranchBody = {
  branchName?: string | undefined;
  gitBranch?: string | undefined;
  resetOnPush?: boolean | undefined;
  persistent?: boolean | undefined;
  status?: UpdateBranchBodyStatus | undefined;
};

/** @internal */
export const UpdateBranchBodyStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateBranchBodyStatus
> = z.nativeEnum(UpdateBranchBodyStatus);

/** @internal */
export const UpdateBranchBodyStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateBranchBodyStatus
> = UpdateBranchBodyStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBranchBodyStatus$ {
  /** @deprecated use `UpdateBranchBodyStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateBranchBodyStatus$inboundSchema;
  /** @deprecated use `UpdateBranchBodyStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateBranchBodyStatus$outboundSchema;
}

/** @internal */
export const UpdateBranchBody$inboundSchema: z.ZodType<
  UpdateBranchBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  branch_name: z.string().optional(),
  git_branch: z.string().optional(),
  reset_on_push: z.boolean().optional(),
  persistent: z.boolean().optional(),
  status: UpdateBranchBodyStatus$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "branch_name": "branchName",
    "git_branch": "gitBranch",
    "reset_on_push": "resetOnPush",
  });
});

/** @internal */
export type UpdateBranchBody$Outbound = {
  branch_name?: string | undefined;
  git_branch?: string | undefined;
  reset_on_push?: boolean | undefined;
  persistent?: boolean | undefined;
  status?: string | undefined;
};

/** @internal */
export const UpdateBranchBody$outboundSchema: z.ZodType<
  UpdateBranchBody$Outbound,
  z.ZodTypeDef,
  UpdateBranchBody
> = z.object({
  branchName: z.string().optional(),
  gitBranch: z.string().optional(),
  resetOnPush: z.boolean().optional(),
  persistent: z.boolean().optional(),
  status: UpdateBranchBodyStatus$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    branchName: "branch_name",
    gitBranch: "git_branch",
    resetOnPush: "reset_on_push",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBranchBody$ {
  /** @deprecated use `UpdateBranchBody$inboundSchema` instead. */
  export const inboundSchema = UpdateBranchBody$inboundSchema;
  /** @deprecated use `UpdateBranchBody$outboundSchema` instead. */
  export const outboundSchema = UpdateBranchBody$outboundSchema;
  /** @deprecated use `UpdateBranchBody$Outbound` instead. */
  export type Outbound = UpdateBranchBody$Outbound;
}

export function updateBranchBodyToJSON(
  updateBranchBody: UpdateBranchBody,
): string {
  return JSON.stringify(
    UpdateBranchBody$outboundSchema.parse(updateBranchBody),
  );
}

export function updateBranchBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateBranchBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateBranchBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateBranchBody' from JSON`,
  );
}
