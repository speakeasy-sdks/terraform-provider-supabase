/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const BranchResponseStatus = {
  CreatingProject: "CREATING_PROJECT",
  RunningMigrations: "RUNNING_MIGRATIONS",
  MigrationsPassed: "MIGRATIONS_PASSED",
  MigrationsFailed: "MIGRATIONS_FAILED",
  FunctionsDeployed: "FUNCTIONS_DEPLOYED",
  FunctionsFailed: "FUNCTIONS_FAILED",
} as const;
export type BranchResponseStatus = ClosedEnum<typeof BranchResponseStatus>;

export type BranchResponse = {
  prNumber?: number | undefined;
  latestCheckRunId?: number | undefined;
  id: string;
  name: string;
  projectRef: string;
  parentProjectRef: string;
  isDefault: boolean;
  gitBranch?: string | undefined;
  resetOnPush: boolean;
  persistent: boolean;
  status: BranchResponseStatus;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const BranchResponseStatus$inboundSchema: z.ZodNativeEnum<
  typeof BranchResponseStatus
> = z.nativeEnum(BranchResponseStatus);

/** @internal */
export const BranchResponseStatus$outboundSchema: z.ZodNativeEnum<
  typeof BranchResponseStatus
> = BranchResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BranchResponseStatus$ {
  /** @deprecated use `BranchResponseStatus$inboundSchema` instead. */
  export const inboundSchema = BranchResponseStatus$inboundSchema;
  /** @deprecated use `BranchResponseStatus$outboundSchema` instead. */
  export const outboundSchema = BranchResponseStatus$outboundSchema;
}

/** @internal */
export const BranchResponse$inboundSchema: z.ZodType<
  BranchResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  pr_number: z.number().int().optional(),
  latest_check_run_id: z.number().int().optional(),
  id: z.string(),
  name: z.string(),
  project_ref: z.string(),
  parent_project_ref: z.string(),
  is_default: z.boolean(),
  git_branch: z.string().optional(),
  reset_on_push: z.boolean(),
  persistent: z.boolean(),
  status: BranchResponseStatus$inboundSchema,
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "pr_number": "prNumber",
    "latest_check_run_id": "latestCheckRunId",
    "project_ref": "projectRef",
    "parent_project_ref": "parentProjectRef",
    "is_default": "isDefault",
    "git_branch": "gitBranch",
    "reset_on_push": "resetOnPush",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type BranchResponse$Outbound = {
  pr_number?: number | undefined;
  latest_check_run_id?: number | undefined;
  id: string;
  name: string;
  project_ref: string;
  parent_project_ref: string;
  is_default: boolean;
  git_branch?: string | undefined;
  reset_on_push: boolean;
  persistent: boolean;
  status: string;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const BranchResponse$outboundSchema: z.ZodType<
  BranchResponse$Outbound,
  z.ZodTypeDef,
  BranchResponse
> = z.object({
  prNumber: z.number().int().optional(),
  latestCheckRunId: z.number().int().optional(),
  id: z.string(),
  name: z.string(),
  projectRef: z.string(),
  parentProjectRef: z.string(),
  isDefault: z.boolean(),
  gitBranch: z.string().optional(),
  resetOnPush: z.boolean(),
  persistent: z.boolean(),
  status: BranchResponseStatus$outboundSchema,
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    prNumber: "pr_number",
    latestCheckRunId: "latest_check_run_id",
    projectRef: "project_ref",
    parentProjectRef: "parent_project_ref",
    isDefault: "is_default",
    gitBranch: "git_branch",
    resetOnPush: "reset_on_push",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BranchResponse$ {
  /** @deprecated use `BranchResponse$inboundSchema` instead. */
  export const inboundSchema = BranchResponse$inboundSchema;
  /** @deprecated use `BranchResponse$outboundSchema` instead. */
  export const outboundSchema = BranchResponse$outboundSchema;
  /** @deprecated use `BranchResponse$Outbound` instead. */
  export type Outbound = BranchResponse$Outbound;
}

export function branchResponseToJSON(branchResponse: BranchResponse): string {
  return JSON.stringify(BranchResponse$outboundSchema.parse(branchResponse));
}

export function branchResponseFromJSON(
  jsonString: string,
): SafeParseResult<BranchResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BranchResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BranchResponse' from JSON`,
  );
}
