/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { domainsActivateCustomHostname } from "../funcs/domainsActivateCustomHostname.js";
import { domainsActivateVanitySubdomain } from "../funcs/domainsActivateVanitySubdomain.js";
import { domainsCheckVanitySubdomainAvailability } from "../funcs/domainsCheckVanitySubdomainAvailability.js";
import { domainsDeleteHostnameConfig } from "../funcs/domainsDeleteHostnameConfig.js";
import { domainsDeleteVanitySubdomain } from "../funcs/domainsDeleteVanitySubdomain.js";
import { domainsGetHostnameConfig } from "../funcs/domainsGetHostnameConfig.js";
import { domainsGetVanitySubdomain } from "../funcs/domainsGetVanitySubdomain.js";
import { domainsInitializeHostnameConfig } from "../funcs/domainsInitializeHostnameConfig.js";
import { domainsVerifyDnsConfig } from "../funcs/domainsVerifyDnsConfig.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Domains extends ClientSDK {
  /**
   * [Beta] Gets project's custom hostname config
   */
  async getHostnameConfig(
    request: operations.V1GetHostnameConfigRequest,
    options?: RequestOptions,
  ): Promise<components.UpdateCustomHostnameResponse> {
    return unwrapAsync(domainsGetHostnameConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * [Beta] Deletes a project's custom hostname configuration
   */
  async deleteHostnameConfig(
    request: operations.V1DeleteHostnameConfigRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(domainsDeleteHostnameConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * [Beta] Updates project's custom hostname configuration
   */
  async initializeHostnameConfig(
    request: operations.V1UpdateHostnameConfigRequest,
    options?: RequestOptions,
  ): Promise<components.UpdateCustomHostnameResponse> {
    return unwrapAsync(domainsInitializeHostnameConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * [Beta] Attempts to verify the DNS configuration for project's custom hostname configuration
   */
  async verifyDnsConfig(
    request: operations.V1VerifyDnsConfigRequest,
    options?: RequestOptions,
  ): Promise<components.UpdateCustomHostnameResponse> {
    return unwrapAsync(domainsVerifyDnsConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * [Beta] Activates a custom hostname for a project.
   */
  async activateCustomHostname(
    request: operations.V1ActivateCustomHostnameRequest,
    options?: RequestOptions,
  ): Promise<components.UpdateCustomHostnameResponse> {
    return unwrapAsync(domainsActivateCustomHostname(
      this,
      request,
      options,
    ));
  }

  /**
   * [Beta] Gets current vanity subdomain config
   */
  async getVanitySubdomain(
    request: operations.V1GetVanitySubdomainConfigRequest,
    options?: RequestOptions,
  ): Promise<components.VanitySubdomainConfigResponse> {
    return unwrapAsync(domainsGetVanitySubdomain(
      this,
      request,
      options,
    ));
  }

  /**
   * [Beta] Deletes a project's vanity subdomain configuration
   */
  async deleteVanitySubdomain(
    request: operations.V1DeactivateVanitySubdomainConfigRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(domainsDeleteVanitySubdomain(
      this,
      request,
      options,
    ));
  }

  /**
   * [Beta] Checks vanity subdomain availability
   */
  async checkVanitySubdomainAvailability(
    request: operations.V1CheckVanitySubdomainAvailabilityRequest,
    options?: RequestOptions,
  ): Promise<components.SubdomainAvailabilityResponse> {
    return unwrapAsync(domainsCheckVanitySubdomainAvailability(
      this,
      request,
      options,
    ));
  }

  /**
   * [Beta] Activates a vanity subdomain for a project.
   */
  async activateVanitySubdomain(
    request: operations.V1ActivateVanitySubdomainConfigRequest,
    options?: RequestOptions,
  ): Promise<components.ActivateVanitySubdomainResponse> {
    return unwrapAsync(domainsActivateVanitySubdomain(
      this,
      request,
      options,
    ));
  }
}
