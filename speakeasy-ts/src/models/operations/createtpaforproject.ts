/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateTPAForProjectRequest = {
  /**
   * Project ref
   */
  ref: string;
  createThirdPartyAuthBody: components.CreateThirdPartyAuthBody;
};

/** @internal */
export const CreateTPAForProjectRequest$inboundSchema: z.ZodType<
  CreateTPAForProjectRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ref: z.string(),
  CreateThirdPartyAuthBody: components.CreateThirdPartyAuthBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CreateThirdPartyAuthBody": "createThirdPartyAuthBody",
  });
});

/** @internal */
export type CreateTPAForProjectRequest$Outbound = {
  ref: string;
  CreateThirdPartyAuthBody: components.CreateThirdPartyAuthBody$Outbound;
};

/** @internal */
export const CreateTPAForProjectRequest$outboundSchema: z.ZodType<
  CreateTPAForProjectRequest$Outbound,
  z.ZodTypeDef,
  CreateTPAForProjectRequest
> = z.object({
  ref: z.string(),
  createThirdPartyAuthBody: components.CreateThirdPartyAuthBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createThirdPartyAuthBody: "CreateThirdPartyAuthBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTPAForProjectRequest$ {
  /** @deprecated use `CreateTPAForProjectRequest$inboundSchema` instead. */
  export const inboundSchema = CreateTPAForProjectRequest$inboundSchema;
  /** @deprecated use `CreateTPAForProjectRequest$outboundSchema` instead. */
  export const outboundSchema = CreateTPAForProjectRequest$outboundSchema;
  /** @deprecated use `CreateTPAForProjectRequest$Outbound` instead. */
  export type Outbound = CreateTPAForProjectRequest$Outbound;
}

export function createTPAForProjectRequestToJSON(
  createTPAForProjectRequest: CreateTPAForProjectRequest,
): string {
  return JSON.stringify(
    CreateTPAForProjectRequest$outboundSchema.parse(createTPAForProjectRequest),
  );
}

export function createTPAForProjectRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateTPAForProjectRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTPAForProjectRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTPAForProjectRequest' from JSON`,
  );
}
