/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Name = {
  GoTrue: "GoTrue",
} as const;
export type Name = ClosedEnum<typeof Name>;

export type AuthHealthResponse = {
  name: Name;
};

/** @internal */
export const Name$inboundSchema: z.ZodNativeEnum<typeof Name> = z.nativeEnum(
  Name,
);

/** @internal */
export const Name$outboundSchema: z.ZodNativeEnum<typeof Name> =
  Name$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Name$ {
  /** @deprecated use `Name$inboundSchema` instead. */
  export const inboundSchema = Name$inboundSchema;
  /** @deprecated use `Name$outboundSchema` instead. */
  export const outboundSchema = Name$outboundSchema;
}

/** @internal */
export const AuthHealthResponse$inboundSchema: z.ZodType<
  AuthHealthResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: Name$inboundSchema,
});

/** @internal */
export type AuthHealthResponse$Outbound = {
  name: string;
};

/** @internal */
export const AuthHealthResponse$outboundSchema: z.ZodType<
  AuthHealthResponse$Outbound,
  z.ZodTypeDef,
  AuthHealthResponse
> = z.object({
  name: Name$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthHealthResponse$ {
  /** @deprecated use `AuthHealthResponse$inboundSchema` instead. */
  export const inboundSchema = AuthHealthResponse$inboundSchema;
  /** @deprecated use `AuthHealthResponse$outboundSchema` instead. */
  export const outboundSchema = AuthHealthResponse$outboundSchema;
  /** @deprecated use `AuthHealthResponse$Outbound` instead. */
  export type Outbound = AuthHealthResponse$Outbound;
}

export function authHealthResponseToJSON(
  authHealthResponse: AuthHealthResponse,
): string {
  return JSON.stringify(
    AuthHealthResponse$outboundSchema.parse(authHealthResponse),
  );
}

export function authHealthResponseFromJSON(
  jsonString: string,
): SafeParseResult<AuthHealthResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthHealthResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthHealthResponse' from JSON`,
  );
}
