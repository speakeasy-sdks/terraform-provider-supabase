// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type FunctionResponseStatusEnum string

const (
	FunctionResponseStatusEnumActive    FunctionResponseStatusEnum = "ACTIVE"
	FunctionResponseStatusEnumRemoved   FunctionResponseStatusEnum = "REMOVED"
	FunctionResponseStatusEnumThrottled FunctionResponseStatusEnum = "THROTTLED"
)

func (e FunctionResponseStatusEnum) ToPointer() *FunctionResponseStatusEnum {
	return &e
}

func (e *FunctionResponseStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "REMOVED":
		fallthrough
	case "THROTTLED":
		*e = FunctionResponseStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FunctionResponseStatusEnum: %v", v)
	}
}

type FunctionResponse struct {
	CreatedAt float64                    `json:"created_at"`
	ID        string                     `json:"id"`
	ImportMap *bool                      `json:"import_map,omitempty"`
	Name      string                     `json:"name"`
	Slug      string                     `json:"slug"`
	Status    FunctionResponseStatusEnum `json:"status"`
	UpdatedAt float64                    `json:"updated_at"`
	VerifyJwt *bool                      `json:"verify_jwt,omitempty"`
	Version   float64                    `json:"version"`
}
