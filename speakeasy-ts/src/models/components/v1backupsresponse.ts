/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  V1Backup,
  V1Backup$inboundSchema,
  V1Backup$Outbound,
  V1Backup$outboundSchema,
} from "./v1backup.js";
import {
  V1PhysicalBackup,
  V1PhysicalBackup$inboundSchema,
  V1PhysicalBackup$Outbound,
  V1PhysicalBackup$outboundSchema,
} from "./v1physicalbackup.js";

export type V1BackupsResponse = {
  region: string;
  walgEnabled: boolean;
  pitrEnabled: boolean;
  backups: Array<V1Backup>;
  physicalBackupData: V1PhysicalBackup;
};

/** @internal */
export const V1BackupsResponse$inboundSchema: z.ZodType<
  V1BackupsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  region: z.string(),
  walg_enabled: z.boolean(),
  pitr_enabled: z.boolean(),
  backups: z.array(V1Backup$inboundSchema),
  physical_backup_data: V1PhysicalBackup$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "walg_enabled": "walgEnabled",
    "pitr_enabled": "pitrEnabled",
    "physical_backup_data": "physicalBackupData",
  });
});

/** @internal */
export type V1BackupsResponse$Outbound = {
  region: string;
  walg_enabled: boolean;
  pitr_enabled: boolean;
  backups: Array<V1Backup$Outbound>;
  physical_backup_data: V1PhysicalBackup$Outbound;
};

/** @internal */
export const V1BackupsResponse$outboundSchema: z.ZodType<
  V1BackupsResponse$Outbound,
  z.ZodTypeDef,
  V1BackupsResponse
> = z.object({
  region: z.string(),
  walgEnabled: z.boolean(),
  pitrEnabled: z.boolean(),
  backups: z.array(V1Backup$outboundSchema),
  physicalBackupData: V1PhysicalBackup$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    walgEnabled: "walg_enabled",
    pitrEnabled: "pitr_enabled",
    physicalBackupData: "physical_backup_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1BackupsResponse$ {
  /** @deprecated use `V1BackupsResponse$inboundSchema` instead. */
  export const inboundSchema = V1BackupsResponse$inboundSchema;
  /** @deprecated use `V1BackupsResponse$outboundSchema` instead. */
  export const outboundSchema = V1BackupsResponse$outboundSchema;
  /** @deprecated use `V1BackupsResponse$Outbound` instead. */
  export type Outbound = V1BackupsResponse$Outbound;
}

export function v1BackupsResponseToJSON(
  v1BackupsResponse: V1BackupsResponse,
): string {
  return JSON.stringify(
    V1BackupsResponse$outboundSchema.parse(v1BackupsResponse),
  );
}

export function v1BackupsResponseFromJSON(
  jsonString: string,
): SafeParseResult<V1BackupsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1BackupsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1BackupsResponse' from JSON`,
  );
}
