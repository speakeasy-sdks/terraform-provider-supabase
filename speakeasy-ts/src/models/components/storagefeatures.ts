/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StorageFeatureImageTransformation,
  StorageFeatureImageTransformation$inboundSchema,
  StorageFeatureImageTransformation$Outbound,
  StorageFeatureImageTransformation$outboundSchema,
} from "./storagefeatureimagetransformation.js";

export type StorageFeatures = {
  imageTransformation: StorageFeatureImageTransformation;
};

/** @internal */
export const StorageFeatures$inboundSchema: z.ZodType<
  StorageFeatures,
  z.ZodTypeDef,
  unknown
> = z.object({
  imageTransformation: StorageFeatureImageTransformation$inboundSchema,
});

/** @internal */
export type StorageFeatures$Outbound = {
  imageTransformation: StorageFeatureImageTransformation$Outbound;
};

/** @internal */
export const StorageFeatures$outboundSchema: z.ZodType<
  StorageFeatures$Outbound,
  z.ZodTypeDef,
  StorageFeatures
> = z.object({
  imageTransformation: StorageFeatureImageTransformation$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StorageFeatures$ {
  /** @deprecated use `StorageFeatures$inboundSchema` instead. */
  export const inboundSchema = StorageFeatures$inboundSchema;
  /** @deprecated use `StorageFeatures$outboundSchema` instead. */
  export const outboundSchema = StorageFeatures$outboundSchema;
  /** @deprecated use `StorageFeatures$Outbound` instead. */
  export type Outbound = StorageFeatures$Outbound;
}

export function storageFeaturesToJSON(
  storageFeatures: StorageFeatures,
): string {
  return JSON.stringify(StorageFeatures$outboundSchema.parse(storageFeatures));
}

export function storageFeaturesFromJSON(
  jsonString: string,
): SafeParseResult<StorageFeatures, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StorageFeatures$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StorageFeatures' from JSON`,
  );
}
