/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NetworkRestrictionsRequest,
  NetworkRestrictionsRequest$inboundSchema,
  NetworkRestrictionsRequest$Outbound,
  NetworkRestrictionsRequest$outboundSchema,
} from "./networkrestrictionsrequest.js";

export const Entitlement = {
  Disallowed: "disallowed",
  Allowed: "allowed",
} as const;
export type Entitlement = ClosedEnum<typeof Entitlement>;

export const NetworkRestrictionsResponseStatus = {
  Stored: "stored",
  Applied: "applied",
} as const;
export type NetworkRestrictionsResponseStatus = ClosedEnum<
  typeof NetworkRestrictionsResponseStatus
>;

export type NetworkRestrictionsResponse = {
  entitlement: Entitlement;
  config: NetworkRestrictionsRequest;
  oldConfig?: NetworkRestrictionsRequest | undefined;
  status: NetworkRestrictionsResponseStatus;
};

/** @internal */
export const Entitlement$inboundSchema: z.ZodNativeEnum<typeof Entitlement> = z
  .nativeEnum(Entitlement);

/** @internal */
export const Entitlement$outboundSchema: z.ZodNativeEnum<typeof Entitlement> =
  Entitlement$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Entitlement$ {
  /** @deprecated use `Entitlement$inboundSchema` instead. */
  export const inboundSchema = Entitlement$inboundSchema;
  /** @deprecated use `Entitlement$outboundSchema` instead. */
  export const outboundSchema = Entitlement$outboundSchema;
}

/** @internal */
export const NetworkRestrictionsResponseStatus$inboundSchema: z.ZodNativeEnum<
  typeof NetworkRestrictionsResponseStatus
> = z.nativeEnum(NetworkRestrictionsResponseStatus);

/** @internal */
export const NetworkRestrictionsResponseStatus$outboundSchema: z.ZodNativeEnum<
  typeof NetworkRestrictionsResponseStatus
> = NetworkRestrictionsResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NetworkRestrictionsResponseStatus$ {
  /** @deprecated use `NetworkRestrictionsResponseStatus$inboundSchema` instead. */
  export const inboundSchema = NetworkRestrictionsResponseStatus$inboundSchema;
  /** @deprecated use `NetworkRestrictionsResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    NetworkRestrictionsResponseStatus$outboundSchema;
}

/** @internal */
export const NetworkRestrictionsResponse$inboundSchema: z.ZodType<
  NetworkRestrictionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  entitlement: Entitlement$inboundSchema,
  config: NetworkRestrictionsRequest$inboundSchema,
  old_config: NetworkRestrictionsRequest$inboundSchema.optional(),
  status: NetworkRestrictionsResponseStatus$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "old_config": "oldConfig",
  });
});

/** @internal */
export type NetworkRestrictionsResponse$Outbound = {
  entitlement: string;
  config: NetworkRestrictionsRequest$Outbound;
  old_config?: NetworkRestrictionsRequest$Outbound | undefined;
  status: string;
};

/** @internal */
export const NetworkRestrictionsResponse$outboundSchema: z.ZodType<
  NetworkRestrictionsResponse$Outbound,
  z.ZodTypeDef,
  NetworkRestrictionsResponse
> = z.object({
  entitlement: Entitlement$outboundSchema,
  config: NetworkRestrictionsRequest$outboundSchema,
  oldConfig: NetworkRestrictionsRequest$outboundSchema.optional(),
  status: NetworkRestrictionsResponseStatus$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    oldConfig: "old_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NetworkRestrictionsResponse$ {
  /** @deprecated use `NetworkRestrictionsResponse$inboundSchema` instead. */
  export const inboundSchema = NetworkRestrictionsResponse$inboundSchema;
  /** @deprecated use `NetworkRestrictionsResponse$outboundSchema` instead. */
  export const outboundSchema = NetworkRestrictionsResponse$outboundSchema;
  /** @deprecated use `NetworkRestrictionsResponse$Outbound` instead. */
  export type Outbound = NetworkRestrictionsResponse$Outbound;
}

export function networkRestrictionsResponseToJSON(
  networkRestrictionsResponse: NetworkRestrictionsResponse,
): string {
  return JSON.stringify(
    NetworkRestrictionsResponse$outboundSchema.parse(
      networkRestrictionsResponse,
    ),
  );
}

export function networkRestrictionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<NetworkRestrictionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NetworkRestrictionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NetworkRestrictionsResponse' from JSON`,
  );
}
