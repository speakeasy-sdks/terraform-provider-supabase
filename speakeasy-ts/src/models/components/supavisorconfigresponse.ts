/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const DatabaseType = {
  Primary: "PRIMARY",
  ReadReplica: "READ_REPLICA",
} as const;
export type DatabaseType = ClosedEnum<typeof DatabaseType>;

export const SupavisorConfigResponsePoolMode = {
  Transaction: "transaction",
  Session: "session",
} as const;
export type SupavisorConfigResponsePoolMode = ClosedEnum<
  typeof SupavisorConfigResponsePoolMode
>;

export type SupavisorConfigResponse = {
  dbPort: number;
  defaultPoolSize: number | null;
  maxClientConn: number | null;
  identifier: string;
  databaseType: DatabaseType;
  isUsingScramAuth: boolean;
  dbUser: string;
  dbHost: string;
  dbName: string;
  connectionString: string;
  poolMode: SupavisorConfigResponsePoolMode;
};

/** @internal */
export const DatabaseType$inboundSchema: z.ZodNativeEnum<typeof DatabaseType> =
  z.nativeEnum(DatabaseType);

/** @internal */
export const DatabaseType$outboundSchema: z.ZodNativeEnum<typeof DatabaseType> =
  DatabaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DatabaseType$ {
  /** @deprecated use `DatabaseType$inboundSchema` instead. */
  export const inboundSchema = DatabaseType$inboundSchema;
  /** @deprecated use `DatabaseType$outboundSchema` instead. */
  export const outboundSchema = DatabaseType$outboundSchema;
}

/** @internal */
export const SupavisorConfigResponsePoolMode$inboundSchema: z.ZodNativeEnum<
  typeof SupavisorConfigResponsePoolMode
> = z.nativeEnum(SupavisorConfigResponsePoolMode);

/** @internal */
export const SupavisorConfigResponsePoolMode$outboundSchema: z.ZodNativeEnum<
  typeof SupavisorConfigResponsePoolMode
> = SupavisorConfigResponsePoolMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupavisorConfigResponsePoolMode$ {
  /** @deprecated use `SupavisorConfigResponsePoolMode$inboundSchema` instead. */
  export const inboundSchema = SupavisorConfigResponsePoolMode$inboundSchema;
  /** @deprecated use `SupavisorConfigResponsePoolMode$outboundSchema` instead. */
  export const outboundSchema = SupavisorConfigResponsePoolMode$outboundSchema;
}

/** @internal */
export const SupavisorConfigResponse$inboundSchema: z.ZodType<
  SupavisorConfigResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  db_port: z.number().int(),
  default_pool_size: z.nullable(z.number().int()),
  max_client_conn: z.nullable(z.number().int()),
  identifier: z.string(),
  database_type: DatabaseType$inboundSchema,
  is_using_scram_auth: z.boolean(),
  db_user: z.string(),
  db_host: z.string(),
  db_name: z.string(),
  connectionString: z.string(),
  pool_mode: SupavisorConfigResponsePoolMode$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "db_port": "dbPort",
    "default_pool_size": "defaultPoolSize",
    "max_client_conn": "maxClientConn",
    "database_type": "databaseType",
    "is_using_scram_auth": "isUsingScramAuth",
    "db_user": "dbUser",
    "db_host": "dbHost",
    "db_name": "dbName",
    "pool_mode": "poolMode",
  });
});

/** @internal */
export type SupavisorConfigResponse$Outbound = {
  db_port: number;
  default_pool_size: number | null;
  max_client_conn: number | null;
  identifier: string;
  database_type: string;
  is_using_scram_auth: boolean;
  db_user: string;
  db_host: string;
  db_name: string;
  connectionString: string;
  pool_mode: string;
};

/** @internal */
export const SupavisorConfigResponse$outboundSchema: z.ZodType<
  SupavisorConfigResponse$Outbound,
  z.ZodTypeDef,
  SupavisorConfigResponse
> = z.object({
  dbPort: z.number().int(),
  defaultPoolSize: z.nullable(z.number().int()),
  maxClientConn: z.nullable(z.number().int()),
  identifier: z.string(),
  databaseType: DatabaseType$outboundSchema,
  isUsingScramAuth: z.boolean(),
  dbUser: z.string(),
  dbHost: z.string(),
  dbName: z.string(),
  connectionString: z.string(),
  poolMode: SupavisorConfigResponsePoolMode$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    dbPort: "db_port",
    defaultPoolSize: "default_pool_size",
    maxClientConn: "max_client_conn",
    databaseType: "database_type",
    isUsingScramAuth: "is_using_scram_auth",
    dbUser: "db_user",
    dbHost: "db_host",
    dbName: "db_name",
    poolMode: "pool_mode",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupavisorConfigResponse$ {
  /** @deprecated use `SupavisorConfigResponse$inboundSchema` instead. */
  export const inboundSchema = SupavisorConfigResponse$inboundSchema;
  /** @deprecated use `SupavisorConfigResponse$outboundSchema` instead. */
  export const outboundSchema = SupavisorConfigResponse$outboundSchema;
  /** @deprecated use `SupavisorConfigResponse$Outbound` instead. */
  export type Outbound = SupavisorConfigResponse$Outbound;
}

export function supavisorConfigResponseToJSON(
  supavisorConfigResponse: SupavisorConfigResponse,
): string {
  return JSON.stringify(
    SupavisorConfigResponse$outboundSchema.parse(supavisorConfigResponse),
  );
}

export function supavisorConfigResponseFromJSON(
  jsonString: string,
): SafeParseResult<SupavisorConfigResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SupavisorConfigResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupavisorConfigResponse' from JSON`,
  );
}
