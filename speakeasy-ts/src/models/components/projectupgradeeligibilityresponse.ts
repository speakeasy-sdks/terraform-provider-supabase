/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ProjectVersion,
  ProjectVersion$inboundSchema,
  ProjectVersion$Outbound,
  ProjectVersion$outboundSchema,
} from "./projectversion.js";
import {
  ReleaseChannel,
  ReleaseChannel$inboundSchema,
  ReleaseChannel$outboundSchema,
} from "./releasechannel.js";

export type ProjectUpgradeEligibilityResponse = {
  currentAppVersionReleaseChannel: ReleaseChannel;
  durationEstimateHours: number;
  eligible: boolean;
  currentAppVersion: string;
  latestAppVersion: string;
  targetUpgradeVersions: Array<ProjectVersion>;
  potentialBreakingChanges: Array<string>;
  legacyAuthCustomRoles: Array<string>;
  extensionDependentObjects: Array<string>;
};

/** @internal */
export const ProjectUpgradeEligibilityResponse$inboundSchema: z.ZodType<
  ProjectUpgradeEligibilityResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  current_app_version_release_channel: ReleaseChannel$inboundSchema,
  duration_estimate_hours: z.number().int(),
  eligible: z.boolean(),
  current_app_version: z.string(),
  latest_app_version: z.string(),
  target_upgrade_versions: z.array(ProjectVersion$inboundSchema),
  potential_breaking_changes: z.array(z.string()),
  legacy_auth_custom_roles: z.array(z.string()),
  extension_dependent_objects: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "current_app_version_release_channel": "currentAppVersionReleaseChannel",
    "duration_estimate_hours": "durationEstimateHours",
    "current_app_version": "currentAppVersion",
    "latest_app_version": "latestAppVersion",
    "target_upgrade_versions": "targetUpgradeVersions",
    "potential_breaking_changes": "potentialBreakingChanges",
    "legacy_auth_custom_roles": "legacyAuthCustomRoles",
    "extension_dependent_objects": "extensionDependentObjects",
  });
});

/** @internal */
export type ProjectUpgradeEligibilityResponse$Outbound = {
  current_app_version_release_channel: string;
  duration_estimate_hours: number;
  eligible: boolean;
  current_app_version: string;
  latest_app_version: string;
  target_upgrade_versions: Array<ProjectVersion$Outbound>;
  potential_breaking_changes: Array<string>;
  legacy_auth_custom_roles: Array<string>;
  extension_dependent_objects: Array<string>;
};

/** @internal */
export const ProjectUpgradeEligibilityResponse$outboundSchema: z.ZodType<
  ProjectUpgradeEligibilityResponse$Outbound,
  z.ZodTypeDef,
  ProjectUpgradeEligibilityResponse
> = z.object({
  currentAppVersionReleaseChannel: ReleaseChannel$outboundSchema,
  durationEstimateHours: z.number().int(),
  eligible: z.boolean(),
  currentAppVersion: z.string(),
  latestAppVersion: z.string(),
  targetUpgradeVersions: z.array(ProjectVersion$outboundSchema),
  potentialBreakingChanges: z.array(z.string()),
  legacyAuthCustomRoles: z.array(z.string()),
  extensionDependentObjects: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    currentAppVersionReleaseChannel: "current_app_version_release_channel",
    durationEstimateHours: "duration_estimate_hours",
    currentAppVersion: "current_app_version",
    latestAppVersion: "latest_app_version",
    targetUpgradeVersions: "target_upgrade_versions",
    potentialBreakingChanges: "potential_breaking_changes",
    legacyAuthCustomRoles: "legacy_auth_custom_roles",
    extensionDependentObjects: "extension_dependent_objects",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectUpgradeEligibilityResponse$ {
  /** @deprecated use `ProjectUpgradeEligibilityResponse$inboundSchema` instead. */
  export const inboundSchema = ProjectUpgradeEligibilityResponse$inboundSchema;
  /** @deprecated use `ProjectUpgradeEligibilityResponse$outboundSchema` instead. */
  export const outboundSchema =
    ProjectUpgradeEligibilityResponse$outboundSchema;
  /** @deprecated use `ProjectUpgradeEligibilityResponse$Outbound` instead. */
  export type Outbound = ProjectUpgradeEligibilityResponse$Outbound;
}

export function projectUpgradeEligibilityResponseToJSON(
  projectUpgradeEligibilityResponse: ProjectUpgradeEligibilityResponse,
): string {
  return JSON.stringify(
    ProjectUpgradeEligibilityResponse$outboundSchema.parse(
      projectUpgradeEligibilityResponse,
    ),
  );
}

export function projectUpgradeEligibilityResponseFromJSON(
  jsonString: string,
): SafeParseResult<ProjectUpgradeEligibilityResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectUpgradeEligibilityResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectUpgradeEligibilityResponse' from JSON`,
  );
}
