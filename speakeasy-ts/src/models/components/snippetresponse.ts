/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SnippetContent,
  SnippetContent$inboundSchema,
  SnippetContent$Outbound,
  SnippetContent$outboundSchema,
} from "./snippetcontent.js";
import {
  SnippetProject,
  SnippetProject$inboundSchema,
  SnippetProject$Outbound,
  SnippetProject$outboundSchema,
} from "./snippetproject.js";
import {
  SnippetUser,
  SnippetUser$inboundSchema,
  SnippetUser$Outbound,
  SnippetUser$outboundSchema,
} from "./snippetuser.js";

export const SnippetResponseType = {
  Sql: "sql",
} as const;
export type SnippetResponseType = ClosedEnum<typeof SnippetResponseType>;

export const SnippetResponseVisibility = {
  User: "user",
  Project: "project",
  Org: "org",
  Public: "public",
} as const;
export type SnippetResponseVisibility = ClosedEnum<
  typeof SnippetResponseVisibility
>;

export type SnippetResponse = {
  id: string;
  insertedAt: string;
  updatedAt: string;
  type: SnippetResponseType;
  visibility: SnippetResponseVisibility;
  name: string;
  description?: string | undefined;
  project: SnippetProject;
  owner: SnippetUser;
  updatedBy: SnippetUser;
  content: SnippetContent;
};

/** @internal */
export const SnippetResponseType$inboundSchema: z.ZodNativeEnum<
  typeof SnippetResponseType
> = z.nativeEnum(SnippetResponseType);

/** @internal */
export const SnippetResponseType$outboundSchema: z.ZodNativeEnum<
  typeof SnippetResponseType
> = SnippetResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SnippetResponseType$ {
  /** @deprecated use `SnippetResponseType$inboundSchema` instead. */
  export const inboundSchema = SnippetResponseType$inboundSchema;
  /** @deprecated use `SnippetResponseType$outboundSchema` instead. */
  export const outboundSchema = SnippetResponseType$outboundSchema;
}

/** @internal */
export const SnippetResponseVisibility$inboundSchema: z.ZodNativeEnum<
  typeof SnippetResponseVisibility
> = z.nativeEnum(SnippetResponseVisibility);

/** @internal */
export const SnippetResponseVisibility$outboundSchema: z.ZodNativeEnum<
  typeof SnippetResponseVisibility
> = SnippetResponseVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SnippetResponseVisibility$ {
  /** @deprecated use `SnippetResponseVisibility$inboundSchema` instead. */
  export const inboundSchema = SnippetResponseVisibility$inboundSchema;
  /** @deprecated use `SnippetResponseVisibility$outboundSchema` instead. */
  export const outboundSchema = SnippetResponseVisibility$outboundSchema;
}

/** @internal */
export const SnippetResponse$inboundSchema: z.ZodType<
  SnippetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  inserted_at: z.string(),
  updated_at: z.string(),
  type: SnippetResponseType$inboundSchema,
  visibility: SnippetResponseVisibility$inboundSchema,
  name: z.string(),
  description: z.string().optional(),
  project: SnippetProject$inboundSchema,
  owner: SnippetUser$inboundSchema,
  updated_by: SnippetUser$inboundSchema,
  content: SnippetContent$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "inserted_at": "insertedAt",
    "updated_at": "updatedAt",
    "updated_by": "updatedBy",
  });
});

/** @internal */
export type SnippetResponse$Outbound = {
  id: string;
  inserted_at: string;
  updated_at: string;
  type: string;
  visibility: string;
  name: string;
  description?: string | undefined;
  project: SnippetProject$Outbound;
  owner: SnippetUser$Outbound;
  updated_by: SnippetUser$Outbound;
  content: SnippetContent$Outbound;
};

/** @internal */
export const SnippetResponse$outboundSchema: z.ZodType<
  SnippetResponse$Outbound,
  z.ZodTypeDef,
  SnippetResponse
> = z.object({
  id: z.string(),
  insertedAt: z.string(),
  updatedAt: z.string(),
  type: SnippetResponseType$outboundSchema,
  visibility: SnippetResponseVisibility$outboundSchema,
  name: z.string(),
  description: z.string().optional(),
  project: SnippetProject$outboundSchema,
  owner: SnippetUser$outboundSchema,
  updatedBy: SnippetUser$outboundSchema,
  content: SnippetContent$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    insertedAt: "inserted_at",
    updatedAt: "updated_at",
    updatedBy: "updated_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SnippetResponse$ {
  /** @deprecated use `SnippetResponse$inboundSchema` instead. */
  export const inboundSchema = SnippetResponse$inboundSchema;
  /** @deprecated use `SnippetResponse$outboundSchema` instead. */
  export const outboundSchema = SnippetResponse$outboundSchema;
  /** @deprecated use `SnippetResponse$Outbound` instead. */
  export type Outbound = SnippetResponse$Outbound;
}

export function snippetResponseToJSON(
  snippetResponse: SnippetResponse,
): string {
  return JSON.stringify(SnippetResponse$outboundSchema.parse(snippetResponse));
}

export function snippetResponseFromJSON(
  jsonString: string,
): SafeParseResult<SnippetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SnippetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SnippetResponse' from JSON`,
  );
}
