// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TokenType string

const (
	TokenTypeBearer TokenType = "Bearer"
)

func (e TokenType) ToPointer() *TokenType {
	return &e
}
func (e *TokenType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Bearer":
		*e = TokenType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TokenType: %v", v)
	}
}

type OAuthTokenResponse struct {
	ExpiresIn    int64     `json:"expires_in"`
	TokenType    TokenType `json:"token_type"`
	AccessToken  string    `json:"access_token"`
	RefreshToken string    `json:"refresh_token"`
}

func (o *OAuthTokenResponse) GetExpiresIn() int64 {
	if o == nil {
		return 0
	}
	return o.ExpiresIn
}

func (o *OAuthTokenResponse) GetTokenType() TokenType {
	if o == nil {
		return TokenType("")
	}
	return o.TokenType
}

func (o *OAuthTokenResponse) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *OAuthTokenResponse) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}
