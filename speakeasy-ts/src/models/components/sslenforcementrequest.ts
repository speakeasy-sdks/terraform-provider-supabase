/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SslEnforcements,
  SslEnforcements$inboundSchema,
  SslEnforcements$Outbound,
  SslEnforcements$outboundSchema,
} from "./sslenforcements.js";

export type SslEnforcementRequest = {
  requestedConfig: SslEnforcements;
};

/** @internal */
export const SslEnforcementRequest$inboundSchema: z.ZodType<
  SslEnforcementRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  requestedConfig: SslEnforcements$inboundSchema,
});

/** @internal */
export type SslEnforcementRequest$Outbound = {
  requestedConfig: SslEnforcements$Outbound;
};

/** @internal */
export const SslEnforcementRequest$outboundSchema: z.ZodType<
  SslEnforcementRequest$Outbound,
  z.ZodTypeDef,
  SslEnforcementRequest
> = z.object({
  requestedConfig: SslEnforcements$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SslEnforcementRequest$ {
  /** @deprecated use `SslEnforcementRequest$inboundSchema` instead. */
  export const inboundSchema = SslEnforcementRequest$inboundSchema;
  /** @deprecated use `SslEnforcementRequest$outboundSchema` instead. */
  export const outboundSchema = SslEnforcementRequest$outboundSchema;
  /** @deprecated use `SslEnforcementRequest$Outbound` instead. */
  export type Outbound = SslEnforcementRequest$Outbound;
}

export function sslEnforcementRequestToJSON(
  sslEnforcementRequest: SslEnforcementRequest,
): string {
  return JSON.stringify(
    SslEnforcementRequest$outboundSchema.parse(sslEnforcementRequest),
  );
}

export function sslEnforcementRequestFromJSON(
  jsonString: string,
): SafeParseResult<SslEnforcementRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SslEnforcementRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SslEnforcementRequest' from JSON`,
  );
}
