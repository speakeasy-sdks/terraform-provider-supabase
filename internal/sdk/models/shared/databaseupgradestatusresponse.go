// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DatabaseUpgradeStatusResponseStatus int64

const (
	DatabaseUpgradeStatusResponseStatusZero DatabaseUpgradeStatusResponseStatus = 0
	DatabaseUpgradeStatusResponseStatusOne  DatabaseUpgradeStatusResponseStatus = 1
	DatabaseUpgradeStatusResponseStatusTwo  DatabaseUpgradeStatusResponseStatus = 2
)

func (e DatabaseUpgradeStatusResponseStatus) ToPointer() *DatabaseUpgradeStatusResponseStatus {
	return &e
}
func (e *DatabaseUpgradeStatusResponseStatus) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		*e = DatabaseUpgradeStatusResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DatabaseUpgradeStatusResponseStatus: %v", v)
	}
}

type Error string

const (
	ErrorOneUpgradedInstanceLaunchFailed                 Error = "1_upgraded_instance_launch_failed"
	ErrorTwoVolumeDetachchmentFromUpgradedInstanceFailed Error = "2_volume_detachchment_from_upgraded_instance_failed"
	ErrorThreeVolumeAttachmentToOriginalInstanceFailed   Error = "3_volume_attachment_to_original_instance_failed"
	ErrorFourDataUpgradeInitiationFailed                 Error = "4_data_upgrade_initiation_failed"
	ErrorFiveDataUpgradeCompletionFailed                 Error = "5_data_upgrade_completion_failed"
	ErrorSixVolumeDetachchmentFromOriginalInstanceFailed Error = "6_volume_detachchment_from_original_instance_failed"
	ErrorSevenVolumeAttachmentToUpgradedInstanceFailed   Error = "7_volume_attachment_to_upgraded_instance_failed"
	ErrorEightUpgradeCompletionFailed                    Error = "8_upgrade_completion_failed"
	ErrorNinePostPhysicalBackupFailed                    Error = "9_post_physical_backup_failed"
)

func (e Error) ToPointer() *Error {
	return &e
}
func (e *Error) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1_upgraded_instance_launch_failed":
		fallthrough
	case "2_volume_detachchment_from_upgraded_instance_failed":
		fallthrough
	case "3_volume_attachment_to_original_instance_failed":
		fallthrough
	case "4_data_upgrade_initiation_failed":
		fallthrough
	case "5_data_upgrade_completion_failed":
		fallthrough
	case "6_volume_detachchment_from_original_instance_failed":
		fallthrough
	case "7_volume_attachment_to_upgraded_instance_failed":
		fallthrough
	case "8_upgrade_completion_failed":
		fallthrough
	case "9_post_physical_backup_failed":
		*e = Error(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Error: %v", v)
	}
}

type Progress string

const (
	ProgressZeroRequested                           Progress = "0_requested"
	ProgressOneStarted                              Progress = "1_started"
	ProgressTwoLaunchedUpgradedInstance             Progress = "2_launched_upgraded_instance"
	ProgressThreeDetachedVolumeFromUpgradedInstance Progress = "3_detached_volume_from_upgraded_instance"
	ProgressFourAttachedVolumeToOriginalInstance    Progress = "4_attached_volume_to_original_instance"
	ProgressFiveInitiatedDataUpgrade                Progress = "5_initiated_data_upgrade"
	ProgressSixCompletedDataUpgrade                 Progress = "6_completed_data_upgrade"
	ProgressSevenDetachedVolumeFromOriginalInstance Progress = "7_detached_volume_from_original_instance"
	ProgressEightAttachedVolumeToUpgradedInstance   Progress = "8_attached_volume_to_upgraded_instance"
	ProgressNineCompletedUpgrade                    Progress = "9_completed_upgrade"
	ProgressTenCompletedPostPhysicalBackup          Progress = "10_completed_post_physical_backup"
)

func (e Progress) ToPointer() *Progress {
	return &e
}
func (e *Progress) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "0_requested":
		fallthrough
	case "1_started":
		fallthrough
	case "2_launched_upgraded_instance":
		fallthrough
	case "3_detached_volume_from_upgraded_instance":
		fallthrough
	case "4_attached_volume_to_original_instance":
		fallthrough
	case "5_initiated_data_upgrade":
		fallthrough
	case "6_completed_data_upgrade":
		fallthrough
	case "7_detached_volume_from_original_instance":
		fallthrough
	case "8_attached_volume_to_upgraded_instance":
		fallthrough
	case "9_completed_upgrade":
		fallthrough
	case "10_completed_post_physical_backup":
		*e = Progress(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Progress: %v", v)
	}
}

type DatabaseUpgradeStatus struct {
	TargetVersion  int64                               `json:"target_version"`
	Status         DatabaseUpgradeStatusResponseStatus `json:"status"`
	InitiatedAt    string                              `json:"initiated_at"`
	LatestStatusAt string                              `json:"latest_status_at"`
	Error          *Error                              `json:"error,omitempty"`
	Progress       *Progress                           `json:"progress,omitempty"`
}

func (o *DatabaseUpgradeStatus) GetTargetVersion() int64 {
	if o == nil {
		return 0
	}
	return o.TargetVersion
}

func (o *DatabaseUpgradeStatus) GetStatus() DatabaseUpgradeStatusResponseStatus {
	if o == nil {
		return DatabaseUpgradeStatusResponseStatus(0)
	}
	return o.Status
}

func (o *DatabaseUpgradeStatus) GetInitiatedAt() string {
	if o == nil {
		return ""
	}
	return o.InitiatedAt
}

func (o *DatabaseUpgradeStatus) GetLatestStatusAt() string {
	if o == nil {
		return ""
	}
	return o.LatestStatusAt
}

func (o *DatabaseUpgradeStatus) GetError() *Error {
	if o == nil {
		return nil
	}
	return o.Error
}

func (o *DatabaseUpgradeStatus) GetProgress() *Progress {
	if o == nil {
		return nil
	}
	return o.Progress
}

type DatabaseUpgradeStatusResponse struct {
	DatabaseUpgradeStatus *DatabaseUpgradeStatus `json:"databaseUpgradeStatus"`
}

func (o *DatabaseUpgradeStatusResponse) GetDatabaseUpgradeStatus() *DatabaseUpgradeStatus {
	if o == nil {
		return nil
	}
	return o.DatabaseUpgradeStatus
}
