/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { environmentsCreateBranch } from "../funcs/environmentsCreateBranch.js";
import { environmentsDeleteBranch } from "../funcs/environmentsDeleteBranch.js";
import { environmentsDisablePreviewBranching } from "../funcs/environmentsDisablePreviewBranching.js";
import { environmentsGetBranchConfig } from "../funcs/environmentsGetBranchConfig.js";
import { environmentsListBranches } from "../funcs/environmentsListBranches.js";
import { environmentsResetBranch } from "../funcs/environmentsResetBranch.js";
import { environmentsUpdateBranchConfig } from "../funcs/environmentsUpdateBranchConfig.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Environments extends ClientSDK {
  /**
   * Get database branch config
   *
   * @remarks
   * Fetches configura.   tions of the specified database branch
   */
  async getBranchConfig(
    request: operations.V1GetABranchConfigRequest,
    options?: RequestOptions,
  ): Promise<components.BranchDetailResponse> {
    return unwrapAsync(environmentsGetBranchConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Update database branch config
   *
   * @remarks
   * Updates the configuration of the specified database branch
   */
  async updateBranchConfig(
    request: operations.V1UpdateABranchConfigRequest,
    options?: RequestOptions,
  ): Promise<components.BranchResponse> {
    return unwrapAsync(environmentsUpdateBranchConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a database branch
   *
   * @remarks
   * Deletes the specified database branch
   */
  async deleteBranch(
    request: operations.V1DeleteABranchRequest,
    options?: RequestOptions,
  ): Promise<components.BranchDeleteResponse> {
    return unwrapAsync(environmentsDeleteBranch(
      this,
      request,
      options,
    ));
  }

  /**
   * Resets a database branch
   *
   * @remarks
   * Resets the specified database branch
   */
  async resetBranch(
    request: operations.V1ResetABranchRequest,
    options?: RequestOptions,
  ): Promise<components.BranchResetResponse> {
    return unwrapAsync(environmentsResetBranch(
      this,
      request,
      options,
    ));
  }

  /**
   * List all database branches
   *
   * @remarks
   * Returns all database branches of the specified project.
   */
  async listBranches(
    request: operations.V1ListAllBranchesRequest,
    options?: RequestOptions,
  ): Promise<Array<components.BranchResponse>> {
    return unwrapAsync(environmentsListBranches(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a database branch
   *
   * @remarks
   * Creates a database branch from the specified project.
   */
  async createBranch(
    request: operations.V1CreateABranchRequest,
    options?: RequestOptions,
  ): Promise<components.BranchResponse> {
    return unwrapAsync(environmentsCreateBranch(
      this,
      request,
      options,
    ));
  }

  /**
   * Disables preview branching
   *
   * @remarks
   * Disables preview branching for the specified project
   */
  async disablePreviewBranching(
    request: operations.V1DisablePreviewBranchingRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(environmentsDisablePreviewBranching(
      this,
      request,
      options,
    ));
  }
}
