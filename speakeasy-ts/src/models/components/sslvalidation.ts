/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ValidationError,
  ValidationError$inboundSchema,
  ValidationError$Outbound,
  ValidationError$outboundSchema,
} from "./validationerror.js";
import {
  ValidationRecord,
  ValidationRecord$inboundSchema,
  ValidationRecord$Outbound,
  ValidationRecord$outboundSchema,
} from "./validationrecord.js";

export type SslValidation = {
  status: string;
  validationRecords: Array<ValidationRecord>;
  validationErrors?: Array<ValidationError> | undefined;
};

/** @internal */
export const SslValidation$inboundSchema: z.ZodType<
  SslValidation,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string(),
  validation_records: z.array(ValidationRecord$inboundSchema),
  validation_errors: z.array(ValidationError$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "validation_records": "validationRecords",
    "validation_errors": "validationErrors",
  });
});

/** @internal */
export type SslValidation$Outbound = {
  status: string;
  validation_records: Array<ValidationRecord$Outbound>;
  validation_errors?: Array<ValidationError$Outbound> | undefined;
};

/** @internal */
export const SslValidation$outboundSchema: z.ZodType<
  SslValidation$Outbound,
  z.ZodTypeDef,
  SslValidation
> = z.object({
  status: z.string(),
  validationRecords: z.array(ValidationRecord$outboundSchema),
  validationErrors: z.array(ValidationError$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    validationRecords: "validation_records",
    validationErrors: "validation_errors",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SslValidation$ {
  /** @deprecated use `SslValidation$inboundSchema` instead. */
  export const inboundSchema = SslValidation$inboundSchema;
  /** @deprecated use `SslValidation$outboundSchema` instead. */
  export const outboundSchema = SslValidation$outboundSchema;
  /** @deprecated use `SslValidation$Outbound` instead. */
  export type Outbound = SslValidation$Outbound;
}

export function sslValidationToJSON(sslValidation: SslValidation): string {
  return JSON.stringify(SslValidation$outboundSchema.parse(sslValidation));
}

export function sslValidationFromJSON(
  jsonString: string,
): SafeParseResult<SslValidation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SslValidation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SslValidation' from JSON`,
  );
}
