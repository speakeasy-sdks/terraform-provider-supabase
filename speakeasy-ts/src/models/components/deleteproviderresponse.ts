/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Domain,
  Domain$inboundSchema,
  Domain$Outbound,
  Domain$outboundSchema,
} from "./domain.js";
import {
  SamlDescriptor,
  SamlDescriptor$inboundSchema,
  SamlDescriptor$Outbound,
  SamlDescriptor$outboundSchema,
} from "./samldescriptor.js";

export type DeleteProviderResponse = {
  id: string;
  saml?: SamlDescriptor | undefined;
  domains?: Array<Domain> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const DeleteProviderResponse$inboundSchema: z.ZodType<
  DeleteProviderResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  saml: SamlDescriptor$inboundSchema.optional(),
  domains: z.array(Domain$inboundSchema).optional(),
  created_at: z.string().optional(),
  updated_at: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type DeleteProviderResponse$Outbound = {
  id: string;
  saml?: SamlDescriptor$Outbound | undefined;
  domains?: Array<Domain$Outbound> | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const DeleteProviderResponse$outboundSchema: z.ZodType<
  DeleteProviderResponse$Outbound,
  z.ZodTypeDef,
  DeleteProviderResponse
> = z.object({
  id: z.string(),
  saml: SamlDescriptor$outboundSchema.optional(),
  domains: z.array(Domain$outboundSchema).optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteProviderResponse$ {
  /** @deprecated use `DeleteProviderResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteProviderResponse$inboundSchema;
  /** @deprecated use `DeleteProviderResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteProviderResponse$outboundSchema;
  /** @deprecated use `DeleteProviderResponse$Outbound` instead. */
  export type Outbound = DeleteProviderResponse$Outbound;
}

export function deleteProviderResponseToJSON(
  deleteProviderResponse: DeleteProviderResponse,
): string {
  return JSON.stringify(
    DeleteProviderResponse$outboundSchema.parse(deleteProviderResponse),
  );
}

export function deleteProviderResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteProviderResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteProviderResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteProviderResponse' from JSON`,
  );
}
