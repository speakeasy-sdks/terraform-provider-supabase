/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTPAForProjectRequest = {
  /**
   * Project ref
   */
  ref: string;
  tpaId: string;
};

/** @internal */
export const GetTPAForProjectRequest$inboundSchema: z.ZodType<
  GetTPAForProjectRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ref: z.string(),
  tpa_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "tpa_id": "tpaId",
  });
});

/** @internal */
export type GetTPAForProjectRequest$Outbound = {
  ref: string;
  tpa_id: string;
};

/** @internal */
export const GetTPAForProjectRequest$outboundSchema: z.ZodType<
  GetTPAForProjectRequest$Outbound,
  z.ZodTypeDef,
  GetTPAForProjectRequest
> = z.object({
  ref: z.string(),
  tpaId: z.string(),
}).transform((v) => {
  return remap$(v, {
    tpaId: "tpa_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTPAForProjectRequest$ {
  /** @deprecated use `GetTPAForProjectRequest$inboundSchema` instead. */
  export const inboundSchema = GetTPAForProjectRequest$inboundSchema;
  /** @deprecated use `GetTPAForProjectRequest$outboundSchema` instead. */
  export const outboundSchema = GetTPAForProjectRequest$outboundSchema;
  /** @deprecated use `GetTPAForProjectRequest$Outbound` instead. */
  export type Outbound = GetTPAForProjectRequest$Outbound;
}

export function getTPAForProjectRequestToJSON(
  getTPAForProjectRequest: GetTPAForProjectRequest,
): string {
  return JSON.stringify(
    GetTPAForProjectRequest$outboundSchema.parse(getTPAForProjectRequest),
  );
}

export function getTPAForProjectRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTPAForProjectRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTPAForProjectRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTPAForProjectRequest' from JSON`,
  );
}
