/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1RestorePitrBackupRequest = {
  /**
   * Project ref
   */
  ref: string;
  v1RestorePitrBody: components.V1RestorePitrBody;
};

/** @internal */
export const V1RestorePitrBackupRequest$inboundSchema: z.ZodType<
  V1RestorePitrBackupRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ref: z.string(),
  V1RestorePitrBody: components.V1RestorePitrBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "V1RestorePitrBody": "v1RestorePitrBody",
  });
});

/** @internal */
export type V1RestorePitrBackupRequest$Outbound = {
  ref: string;
  V1RestorePitrBody: components.V1RestorePitrBody$Outbound;
};

/** @internal */
export const V1RestorePitrBackupRequest$outboundSchema: z.ZodType<
  V1RestorePitrBackupRequest$Outbound,
  z.ZodTypeDef,
  V1RestorePitrBackupRequest
> = z.object({
  ref: z.string(),
  v1RestorePitrBody: components.V1RestorePitrBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    v1RestorePitrBody: "V1RestorePitrBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1RestorePitrBackupRequest$ {
  /** @deprecated use `V1RestorePitrBackupRequest$inboundSchema` instead. */
  export const inboundSchema = V1RestorePitrBackupRequest$inboundSchema;
  /** @deprecated use `V1RestorePitrBackupRequest$outboundSchema` instead. */
  export const outboundSchema = V1RestorePitrBackupRequest$outboundSchema;
  /** @deprecated use `V1RestorePitrBackupRequest$Outbound` instead. */
  export type Outbound = V1RestorePitrBackupRequest$Outbound;
}

export function v1RestorePitrBackupRequestToJSON(
  v1RestorePitrBackupRequest: V1RestorePitrBackupRequest,
): string {
  return JSON.stringify(
    V1RestorePitrBackupRequest$outboundSchema.parse(v1RestorePitrBackupRequest),
  );
}

export function v1RestorePitrBackupRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1RestorePitrBackupRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1RestorePitrBackupRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1RestorePitrBackupRequest' from JSON`,
  );
}
