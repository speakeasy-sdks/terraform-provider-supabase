/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AttributeValue,
  AttributeValue$inboundSchema,
  AttributeValue$Outbound,
  AttributeValue$outboundSchema,
} from "./attributevalue.js";

export type AttributeMapping = {
  keys: { [k: string]: AttributeValue };
};

/** @internal */
export const AttributeMapping$inboundSchema: z.ZodType<
  AttributeMapping,
  z.ZodTypeDef,
  unknown
> = z.object({
  keys: z.record(AttributeValue$inboundSchema),
});

/** @internal */
export type AttributeMapping$Outbound = {
  keys: { [k: string]: AttributeValue$Outbound };
};

/** @internal */
export const AttributeMapping$outboundSchema: z.ZodType<
  AttributeMapping$Outbound,
  z.ZodTypeDef,
  AttributeMapping
> = z.object({
  keys: z.record(AttributeValue$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttributeMapping$ {
  /** @deprecated use `AttributeMapping$inboundSchema` instead. */
  export const inboundSchema = AttributeMapping$inboundSchema;
  /** @deprecated use `AttributeMapping$outboundSchema` instead. */
  export const outboundSchema = AttributeMapping$outboundSchema;
  /** @deprecated use `AttributeMapping$Outbound` instead. */
  export type Outbound = AttributeMapping$Outbound;
}

export function attributeMappingToJSON(
  attributeMapping: AttributeMapping,
): string {
  return JSON.stringify(
    AttributeMapping$outboundSchema.parse(attributeMapping),
  );
}

export function attributeMappingFromJSON(
  jsonString: string,
): SafeParseResult<AttributeMapping, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttributeMapping$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttributeMapping' from JSON`,
  );
}
