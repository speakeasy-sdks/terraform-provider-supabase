/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoveReadReplicaBody = {
  databaseIdentifier: string;
};

/** @internal */
export const RemoveReadReplicaBody$inboundSchema: z.ZodType<
  RemoveReadReplicaBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  database_identifier: z.string(),
}).transform((v) => {
  return remap$(v, {
    "database_identifier": "databaseIdentifier",
  });
});

/** @internal */
export type RemoveReadReplicaBody$Outbound = {
  database_identifier: string;
};

/** @internal */
export const RemoveReadReplicaBody$outboundSchema: z.ZodType<
  RemoveReadReplicaBody$Outbound,
  z.ZodTypeDef,
  RemoveReadReplicaBody
> = z.object({
  databaseIdentifier: z.string(),
}).transform((v) => {
  return remap$(v, {
    databaseIdentifier: "database_identifier",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveReadReplicaBody$ {
  /** @deprecated use `RemoveReadReplicaBody$inboundSchema` instead. */
  export const inboundSchema = RemoveReadReplicaBody$inboundSchema;
  /** @deprecated use `RemoveReadReplicaBody$outboundSchema` instead. */
  export const outboundSchema = RemoveReadReplicaBody$outboundSchema;
  /** @deprecated use `RemoveReadReplicaBody$Outbound` instead. */
  export type Outbound = RemoveReadReplicaBody$Outbound;
}

export function removeReadReplicaBodyToJSON(
  removeReadReplicaBody: RemoveReadReplicaBody,
): string {
  return JSON.stringify(
    RemoveReadReplicaBody$outboundSchema.parse(removeReadReplicaBody),
  );
}

export function removeReadReplicaBodyFromJSON(
  jsonString: string,
): SafeParseResult<RemoveReadReplicaBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveReadReplicaBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveReadReplicaBody' from JSON`,
  );
}
