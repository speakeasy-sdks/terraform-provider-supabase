/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ApiKeyResponseType = {
  Publishable: "publishable",
  Secret: "secret",
  Legacy: "legacy",
} as const;
export type ApiKeyResponseType = ClosedEnum<typeof ApiKeyResponseType>;

export type SecretJwtTemplate = {
  role: string;
};

export type ApiKeyResponse = {
  type?: ApiKeyResponseType | null | undefined;
  name: string;
  apiKey: string;
  id?: string | null | undefined;
  prefix?: string | null | undefined;
  description?: string | null | undefined;
  hash?: string | null | undefined;
  secretJwtTemplate?: SecretJwtTemplate | null | undefined;
  insertedAt?: string | null | undefined;
  updatedAt?: string | null | undefined;
};

/** @internal */
export const ApiKeyResponseType$inboundSchema: z.ZodNativeEnum<
  typeof ApiKeyResponseType
> = z.nativeEnum(ApiKeyResponseType);

/** @internal */
export const ApiKeyResponseType$outboundSchema: z.ZodNativeEnum<
  typeof ApiKeyResponseType
> = ApiKeyResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiKeyResponseType$ {
  /** @deprecated use `ApiKeyResponseType$inboundSchema` instead. */
  export const inboundSchema = ApiKeyResponseType$inboundSchema;
  /** @deprecated use `ApiKeyResponseType$outboundSchema` instead. */
  export const outboundSchema = ApiKeyResponseType$outboundSchema;
}

/** @internal */
export const SecretJwtTemplate$inboundSchema: z.ZodType<
  SecretJwtTemplate,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: z.string(),
});

/** @internal */
export type SecretJwtTemplate$Outbound = {
  role: string;
};

/** @internal */
export const SecretJwtTemplate$outboundSchema: z.ZodType<
  SecretJwtTemplate$Outbound,
  z.ZodTypeDef,
  SecretJwtTemplate
> = z.object({
  role: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SecretJwtTemplate$ {
  /** @deprecated use `SecretJwtTemplate$inboundSchema` instead. */
  export const inboundSchema = SecretJwtTemplate$inboundSchema;
  /** @deprecated use `SecretJwtTemplate$outboundSchema` instead. */
  export const outboundSchema = SecretJwtTemplate$outboundSchema;
  /** @deprecated use `SecretJwtTemplate$Outbound` instead. */
  export type Outbound = SecretJwtTemplate$Outbound;
}

export function secretJwtTemplateToJSON(
  secretJwtTemplate: SecretJwtTemplate,
): string {
  return JSON.stringify(
    SecretJwtTemplate$outboundSchema.parse(secretJwtTemplate),
  );
}

export function secretJwtTemplateFromJSON(
  jsonString: string,
): SafeParseResult<SecretJwtTemplate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SecretJwtTemplate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SecretJwtTemplate' from JSON`,
  );
}

/** @internal */
export const ApiKeyResponse$inboundSchema: z.ZodType<
  ApiKeyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.nullable(ApiKeyResponseType$inboundSchema).optional(),
  name: z.string(),
  api_key: z.string(),
  id: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  hash: z.nullable(z.string()).optional(),
  secret_jwt_template: z.nullable(z.lazy(() => SecretJwtTemplate$inboundSchema))
    .optional(),
  inserted_at: z.nullable(z.string()).optional(),
  updated_at: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "api_key": "apiKey",
    "secret_jwt_template": "secretJwtTemplate",
    "inserted_at": "insertedAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ApiKeyResponse$Outbound = {
  type?: string | null | undefined;
  name: string;
  api_key: string;
  id?: string | null | undefined;
  prefix?: string | null | undefined;
  description?: string | null | undefined;
  hash?: string | null | undefined;
  secret_jwt_template?: SecretJwtTemplate$Outbound | null | undefined;
  inserted_at?: string | null | undefined;
  updated_at?: string | null | undefined;
};

/** @internal */
export const ApiKeyResponse$outboundSchema: z.ZodType<
  ApiKeyResponse$Outbound,
  z.ZodTypeDef,
  ApiKeyResponse
> = z.object({
  type: z.nullable(ApiKeyResponseType$outboundSchema).optional(),
  name: z.string(),
  apiKey: z.string(),
  id: z.nullable(z.string()).optional(),
  prefix: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  hash: z.nullable(z.string()).optional(),
  secretJwtTemplate: z.nullable(z.lazy(() => SecretJwtTemplate$outboundSchema))
    .optional(),
  insertedAt: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    apiKey: "api_key",
    secretJwtTemplate: "secret_jwt_template",
    insertedAt: "inserted_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiKeyResponse$ {
  /** @deprecated use `ApiKeyResponse$inboundSchema` instead. */
  export const inboundSchema = ApiKeyResponse$inboundSchema;
  /** @deprecated use `ApiKeyResponse$outboundSchema` instead. */
  export const outboundSchema = ApiKeyResponse$outboundSchema;
  /** @deprecated use `ApiKeyResponse$Outbound` instead. */
  export type Outbound = ApiKeyResponse$Outbound;
}

export function apiKeyResponseToJSON(apiKeyResponse: ApiKeyResponse): string {
  return JSON.stringify(ApiKeyResponse$outboundSchema.parse(apiKeyResponse));
}

export function apiKeyResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiKeyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiKeyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiKeyResponse' from JSON`,
  );
}
