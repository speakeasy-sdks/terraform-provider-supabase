/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1UpdateSslEnforcementConfigRequest = {
  /**
   * Project ref
   */
  ref: string;
  sslEnforcementRequest: components.SslEnforcementRequest;
};

/** @internal */
export const V1UpdateSslEnforcementConfigRequest$inboundSchema: z.ZodType<
  V1UpdateSslEnforcementConfigRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ref: z.string(),
  SslEnforcementRequest: components.SslEnforcementRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "SslEnforcementRequest": "sslEnforcementRequest",
  });
});

/** @internal */
export type V1UpdateSslEnforcementConfigRequest$Outbound = {
  ref: string;
  SslEnforcementRequest: components.SslEnforcementRequest$Outbound;
};

/** @internal */
export const V1UpdateSslEnforcementConfigRequest$outboundSchema: z.ZodType<
  V1UpdateSslEnforcementConfigRequest$Outbound,
  z.ZodTypeDef,
  V1UpdateSslEnforcementConfigRequest
> = z.object({
  ref: z.string(),
  sslEnforcementRequest: components.SslEnforcementRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    sslEnforcementRequest: "SslEnforcementRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1UpdateSslEnforcementConfigRequest$ {
  /** @deprecated use `V1UpdateSslEnforcementConfigRequest$inboundSchema` instead. */
  export const inboundSchema =
    V1UpdateSslEnforcementConfigRequest$inboundSchema;
  /** @deprecated use `V1UpdateSslEnforcementConfigRequest$outboundSchema` instead. */
  export const outboundSchema =
    V1UpdateSslEnforcementConfigRequest$outboundSchema;
  /** @deprecated use `V1UpdateSslEnforcementConfigRequest$Outbound` instead. */
  export type Outbound = V1UpdateSslEnforcementConfigRequest$Outbound;
}

export function v1UpdateSslEnforcementConfigRequestToJSON(
  v1UpdateSslEnforcementConfigRequest: V1UpdateSslEnforcementConfigRequest,
): string {
  return JSON.stringify(
    V1UpdateSslEnforcementConfigRequest$outboundSchema.parse(
      v1UpdateSslEnforcementConfigRequest,
    ),
  );
}

export function v1UpdateSslEnforcementConfigRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1UpdateSslEnforcementConfigRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V1UpdateSslEnforcementConfigRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1UpdateSslEnforcementConfigRequest' from JSON`,
  );
}
