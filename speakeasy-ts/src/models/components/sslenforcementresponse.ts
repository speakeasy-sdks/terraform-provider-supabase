/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SslEnforcements,
  SslEnforcements$inboundSchema,
  SslEnforcements$Outbound,
  SslEnforcements$outboundSchema,
} from "./sslenforcements.js";

export type SslEnforcementResponse = {
  currentConfig: SslEnforcements;
  appliedSuccessfully: boolean;
};

/** @internal */
export const SslEnforcementResponse$inboundSchema: z.ZodType<
  SslEnforcementResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  currentConfig: SslEnforcements$inboundSchema,
  appliedSuccessfully: z.boolean(),
});

/** @internal */
export type SslEnforcementResponse$Outbound = {
  currentConfig: SslEnforcements$Outbound;
  appliedSuccessfully: boolean;
};

/** @internal */
export const SslEnforcementResponse$outboundSchema: z.ZodType<
  SslEnforcementResponse$Outbound,
  z.ZodTypeDef,
  SslEnforcementResponse
> = z.object({
  currentConfig: SslEnforcements$outboundSchema,
  appliedSuccessfully: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SslEnforcementResponse$ {
  /** @deprecated use `SslEnforcementResponse$inboundSchema` instead. */
  export const inboundSchema = SslEnforcementResponse$inboundSchema;
  /** @deprecated use `SslEnforcementResponse$outboundSchema` instead. */
  export const outboundSchema = SslEnforcementResponse$outboundSchema;
  /** @deprecated use `SslEnforcementResponse$Outbound` instead. */
  export type Outbound = SslEnforcementResponse$Outbound;
}

export function sslEnforcementResponseToJSON(
  sslEnforcementResponse: SslEnforcementResponse,
): string {
  return JSON.stringify(
    SslEnforcementResponse$outboundSchema.parse(sslEnforcementResponse),
  );
}

export function sslEnforcementResponseFromJSON(
  jsonString: string,
): SafeParseResult<SslEnforcementResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SslEnforcementResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SslEnforcementResponse' from JSON`,
  );
}
