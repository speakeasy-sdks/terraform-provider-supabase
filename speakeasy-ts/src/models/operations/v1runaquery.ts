/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1RunAQueryRequest = {
  /**
   * Project ref
   */
  ref: string;
  v1RunQueryBody: components.V1RunQueryBody;
};

export type V1RunAQueryResponseBody = {};

/** @internal */
export const V1RunAQueryRequest$inboundSchema: z.ZodType<
  V1RunAQueryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ref: z.string(),
  V1RunQueryBody: components.V1RunQueryBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "V1RunQueryBody": "v1RunQueryBody",
  });
});

/** @internal */
export type V1RunAQueryRequest$Outbound = {
  ref: string;
  V1RunQueryBody: components.V1RunQueryBody$Outbound;
};

/** @internal */
export const V1RunAQueryRequest$outboundSchema: z.ZodType<
  V1RunAQueryRequest$Outbound,
  z.ZodTypeDef,
  V1RunAQueryRequest
> = z.object({
  ref: z.string(),
  v1RunQueryBody: components.V1RunQueryBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    v1RunQueryBody: "V1RunQueryBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1RunAQueryRequest$ {
  /** @deprecated use `V1RunAQueryRequest$inboundSchema` instead. */
  export const inboundSchema = V1RunAQueryRequest$inboundSchema;
  /** @deprecated use `V1RunAQueryRequest$outboundSchema` instead. */
  export const outboundSchema = V1RunAQueryRequest$outboundSchema;
  /** @deprecated use `V1RunAQueryRequest$Outbound` instead. */
  export type Outbound = V1RunAQueryRequest$Outbound;
}

export function v1RunAQueryRequestToJSON(
  v1RunAQueryRequest: V1RunAQueryRequest,
): string {
  return JSON.stringify(
    V1RunAQueryRequest$outboundSchema.parse(v1RunAQueryRequest),
  );
}

export function v1RunAQueryRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1RunAQueryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1RunAQueryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1RunAQueryRequest' from JSON`,
  );
}

/** @internal */
export const V1RunAQueryResponseBody$inboundSchema: z.ZodType<
  V1RunAQueryResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type V1RunAQueryResponseBody$Outbound = {};

/** @internal */
export const V1RunAQueryResponseBody$outboundSchema: z.ZodType<
  V1RunAQueryResponseBody$Outbound,
  z.ZodTypeDef,
  V1RunAQueryResponseBody
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1RunAQueryResponseBody$ {
  /** @deprecated use `V1RunAQueryResponseBody$inboundSchema` instead. */
  export const inboundSchema = V1RunAQueryResponseBody$inboundSchema;
  /** @deprecated use `V1RunAQueryResponseBody$outboundSchema` instead. */
  export const outboundSchema = V1RunAQueryResponseBody$outboundSchema;
  /** @deprecated use `V1RunAQueryResponseBody$Outbound` instead. */
  export type Outbound = V1RunAQueryResponseBody$Outbound;
}

export function v1RunAQueryResponseBodyToJSON(
  v1RunAQueryResponseBody: V1RunAQueryResponseBody,
): string {
  return JSON.stringify(
    V1RunAQueryResponseBody$outboundSchema.parse(v1RunAQueryResponseBody),
  );
}

export function v1RunAQueryResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1RunAQueryResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1RunAQueryResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1RunAQueryResponseBody' from JSON`,
  );
}
