// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"supabase/internal/sdk"
	"supabase/internal/sdk/pkg/models/operations"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &FunctionResource{}
var _ resource.ResourceWithImportState = &FunctionResource{}

func NewFunctionResource() resource.Resource {
	return &FunctionResource{}
}

// FunctionResource defines the resource implementation.
type FunctionResource struct {
	client *sdk.SDK
}

// FunctionResourceModel describes the resource data model.
type FunctionResourceModel struct {
	Body      types.String `tfsdk:"body"`
	CreatedAt types.Number `tfsdk:"created_at"`
	ID        types.String `tfsdk:"id"`
	ImportMap types.Bool   `tfsdk:"import_map"`
	Name      types.String `tfsdk:"name"`
	Ref       types.String `tfsdk:"ref"`
	Slug      types.String `tfsdk:"slug"`
	Status    types.String `tfsdk:"status"`
	UpdatedAt types.Number `tfsdk:"updated_at"`
	VerifyJwt types.Bool   `tfsdk:"verify_jwt"`
	Version   types.Number `tfsdk:"version"`
}

func (r *FunctionResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_function"
}

func (r *FunctionResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Function Resource",

		Attributes: map[string]schema.Attribute{
			"body": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"created_at": schema.NumberAttribute{
				Computed: true,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"import_map": schema.BoolAttribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Required: true,
			},
			"ref": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required:    true,
				Description: `Project ref`,
			},
			"slug": schema.StringAttribute{
				Required: true,
			},
			"status": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"ACTIVE",
						"REMOVED",
						"THROTTLED",
					),
				},
			},
			"updated_at": schema.NumberAttribute{
				Computed: true,
			},
			"verify_jwt": schema.BoolAttribute{
				Computed: true,
				Optional: true,
			},
			"version": schema.NumberAttribute{
				Computed: true,
			},
		},
	}
}

func (r *FunctionResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *FunctionResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *FunctionResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	createFunctionBody := *data.ToCreateSDKType()
	importMap := new(bool)
	if !data.ImportMap.IsUnknown() && !data.ImportMap.IsNull() {
		*importMap = data.ImportMap.ValueBool()
	} else {
		importMap = nil
	}
	name := new(string)
	if !data.Name.IsUnknown() && !data.Name.IsNull() {
		*name = data.Name.ValueString()
	} else {
		name = nil
	}
	ref := data.Ref.ValueString()
	slug := new(string)
	if !data.Slug.IsUnknown() && !data.Slug.IsNull() {
		*slug = data.Slug.ValueString()
	} else {
		slug = nil
	}
	verifyJwt := new(bool)
	if !data.VerifyJwt.IsUnknown() && !data.VerifyJwt.IsNull() {
		*verifyJwt = data.VerifyJwt.ValueBool()
	} else {
		verifyJwt = nil
	}
	request := operations.CreateFunctionRequest{
		CreateFunctionBody: createFunctionBody,
		ImportMap:          importMap,
		Name:               name,
		Ref:                ref,
		Slug:               slug,
		VerifyJwt:          verifyJwt,
	}
	res, err := r.client.Functions.CreateFunction(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.FunctionResponse == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromCreateResponse(res.FunctionResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *FunctionResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *FunctionResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	functionSlug := data.Slug.ValueString()
	ref := data.Ref.ValueString()
	request := operations.GetFunctionRequest{
		FunctionSlug: functionSlug,
		Ref:          ref,
	}
	res, err := r.client.Functions.GetFunction(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.FunctionSlugResponse == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.FunctionSlugResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *FunctionResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *FunctionResourceModel
	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	updateFunctionBody := *data.ToUpdateSDKType()
	functionSlug := data.Slug.ValueString()
	importMap := new(bool)
	if !data.ImportMap.IsUnknown() && !data.ImportMap.IsNull() {
		*importMap = data.ImportMap.ValueBool()
	} else {
		importMap = nil
	}
	name := new(string)
	if !data.Name.IsUnknown() && !data.Name.IsNull() {
		*name = data.Name.ValueString()
	} else {
		name = nil
	}
	ref := data.Ref.ValueString()
	slug := new(string)
	if !data.Slug.IsUnknown() && !data.Slug.IsNull() {
		*slug = data.Slug.ValueString()
	} else {
		slug = nil
	}
	verifyJwt := new(bool)
	if !data.VerifyJwt.IsUnknown() && !data.VerifyJwt.IsNull() {
		*verifyJwt = data.VerifyJwt.ValueBool()
	} else {
		verifyJwt = nil
	}
	request := operations.UpdateFunctionRequest{
		UpdateFunctionBody: updateFunctionBody,
		FunctionSlug:       functionSlug,
		ImportMap:          importMap,
		Name:               name,
		Ref:                ref,
		Slug:               slug,
		VerifyJwt:          verifyJwt,
	}
	res, err := r.client.Functions.UpdateFunction(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.FunctionResponse == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromUpdateResponse(res.FunctionResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *FunctionResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *FunctionResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	functionSlug := data.Slug.ValueString()
	ref := data.Ref.ValueString()
	request := operations.DeleteFunctionRequest{
		FunctionSlug: functionSlug,
		Ref:          ref,
	}
	res, err := r.client.Functions.DeleteFunction(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *FunctionResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}
