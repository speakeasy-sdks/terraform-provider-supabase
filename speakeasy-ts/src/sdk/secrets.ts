/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { secretsBulkCreate } from "../funcs/secretsBulkCreate.js";
import { secretsBulkDelete } from "../funcs/secretsBulkDelete.js";
import { secretsCreateApiKey } from "../funcs/secretsCreateApiKey.js";
import { secretsDeleteApiKey } from "../funcs/secretsDeleteApiKey.js";
import { secretsGetApiKey } from "../funcs/secretsGetApiKey.js";
import { secretsGetApiKeys } from "../funcs/secretsGetApiKeys.js";
import { secretsGetPGSodiumConfig } from "../funcs/secretsGetPGSodiumConfig.js";
import { secretsList } from "../funcs/secretsList.js";
import { secretsUpdateApiKey } from "../funcs/secretsUpdateApiKey.js";
import { secretsUpdatePgsodiumConfig } from "../funcs/secretsUpdatePgsodiumConfig.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Secrets extends ClientSDK {
  /**
   * Get project api keys
   */
  async getApiKeys(
    request: operations.V1GetProjectApiKeysRequest,
    options?: RequestOptions,
  ): Promise<Array<components.ApiKeyResponse>> {
    return unwrapAsync(secretsGetApiKeys(
      this,
      request,
      options,
    ));
  }

  /**
   * [Alpha] Creates a new API key for the project
   */
  async createApiKey(
    request: operations.CreateApiKeyRequest,
    options?: RequestOptions,
  ): Promise<components.ApiKeyResponse> {
    return unwrapAsync(secretsCreateApiKey(
      this,
      request,
      options,
    ));
  }

  /**
   * [Alpha] Updates an API key for the project
   */
  async updateApiKey(
    request: operations.UpdateApiKeyRequest,
    options?: RequestOptions,
  ): Promise<components.ApiKeyResponse> {
    return unwrapAsync(secretsUpdateApiKey(
      this,
      request,
      options,
    ));
  }

  /**
   * [Alpha] Get API key
   */
  async getApiKey(
    request: operations.GetApiKeyRequest,
    options?: RequestOptions,
  ): Promise<components.ApiKeyResponse> {
    return unwrapAsync(secretsGetApiKey(
      this,
      request,
      options,
    ));
  }

  /**
   * [Alpha] Deletes an API key for the project
   */
  async deleteApiKey(
    request: operations.DeleteApiKeyRequest,
    options?: RequestOptions,
  ): Promise<components.ApiKeyResponse> {
    return unwrapAsync(secretsDeleteApiKey(
      this,
      request,
      options,
    ));
  }

  /**
   * [Beta] Gets project's pgsodium config
   */
  async getPGSodiumConfig(
    request: operations.V1GetPgsodiumConfigRequest,
    options?: RequestOptions,
  ): Promise<components.PgsodiumConfigResponse> {
    return unwrapAsync(secretsGetPGSodiumConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * [Beta] Updates project's pgsodium config. Updating the root_key can cause all data encrypted with the older key to become inaccessible.
   */
  async updatePgsodiumConfig(
    request: operations.V1UpdatePgsodiumConfigRequest,
    options?: RequestOptions,
  ): Promise<components.PgsodiumConfigResponse> {
    return unwrapAsync(secretsUpdatePgsodiumConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * List all secrets
   *
   * @remarks
   * Returns all secrets you've previously added to the specified project.
   */
  async list(
    request: operations.V1ListAllSecretsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.SecretResponse>> {
    return unwrapAsync(secretsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Bulk create secrets
   *
   * @remarks
   * Creates multiple secrets and adds them to the specified project.
   */
  async bulkCreate(
    request: operations.V1BulkCreateSecretsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(secretsBulkCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Bulk delete secrets
   *
   * @remarks
   * Deletes all secrets with the given names from the specified project
   */
  async bulkDelete(
    request: operations.V1BulkDeleteSecretsRequest,
    options?: RequestOptions,
  ): Promise<operations.V1BulkDeleteSecretsResponseBody> {
    return unwrapAsync(secretsBulkDelete(
      this,
      request,
      options,
    ));
  }
}
