/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StorageFeatures,
  StorageFeatures$inboundSchema,
  StorageFeatures$Outbound,
  StorageFeatures$outboundSchema,
} from "./storagefeatures.js";

export type StorageConfigResponse = {
  fileSizeLimit: number;
  features: StorageFeatures;
};

/** @internal */
export const StorageConfigResponse$inboundSchema: z.ZodType<
  StorageConfigResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  fileSizeLimit: z.number().int(),
  features: StorageFeatures$inboundSchema,
});

/** @internal */
export type StorageConfigResponse$Outbound = {
  fileSizeLimit: number;
  features: StorageFeatures$Outbound;
};

/** @internal */
export const StorageConfigResponse$outboundSchema: z.ZodType<
  StorageConfigResponse$Outbound,
  z.ZodTypeDef,
  StorageConfigResponse
> = z.object({
  fileSizeLimit: z.number().int(),
  features: StorageFeatures$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StorageConfigResponse$ {
  /** @deprecated use `StorageConfigResponse$inboundSchema` instead. */
  export const inboundSchema = StorageConfigResponse$inboundSchema;
  /** @deprecated use `StorageConfigResponse$outboundSchema` instead. */
  export const outboundSchema = StorageConfigResponse$outboundSchema;
  /** @deprecated use `StorageConfigResponse$Outbound` instead. */
  export type Outbound = StorageConfigResponse$Outbound;
}

export function storageConfigResponseToJSON(
  storageConfigResponse: StorageConfigResponse,
): string {
  return JSON.stringify(
    StorageConfigResponse$outboundSchema.parse(storageConfigResponse),
  );
}

export function storageConfigResponseFromJSON(
  jsonString: string,
): SafeParseResult<StorageConfigResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StorageConfigResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StorageConfigResponse' from JSON`,
  );
}
