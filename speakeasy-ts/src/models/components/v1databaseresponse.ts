/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1DatabaseResponse = {
  /**
   * Database host
   */
  host: string;
  /**
   * Database version
   */
  version: string;
  /**
   * Database engine
   */
  postgresEngine: string;
  /**
   * Release channel
   */
  releaseChannel: string;
};

/** @internal */
export const V1DatabaseResponse$inboundSchema: z.ZodType<
  V1DatabaseResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  host: z.string(),
  version: z.string(),
  postgres_engine: z.string(),
  release_channel: z.string(),
}).transform((v) => {
  return remap$(v, {
    "postgres_engine": "postgresEngine",
    "release_channel": "releaseChannel",
  });
});

/** @internal */
export type V1DatabaseResponse$Outbound = {
  host: string;
  version: string;
  postgres_engine: string;
  release_channel: string;
};

/** @internal */
export const V1DatabaseResponse$outboundSchema: z.ZodType<
  V1DatabaseResponse$Outbound,
  z.ZodTypeDef,
  V1DatabaseResponse
> = z.object({
  host: z.string(),
  version: z.string(),
  postgresEngine: z.string(),
  releaseChannel: z.string(),
}).transform((v) => {
  return remap$(v, {
    postgresEngine: "postgres_engine",
    releaseChannel: "release_channel",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1DatabaseResponse$ {
  /** @deprecated use `V1DatabaseResponse$inboundSchema` instead. */
  export const inboundSchema = V1DatabaseResponse$inboundSchema;
  /** @deprecated use `V1DatabaseResponse$outboundSchema` instead. */
  export const outboundSchema = V1DatabaseResponse$outboundSchema;
  /** @deprecated use `V1DatabaseResponse$Outbound` instead. */
  export type Outbound = V1DatabaseResponse$Outbound;
}

export function v1DatabaseResponseToJSON(
  v1DatabaseResponse: V1DatabaseResponse,
): string {
  return JSON.stringify(
    V1DatabaseResponse$outboundSchema.parse(v1DatabaseResponse),
  );
}

export function v1DatabaseResponseFromJSON(
  jsonString: string,
): SafeParseResult<V1DatabaseResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1DatabaseResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1DatabaseResponse' from JSON`,
  );
}
