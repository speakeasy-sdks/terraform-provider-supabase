/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Subscription Plan is now set on organization level and is ignored in this request
 *
 * @deprecated enum: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export const Plan = {
  Free: "free",
  Pro: "pro",
} as const;
/**
 * Subscription Plan is now set on organization level and is ignored in this request
 *
 * @deprecated enum: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type Plan = ClosedEnum<typeof Plan>;

/**
 * Region you want your server to reside in
 */
export const Region = {
  UsEast1: "us-east-1",
  UsEast2: "us-east-2",
  UsWest1: "us-west-1",
  UsWest2: "us-west-2",
  ApEast1: "ap-east-1",
  ApSoutheast1: "ap-southeast-1",
  ApNortheast1: "ap-northeast-1",
  ApNortheast2: "ap-northeast-2",
  ApSoutheast2: "ap-southeast-2",
  EuWest1: "eu-west-1",
  EuWest2: "eu-west-2",
  EuWest3: "eu-west-3",
  EuNorth1: "eu-north-1",
  EuCentral1: "eu-central-1",
  EuCentral2: "eu-central-2",
  CaCentral1: "ca-central-1",
  ApSouth1: "ap-south-1",
  SaEast1: "sa-east-1",
} as const;
/**
 * Region you want your server to reside in
 */
export type Region = ClosedEnum<typeof Region>;

export const V1CreateProjectBodyDtoDesiredInstanceSize = {
  Micro: "micro",
  Small: "small",
  Medium: "medium",
  Large: "large",
  Xlarge: "xlarge",
  Twoxlarge: "2xlarge",
  Fourxlarge: "4xlarge",
  Eightxlarge: "8xlarge",
  Twelvexlarge: "12xlarge",
  Sixteenxlarge: "16xlarge",
} as const;
export type V1CreateProjectBodyDtoDesiredInstanceSize = ClosedEnum<
  typeof V1CreateProjectBodyDtoDesiredInstanceSize
>;

/**
 * Release channel. If not provided, GA will be used.
 */
export const V1CreateProjectBodyDtoReleaseChannel = {
  Internal: "internal",
  Alpha: "alpha",
  Beta: "beta",
  Ga: "ga",
  Withdrawn: "withdrawn",
} as const;
/**
 * Release channel. If not provided, GA will be used.
 */
export type V1CreateProjectBodyDtoReleaseChannel = ClosedEnum<
  typeof V1CreateProjectBodyDtoReleaseChannel
>;

/**
 * Postgres engine version. If not provided, the latest version will be used.
 */
export const V1CreateProjectBodyDtoPostgresEngine = {
  Fifteen: "15",
} as const;
/**
 * Postgres engine version. If not provided, the latest version will be used.
 */
export type V1CreateProjectBodyDtoPostgresEngine = ClosedEnum<
  typeof V1CreateProjectBodyDtoPostgresEngine
>;

export type V1CreateProjectBodyDto = {
  /**
   * Database password
   */
  dbPass: string;
  /**
   * Name of your project, should not contain dots
   */
  name: string;
  /**
   * Slug of your organization
   */
  organizationId: string;
  /**
   * Subscription Plan is now set on organization level and is ignored in this request
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  plan?: Plan | undefined;
  /**
   * Region you want your server to reside in
   */
  region: Region;
  /**
   * This field is deprecated and is ignored in this request
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  kpsEnabled?: boolean | undefined;
  desiredInstanceSize?: V1CreateProjectBodyDtoDesiredInstanceSize | undefined;
  /**
   * Template URL used to create the project from the CLI.
   */
  templateUrl?: string | undefined;
  /**
   * Release channel. If not provided, GA will be used.
   */
  releaseChannel?: V1CreateProjectBodyDtoReleaseChannel | undefined;
  /**
   * Postgres engine version. If not provided, the latest version will be used.
   */
  postgresEngine?: V1CreateProjectBodyDtoPostgresEngine | undefined;
};

/** @internal */
export const Plan$inboundSchema: z.ZodNativeEnum<typeof Plan> = z.nativeEnum(
  Plan,
);

/** @internal */
export const Plan$outboundSchema: z.ZodNativeEnum<typeof Plan> =
  Plan$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Plan$ {
  /** @deprecated use `Plan$inboundSchema` instead. */
  export const inboundSchema = Plan$inboundSchema;
  /** @deprecated use `Plan$outboundSchema` instead. */
  export const outboundSchema = Plan$outboundSchema;
}

/** @internal */
export const Region$inboundSchema: z.ZodNativeEnum<typeof Region> = z
  .nativeEnum(Region);

/** @internal */
export const Region$outboundSchema: z.ZodNativeEnum<typeof Region> =
  Region$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Region$ {
  /** @deprecated use `Region$inboundSchema` instead. */
  export const inboundSchema = Region$inboundSchema;
  /** @deprecated use `Region$outboundSchema` instead. */
  export const outboundSchema = Region$outboundSchema;
}

/** @internal */
export const V1CreateProjectBodyDtoDesiredInstanceSize$inboundSchema:
  z.ZodNativeEnum<typeof V1CreateProjectBodyDtoDesiredInstanceSize> = z
    .nativeEnum(V1CreateProjectBodyDtoDesiredInstanceSize);

/** @internal */
export const V1CreateProjectBodyDtoDesiredInstanceSize$outboundSchema:
  z.ZodNativeEnum<typeof V1CreateProjectBodyDtoDesiredInstanceSize> =
    V1CreateProjectBodyDtoDesiredInstanceSize$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1CreateProjectBodyDtoDesiredInstanceSize$ {
  /** @deprecated use `V1CreateProjectBodyDtoDesiredInstanceSize$inboundSchema` instead. */
  export const inboundSchema =
    V1CreateProjectBodyDtoDesiredInstanceSize$inboundSchema;
  /** @deprecated use `V1CreateProjectBodyDtoDesiredInstanceSize$outboundSchema` instead. */
  export const outboundSchema =
    V1CreateProjectBodyDtoDesiredInstanceSize$outboundSchema;
}

/** @internal */
export const V1CreateProjectBodyDtoReleaseChannel$inboundSchema:
  z.ZodNativeEnum<typeof V1CreateProjectBodyDtoReleaseChannel> = z.nativeEnum(
    V1CreateProjectBodyDtoReleaseChannel,
  );

/** @internal */
export const V1CreateProjectBodyDtoReleaseChannel$outboundSchema:
  z.ZodNativeEnum<typeof V1CreateProjectBodyDtoReleaseChannel> =
    V1CreateProjectBodyDtoReleaseChannel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1CreateProjectBodyDtoReleaseChannel$ {
  /** @deprecated use `V1CreateProjectBodyDtoReleaseChannel$inboundSchema` instead. */
  export const inboundSchema =
    V1CreateProjectBodyDtoReleaseChannel$inboundSchema;
  /** @deprecated use `V1CreateProjectBodyDtoReleaseChannel$outboundSchema` instead. */
  export const outboundSchema =
    V1CreateProjectBodyDtoReleaseChannel$outboundSchema;
}

/** @internal */
export const V1CreateProjectBodyDtoPostgresEngine$inboundSchema:
  z.ZodNativeEnum<typeof V1CreateProjectBodyDtoPostgresEngine> = z.nativeEnum(
    V1CreateProjectBodyDtoPostgresEngine,
  );

/** @internal */
export const V1CreateProjectBodyDtoPostgresEngine$outboundSchema:
  z.ZodNativeEnum<typeof V1CreateProjectBodyDtoPostgresEngine> =
    V1CreateProjectBodyDtoPostgresEngine$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1CreateProjectBodyDtoPostgresEngine$ {
  /** @deprecated use `V1CreateProjectBodyDtoPostgresEngine$inboundSchema` instead. */
  export const inboundSchema =
    V1CreateProjectBodyDtoPostgresEngine$inboundSchema;
  /** @deprecated use `V1CreateProjectBodyDtoPostgresEngine$outboundSchema` instead. */
  export const outboundSchema =
    V1CreateProjectBodyDtoPostgresEngine$outboundSchema;
}

/** @internal */
export const V1CreateProjectBodyDto$inboundSchema: z.ZodType<
  V1CreateProjectBodyDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  db_pass: z.string(),
  name: z.string(),
  organization_id: z.string(),
  plan: Plan$inboundSchema.optional(),
  region: Region$inboundSchema,
  kps_enabled: z.boolean().optional(),
  desired_instance_size: V1CreateProjectBodyDtoDesiredInstanceSize$inboundSchema
    .optional(),
  template_url: z.string().optional(),
  release_channel: V1CreateProjectBodyDtoReleaseChannel$inboundSchema
    .optional(),
  postgres_engine: V1CreateProjectBodyDtoPostgresEngine$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "db_pass": "dbPass",
    "organization_id": "organizationId",
    "kps_enabled": "kpsEnabled",
    "desired_instance_size": "desiredInstanceSize",
    "template_url": "templateUrl",
    "release_channel": "releaseChannel",
    "postgres_engine": "postgresEngine",
  });
});

/** @internal */
export type V1CreateProjectBodyDto$Outbound = {
  db_pass: string;
  name: string;
  organization_id: string;
  plan?: string | undefined;
  region: string;
  kps_enabled?: boolean | undefined;
  desired_instance_size?: string | undefined;
  template_url?: string | undefined;
  release_channel?: string | undefined;
  postgres_engine?: string | undefined;
};

/** @internal */
export const V1CreateProjectBodyDto$outboundSchema: z.ZodType<
  V1CreateProjectBodyDto$Outbound,
  z.ZodTypeDef,
  V1CreateProjectBodyDto
> = z.object({
  dbPass: z.string(),
  name: z.string(),
  organizationId: z.string(),
  plan: Plan$outboundSchema.optional(),
  region: Region$outboundSchema,
  kpsEnabled: z.boolean().optional(),
  desiredInstanceSize: V1CreateProjectBodyDtoDesiredInstanceSize$outboundSchema
    .optional(),
  templateUrl: z.string().optional(),
  releaseChannel: V1CreateProjectBodyDtoReleaseChannel$outboundSchema
    .optional(),
  postgresEngine: V1CreateProjectBodyDtoPostgresEngine$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    dbPass: "db_pass",
    organizationId: "organization_id",
    kpsEnabled: "kps_enabled",
    desiredInstanceSize: "desired_instance_size",
    templateUrl: "template_url",
    releaseChannel: "release_channel",
    postgresEngine: "postgres_engine",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1CreateProjectBodyDto$ {
  /** @deprecated use `V1CreateProjectBodyDto$inboundSchema` instead. */
  export const inboundSchema = V1CreateProjectBodyDto$inboundSchema;
  /** @deprecated use `V1CreateProjectBodyDto$outboundSchema` instead. */
  export const outboundSchema = V1CreateProjectBodyDto$outboundSchema;
  /** @deprecated use `V1CreateProjectBodyDto$Outbound` instead. */
  export type Outbound = V1CreateProjectBodyDto$Outbound;
}

export function v1CreateProjectBodyDtoToJSON(
  v1CreateProjectBodyDto: V1CreateProjectBodyDto,
): string {
  return JSON.stringify(
    V1CreateProjectBodyDto$outboundSchema.parse(v1CreateProjectBodyDto),
  );
}

export function v1CreateProjectBodyDtoFromJSON(
  jsonString: string,
): SafeParseResult<V1CreateProjectBodyDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1CreateProjectBodyDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1CreateProjectBodyDto' from JSON`,
  );
}
