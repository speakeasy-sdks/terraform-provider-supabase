/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SnippetUser = {
  id: number;
  username: string;
};

/** @internal */
export const SnippetUser$inboundSchema: z.ZodType<
  SnippetUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  username: z.string(),
});

/** @internal */
export type SnippetUser$Outbound = {
  id: number;
  username: string;
};

/** @internal */
export const SnippetUser$outboundSchema: z.ZodType<
  SnippetUser$Outbound,
  z.ZodTypeDef,
  SnippetUser
> = z.object({
  id: z.number().int(),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SnippetUser$ {
  /** @deprecated use `SnippetUser$inboundSchema` instead. */
  export const inboundSchema = SnippetUser$inboundSchema;
  /** @deprecated use `SnippetUser$outboundSchema` instead. */
  export const outboundSchema = SnippetUser$outboundSchema;
  /** @deprecated use `SnippetUser$Outbound` instead. */
  export type Outbound = SnippetUser$Outbound;
}

export function snippetUserToJSON(snippetUser: SnippetUser): string {
  return JSON.stringify(SnippetUser$outboundSchema.parse(snippetUser));
}

export function snippetUserFromJSON(
  jsonString: string,
): SafeParseResult<SnippetUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SnippetUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SnippetUser' from JSON`,
  );
}
