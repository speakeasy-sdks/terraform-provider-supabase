/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateOrganizationV1Dto = {
  name: string;
};

/** @internal */
export const CreateOrganizationV1Dto$inboundSchema: z.ZodType<
  CreateOrganizationV1Dto,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type CreateOrganizationV1Dto$Outbound = {
  name: string;
};

/** @internal */
export const CreateOrganizationV1Dto$outboundSchema: z.ZodType<
  CreateOrganizationV1Dto$Outbound,
  z.ZodTypeDef,
  CreateOrganizationV1Dto
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrganizationV1Dto$ {
  /** @deprecated use `CreateOrganizationV1Dto$inboundSchema` instead. */
  export const inboundSchema = CreateOrganizationV1Dto$inboundSchema;
  /** @deprecated use `CreateOrganizationV1Dto$outboundSchema` instead. */
  export const outboundSchema = CreateOrganizationV1Dto$outboundSchema;
  /** @deprecated use `CreateOrganizationV1Dto$Outbound` instead. */
  export type Outbound = CreateOrganizationV1Dto$Outbound;
}

export function createOrganizationV1DtoToJSON(
  createOrganizationV1Dto: CreateOrganizationV1Dto,
): string {
  return JSON.stringify(
    CreateOrganizationV1Dto$outboundSchema.parse(createOrganizationV1Dto),
  );
}

export function createOrganizationV1DtoFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrganizationV1Dto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrganizationV1Dto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrganizationV1Dto' from JSON`,
  );
}
