/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Status = {
  ActiveHealthy: "ACTIVE_HEALTHY",
  ActiveUnhealthy: "ACTIVE_UNHEALTHY",
  ComingUp: "COMING_UP",
  GoingDown: "GOING_DOWN",
  Inactive: "INACTIVE",
  InitFailed: "INIT_FAILED",
  Removed: "REMOVED",
  Restarting: "RESTARTING",
  Unknown: "UNKNOWN",
  Upgrading: "UPGRADING",
  Pausing: "PAUSING",
  Restoring: "RESTORING",
  RestoreFailed: "RESTORE_FAILED",
  PauseFailed: "PAUSE_FAILED",
  Resizing: "RESIZING",
} as const;
export type Status = ClosedEnum<typeof Status>;

export type BranchDetailResponse = {
  dbPort: number;
  ref: string;
  postgresVersion: string;
  postgresEngine: string;
  releaseChannel: string;
  status: Status;
  dbHost: string;
  dbUser?: string | undefined;
  dbPass?: string | undefined;
  jwtSecret?: string | undefined;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const BranchDetailResponse$inboundSchema: z.ZodType<
  BranchDetailResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  db_port: z.number().int(),
  ref: z.string(),
  postgres_version: z.string(),
  postgres_engine: z.string(),
  release_channel: z.string(),
  status: Status$inboundSchema,
  db_host: z.string(),
  db_user: z.string().optional(),
  db_pass: z.string().optional(),
  jwt_secret: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "db_port": "dbPort",
    "postgres_version": "postgresVersion",
    "postgres_engine": "postgresEngine",
    "release_channel": "releaseChannel",
    "db_host": "dbHost",
    "db_user": "dbUser",
    "db_pass": "dbPass",
    "jwt_secret": "jwtSecret",
  });
});

/** @internal */
export type BranchDetailResponse$Outbound = {
  db_port: number;
  ref: string;
  postgres_version: string;
  postgres_engine: string;
  release_channel: string;
  status: string;
  db_host: string;
  db_user?: string | undefined;
  db_pass?: string | undefined;
  jwt_secret?: string | undefined;
};

/** @internal */
export const BranchDetailResponse$outboundSchema: z.ZodType<
  BranchDetailResponse$Outbound,
  z.ZodTypeDef,
  BranchDetailResponse
> = z.object({
  dbPort: z.number().int(),
  ref: z.string(),
  postgresVersion: z.string(),
  postgresEngine: z.string(),
  releaseChannel: z.string(),
  status: Status$outboundSchema,
  dbHost: z.string(),
  dbUser: z.string().optional(),
  dbPass: z.string().optional(),
  jwtSecret: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    dbPort: "db_port",
    postgresVersion: "postgres_version",
    postgresEngine: "postgres_engine",
    releaseChannel: "release_channel",
    dbHost: "db_host",
    dbUser: "db_user",
    dbPass: "db_pass",
    jwtSecret: "jwt_secret",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BranchDetailResponse$ {
  /** @deprecated use `BranchDetailResponse$inboundSchema` instead. */
  export const inboundSchema = BranchDetailResponse$inboundSchema;
  /** @deprecated use `BranchDetailResponse$outboundSchema` instead. */
  export const outboundSchema = BranchDetailResponse$outboundSchema;
  /** @deprecated use `BranchDetailResponse$Outbound` instead. */
  export type Outbound = BranchDetailResponse$Outbound;
}

export function branchDetailResponseToJSON(
  branchDetailResponse: BranchDetailResponse,
): string {
  return JSON.stringify(
    BranchDetailResponse$outboundSchema.parse(branchDetailResponse),
  );
}

export function branchDetailResponseFromJSON(
  jsonString: string,
): SafeParseResult<BranchDetailResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BranchDetailResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BranchDetailResponse' from JSON`,
  );
}
