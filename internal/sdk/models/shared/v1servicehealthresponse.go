// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-supabase/internal/sdk/internal/utils"
)

type InfoType string

const (
	InfoTypeAuthHealthResponse     InfoType = "AuthHealthResponse"
	InfoTypeRealtimeHealthResponse InfoType = "RealtimeHealthResponse"
)

type Info struct {
	AuthHealthResponse     *AuthHealthResponse     `queryParam:"inline"`
	RealtimeHealthResponse *RealtimeHealthResponse `queryParam:"inline"`

	Type InfoType
}

func CreateInfoAuthHealthResponse(authHealthResponse AuthHealthResponse) Info {
	typ := InfoTypeAuthHealthResponse

	return Info{
		AuthHealthResponse: &authHealthResponse,
		Type:               typ,
	}
}

func CreateInfoRealtimeHealthResponse(realtimeHealthResponse RealtimeHealthResponse) Info {
	typ := InfoTypeRealtimeHealthResponse

	return Info{
		RealtimeHealthResponse: &realtimeHealthResponse,
		Type:                   typ,
	}
}

func (u *Info) UnmarshalJSON(data []byte) error {

	var authHealthResponse AuthHealthResponse = AuthHealthResponse{}
	if err := utils.UnmarshalJSON(data, &authHealthResponse, "", true, true); err == nil {
		u.AuthHealthResponse = &authHealthResponse
		u.Type = InfoTypeAuthHealthResponse
		return nil
	}

	var realtimeHealthResponse RealtimeHealthResponse = RealtimeHealthResponse{}
	if err := utils.UnmarshalJSON(data, &realtimeHealthResponse, "", true, true); err == nil {
		u.RealtimeHealthResponse = &realtimeHealthResponse
		u.Type = InfoTypeRealtimeHealthResponse
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Info", string(data))
}

func (u Info) MarshalJSON() ([]byte, error) {
	if u.AuthHealthResponse != nil {
		return utils.MarshalJSON(u.AuthHealthResponse, "", true)
	}

	if u.RealtimeHealthResponse != nil {
		return utils.MarshalJSON(u.RealtimeHealthResponse, "", true)
	}

	return nil, errors.New("could not marshal union type Info: all fields are null")
}

type V1ServiceHealthResponseName string

const (
	V1ServiceHealthResponseNameAuth     V1ServiceHealthResponseName = "auth"
	V1ServiceHealthResponseNameDb       V1ServiceHealthResponseName = "db"
	V1ServiceHealthResponseNamePooler   V1ServiceHealthResponseName = "pooler"
	V1ServiceHealthResponseNameRealtime V1ServiceHealthResponseName = "realtime"
	V1ServiceHealthResponseNameRest     V1ServiceHealthResponseName = "rest"
	V1ServiceHealthResponseNameStorage  V1ServiceHealthResponseName = "storage"
)

func (e V1ServiceHealthResponseName) ToPointer() *V1ServiceHealthResponseName {
	return &e
}
func (e *V1ServiceHealthResponseName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "auth":
		fallthrough
	case "db":
		fallthrough
	case "pooler":
		fallthrough
	case "realtime":
		fallthrough
	case "rest":
		fallthrough
	case "storage":
		*e = V1ServiceHealthResponseName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V1ServiceHealthResponseName: %v", v)
	}
}

type V1ServiceHealthResponseStatus string

const (
	V1ServiceHealthResponseStatusComingUp      V1ServiceHealthResponseStatus = "COMING_UP"
	V1ServiceHealthResponseStatusActiveHealthy V1ServiceHealthResponseStatus = "ACTIVE_HEALTHY"
	V1ServiceHealthResponseStatusUnhealthy     V1ServiceHealthResponseStatus = "UNHEALTHY"
)

func (e V1ServiceHealthResponseStatus) ToPointer() *V1ServiceHealthResponseStatus {
	return &e
}
func (e *V1ServiceHealthResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "COMING_UP":
		fallthrough
	case "ACTIVE_HEALTHY":
		fallthrough
	case "UNHEALTHY":
		*e = V1ServiceHealthResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V1ServiceHealthResponseStatus: %v", v)
	}
}

type V1ServiceHealthResponse struct {
	Info    *Info                         `json:"info,omitempty"`
	Name    V1ServiceHealthResponseName   `json:"name"`
	Healthy bool                          `json:"healthy"`
	Status  V1ServiceHealthResponseStatus `json:"status"`
	Error   *string                       `json:"error,omitempty"`
}

func (o *V1ServiceHealthResponse) GetInfo() *Info {
	if o == nil {
		return nil
	}
	return o.Info
}

func (o *V1ServiceHealthResponse) GetName() V1ServiceHealthResponseName {
	if o == nil {
		return V1ServiceHealthResponseName("")
	}
	return o.Name
}

func (o *V1ServiceHealthResponse) GetHealthy() bool {
	if o == nil {
		return false
	}
	return o.Healthy
}

func (o *V1ServiceHealthResponse) GetStatus() V1ServiceHealthResponseStatus {
	if o == nil {
		return V1ServiceHealthResponseStatus("")
	}
	return o.Status
}

func (o *V1ServiceHealthResponse) GetError() *string {
	if o == nil {
		return nil
	}
	return o.Error
}
