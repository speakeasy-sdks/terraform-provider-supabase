/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1UpdateASsoProviderRequest = {
  /**
   * Project ref
   */
  ref: string;
  providerId: string;
  updateProviderBody: components.UpdateProviderBody;
};

/** @internal */
export const V1UpdateASsoProviderRequest$inboundSchema: z.ZodType<
  V1UpdateASsoProviderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ref: z.string(),
  provider_id: z.string(),
  UpdateProviderBody: components.UpdateProviderBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "provider_id": "providerId",
    "UpdateProviderBody": "updateProviderBody",
  });
});

/** @internal */
export type V1UpdateASsoProviderRequest$Outbound = {
  ref: string;
  provider_id: string;
  UpdateProviderBody: components.UpdateProviderBody$Outbound;
};

/** @internal */
export const V1UpdateASsoProviderRequest$outboundSchema: z.ZodType<
  V1UpdateASsoProviderRequest$Outbound,
  z.ZodTypeDef,
  V1UpdateASsoProviderRequest
> = z.object({
  ref: z.string(),
  providerId: z.string(),
  updateProviderBody: components.UpdateProviderBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    providerId: "provider_id",
    updateProviderBody: "UpdateProviderBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1UpdateASsoProviderRequest$ {
  /** @deprecated use `V1UpdateASsoProviderRequest$inboundSchema` instead. */
  export const inboundSchema = V1UpdateASsoProviderRequest$inboundSchema;
  /** @deprecated use `V1UpdateASsoProviderRequest$outboundSchema` instead. */
  export const outboundSchema = V1UpdateASsoProviderRequest$outboundSchema;
  /** @deprecated use `V1UpdateASsoProviderRequest$Outbound` instead. */
  export type Outbound = V1UpdateASsoProviderRequest$Outbound;
}

export function v1UpdateASsoProviderRequestToJSON(
  v1UpdateASsoProviderRequest: V1UpdateASsoProviderRequest,
): string {
  return JSON.stringify(
    V1UpdateASsoProviderRequest$outboundSchema.parse(
      v1UpdateASsoProviderRequest,
    ),
  );
}

export function v1UpdateASsoProviderRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1UpdateASsoProviderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1UpdateASsoProviderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1UpdateASsoProviderRequest' from JSON`,
  );
}
