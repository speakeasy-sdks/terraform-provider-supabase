// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SnippetResponseType string

const (
	SnippetResponseTypeSQL SnippetResponseType = "sql"
)

func (e SnippetResponseType) ToPointer() *SnippetResponseType {
	return &e
}
func (e *SnippetResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sql":
		*e = SnippetResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SnippetResponseType: %v", v)
	}
}

type SnippetResponseVisibility string

const (
	SnippetResponseVisibilityUser    SnippetResponseVisibility = "user"
	SnippetResponseVisibilityProject SnippetResponseVisibility = "project"
	SnippetResponseVisibilityOrg     SnippetResponseVisibility = "org"
	SnippetResponseVisibilityPublic  SnippetResponseVisibility = "public"
)

func (e SnippetResponseVisibility) ToPointer() *SnippetResponseVisibility {
	return &e
}
func (e *SnippetResponseVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		fallthrough
	case "project":
		fallthrough
	case "org":
		fallthrough
	case "public":
		*e = SnippetResponseVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SnippetResponseVisibility: %v", v)
	}
}

type SnippetResponse struct {
	ID          string                    `json:"id"`
	InsertedAt  string                    `json:"inserted_at"`
	UpdatedAt   string                    `json:"updated_at"`
	Type        SnippetResponseType       `json:"type"`
	Visibility  SnippetResponseVisibility `json:"visibility"`
	Name        string                    `json:"name"`
	Description *string                   `json:"description,omitempty"`
	Project     SnippetProject            `json:"project"`
	Owner       SnippetUser               `json:"owner"`
	UpdatedBy   SnippetUser               `json:"updated_by"`
	Content     SnippetContent            `json:"content"`
}

func (o *SnippetResponse) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *SnippetResponse) GetInsertedAt() string {
	if o == nil {
		return ""
	}
	return o.InsertedAt
}

func (o *SnippetResponse) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *SnippetResponse) GetType() SnippetResponseType {
	if o == nil {
		return SnippetResponseType("")
	}
	return o.Type
}

func (o *SnippetResponse) GetVisibility() SnippetResponseVisibility {
	if o == nil {
		return SnippetResponseVisibility("")
	}
	return o.Visibility
}

func (o *SnippetResponse) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *SnippetResponse) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *SnippetResponse) GetProject() SnippetProject {
	if o == nil {
		return SnippetProject{}
	}
	return o.Project
}

func (o *SnippetResponse) GetOwner() SnippetUser {
	if o == nil {
		return SnippetUser{}
	}
	return o.Owner
}

func (o *SnippetResponse) GetUpdatedBy() SnippetUser {
	if o == nil {
		return SnippetUser{}
	}
	return o.UpdatedBy
}

func (o *SnippetResponse) GetContent() SnippetContent {
	if o == nil {
		return SnippetContent{}
	}
	return o.Content
}
