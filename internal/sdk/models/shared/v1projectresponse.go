// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type V1ProjectResponseStatus string

const (
	V1ProjectResponseStatusActiveHealthy   V1ProjectResponseStatus = "ACTIVE_HEALTHY"
	V1ProjectResponseStatusActiveUnhealthy V1ProjectResponseStatus = "ACTIVE_UNHEALTHY"
	V1ProjectResponseStatusComingUp        V1ProjectResponseStatus = "COMING_UP"
	V1ProjectResponseStatusGoingDown       V1ProjectResponseStatus = "GOING_DOWN"
	V1ProjectResponseStatusInactive        V1ProjectResponseStatus = "INACTIVE"
	V1ProjectResponseStatusInitFailed      V1ProjectResponseStatus = "INIT_FAILED"
	V1ProjectResponseStatusRemoved         V1ProjectResponseStatus = "REMOVED"
	V1ProjectResponseStatusRestarting      V1ProjectResponseStatus = "RESTARTING"
	V1ProjectResponseStatusUnknown         V1ProjectResponseStatus = "UNKNOWN"
	V1ProjectResponseStatusUpgrading       V1ProjectResponseStatus = "UPGRADING"
	V1ProjectResponseStatusPausing         V1ProjectResponseStatus = "PAUSING"
	V1ProjectResponseStatusRestoring       V1ProjectResponseStatus = "RESTORING"
	V1ProjectResponseStatusRestoreFailed   V1ProjectResponseStatus = "RESTORE_FAILED"
	V1ProjectResponseStatusPauseFailed     V1ProjectResponseStatus = "PAUSE_FAILED"
	V1ProjectResponseStatusResizing        V1ProjectResponseStatus = "RESIZING"
)

func (e V1ProjectResponseStatus) ToPointer() *V1ProjectResponseStatus {
	return &e
}
func (e *V1ProjectResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE_HEALTHY":
		fallthrough
	case "ACTIVE_UNHEALTHY":
		fallthrough
	case "COMING_UP":
		fallthrough
	case "GOING_DOWN":
		fallthrough
	case "INACTIVE":
		fallthrough
	case "INIT_FAILED":
		fallthrough
	case "REMOVED":
		fallthrough
	case "RESTARTING":
		fallthrough
	case "UNKNOWN":
		fallthrough
	case "UPGRADING":
		fallthrough
	case "PAUSING":
		fallthrough
	case "RESTORING":
		fallthrough
	case "RESTORE_FAILED":
		fallthrough
	case "PAUSE_FAILED":
		fallthrough
	case "RESIZING":
		*e = V1ProjectResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for V1ProjectResponseStatus: %v", v)
	}
}

type V1ProjectResponse struct {
	// Id of your project
	ID string `json:"id"`
	// Slug of your organization
	OrganizationID string `json:"organization_id"`
	// Name of your project
	Name string `json:"name"`
	// Region of your project
	Region string `json:"region"`
	// Creation timestamp
	CreatedAt string                  `json:"created_at"`
	Status    V1ProjectResponseStatus `json:"status"`
}

func (o *V1ProjectResponse) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *V1ProjectResponse) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

func (o *V1ProjectResponse) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *V1ProjectResponse) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *V1ProjectResponse) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *V1ProjectResponse) GetStatus() V1ProjectResponseStatus {
	if o == nil {
		return V1ProjectResponseStatus("")
	}
	return o.Status
}
