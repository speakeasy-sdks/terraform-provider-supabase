/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdatePostgrestConfigBody = {
  maxRows?: number | undefined;
  dbPool?: number | undefined;
  dbExtraSearchPath?: string | undefined;
  dbSchema?: string | undefined;
};

/** @internal */
export const UpdatePostgrestConfigBody$inboundSchema: z.ZodType<
  UpdatePostgrestConfigBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  max_rows: z.number().int().optional(),
  db_pool: z.number().int().optional(),
  db_extra_search_path: z.string().optional(),
  db_schema: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "max_rows": "maxRows",
    "db_pool": "dbPool",
    "db_extra_search_path": "dbExtraSearchPath",
    "db_schema": "dbSchema",
  });
});

/** @internal */
export type UpdatePostgrestConfigBody$Outbound = {
  max_rows?: number | undefined;
  db_pool?: number | undefined;
  db_extra_search_path?: string | undefined;
  db_schema?: string | undefined;
};

/** @internal */
export const UpdatePostgrestConfigBody$outboundSchema: z.ZodType<
  UpdatePostgrestConfigBody$Outbound,
  z.ZodTypeDef,
  UpdatePostgrestConfigBody
> = z.object({
  maxRows: z.number().int().optional(),
  dbPool: z.number().int().optional(),
  dbExtraSearchPath: z.string().optional(),
  dbSchema: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    maxRows: "max_rows",
    dbPool: "db_pool",
    dbExtraSearchPath: "db_extra_search_path",
    dbSchema: "db_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePostgrestConfigBody$ {
  /** @deprecated use `UpdatePostgrestConfigBody$inboundSchema` instead. */
  export const inboundSchema = UpdatePostgrestConfigBody$inboundSchema;
  /** @deprecated use `UpdatePostgrestConfigBody$outboundSchema` instead. */
  export const outboundSchema = UpdatePostgrestConfigBody$outboundSchema;
  /** @deprecated use `UpdatePostgrestConfigBody$Outbound` instead. */
  export type Outbound = UpdatePostgrestConfigBody$Outbound;
}

export function updatePostgrestConfigBodyToJSON(
  updatePostgrestConfigBody: UpdatePostgrestConfigBody,
): string {
  return JSON.stringify(
    UpdatePostgrestConfigBody$outboundSchema.parse(updatePostgrestConfigBody),
  );
}

export function updatePostgrestConfigBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePostgrestConfigBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePostgrestConfigBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePostgrestConfigBody' from JSON`,
  );
}
