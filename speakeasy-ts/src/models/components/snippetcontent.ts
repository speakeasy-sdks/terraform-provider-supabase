/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SnippetContent = {
  favorite: boolean;
  schemaVersion: string;
  sql: string;
};

/** @internal */
export const SnippetContent$inboundSchema: z.ZodType<
  SnippetContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  favorite: z.boolean(),
  schema_version: z.string(),
  sql: z.string(),
}).transform((v) => {
  return remap$(v, {
    "schema_version": "schemaVersion",
  });
});

/** @internal */
export type SnippetContent$Outbound = {
  favorite: boolean;
  schema_version: string;
  sql: string;
};

/** @internal */
export const SnippetContent$outboundSchema: z.ZodType<
  SnippetContent$Outbound,
  z.ZodTypeDef,
  SnippetContent
> = z.object({
  favorite: z.boolean(),
  schemaVersion: z.string(),
  sql: z.string(),
}).transform((v) => {
  return remap$(v, {
    schemaVersion: "schema_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SnippetContent$ {
  /** @deprecated use `SnippetContent$inboundSchema` instead. */
  export const inboundSchema = SnippetContent$inboundSchema;
  /** @deprecated use `SnippetContent$outboundSchema` instead. */
  export const outboundSchema = SnippetContent$outboundSchema;
  /** @deprecated use `SnippetContent$Outbound` instead. */
  export type Outbound = SnippetContent$Outbound;
}

export function snippetContentToJSON(snippetContent: SnippetContent): string {
  return JSON.stringify(SnippetContent$outboundSchema.parse(snippetContent));
}

export function snippetContentFromJSON(
  jsonString: string,
): SafeParseResult<SnippetContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SnippetContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SnippetContent' from JSON`,
  );
}
