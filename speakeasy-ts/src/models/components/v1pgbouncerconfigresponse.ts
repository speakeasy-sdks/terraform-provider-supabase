/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PoolMode = {
  Transaction: "transaction",
  Session: "session",
  Statement: "statement",
} as const;
export type PoolMode = ClosedEnum<typeof PoolMode>;

export type V1PgbouncerConfigResponse = {
  poolMode?: PoolMode | undefined;
  defaultPoolSize?: number | undefined;
  ignoreStartupParameters?: string | undefined;
  maxClientConn?: number | undefined;
  connectionString?: string | undefined;
};

/** @internal */
export const PoolMode$inboundSchema: z.ZodNativeEnum<typeof PoolMode> = z
  .nativeEnum(PoolMode);

/** @internal */
export const PoolMode$outboundSchema: z.ZodNativeEnum<typeof PoolMode> =
  PoolMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PoolMode$ {
  /** @deprecated use `PoolMode$inboundSchema` instead. */
  export const inboundSchema = PoolMode$inboundSchema;
  /** @deprecated use `PoolMode$outboundSchema` instead. */
  export const outboundSchema = PoolMode$outboundSchema;
}

/** @internal */
export const V1PgbouncerConfigResponse$inboundSchema: z.ZodType<
  V1PgbouncerConfigResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  pool_mode: PoolMode$inboundSchema.optional(),
  default_pool_size: z.number().optional(),
  ignore_startup_parameters: z.string().optional(),
  max_client_conn: z.number().optional(),
  connection_string: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "pool_mode": "poolMode",
    "default_pool_size": "defaultPoolSize",
    "ignore_startup_parameters": "ignoreStartupParameters",
    "max_client_conn": "maxClientConn",
    "connection_string": "connectionString",
  });
});

/** @internal */
export type V1PgbouncerConfigResponse$Outbound = {
  pool_mode?: string | undefined;
  default_pool_size?: number | undefined;
  ignore_startup_parameters?: string | undefined;
  max_client_conn?: number | undefined;
  connection_string?: string | undefined;
};

/** @internal */
export const V1PgbouncerConfigResponse$outboundSchema: z.ZodType<
  V1PgbouncerConfigResponse$Outbound,
  z.ZodTypeDef,
  V1PgbouncerConfigResponse
> = z.object({
  poolMode: PoolMode$outboundSchema.optional(),
  defaultPoolSize: z.number().optional(),
  ignoreStartupParameters: z.string().optional(),
  maxClientConn: z.number().optional(),
  connectionString: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    poolMode: "pool_mode",
    defaultPoolSize: "default_pool_size",
    ignoreStartupParameters: "ignore_startup_parameters",
    maxClientConn: "max_client_conn",
    connectionString: "connection_string",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1PgbouncerConfigResponse$ {
  /** @deprecated use `V1PgbouncerConfigResponse$inboundSchema` instead. */
  export const inboundSchema = V1PgbouncerConfigResponse$inboundSchema;
  /** @deprecated use `V1PgbouncerConfigResponse$outboundSchema` instead. */
  export const outboundSchema = V1PgbouncerConfigResponse$outboundSchema;
  /** @deprecated use `V1PgbouncerConfigResponse$Outbound` instead. */
  export type Outbound = V1PgbouncerConfigResponse$Outbound;
}

export function v1PgbouncerConfigResponseToJSON(
  v1PgbouncerConfigResponse: V1PgbouncerConfigResponse,
): string {
  return JSON.stringify(
    V1PgbouncerConfigResponse$outboundSchema.parse(v1PgbouncerConfigResponse),
  );
}

export function v1PgbouncerConfigResponseFromJSON(
  jsonString: string,
): SafeParseResult<V1PgbouncerConfigResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1PgbouncerConfigResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1PgbouncerConfigResponse' from JSON`,
  );
}
