/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1CheckVanitySubdomainAvailabilityRequest = {
  /**
   * Project ref
   */
  ref: string;
  vanitySubdomainBody: components.VanitySubdomainBody;
};

/** @internal */
export const V1CheckVanitySubdomainAvailabilityRequest$inboundSchema: z.ZodType<
  V1CheckVanitySubdomainAvailabilityRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ref: z.string(),
  VanitySubdomainBody: components.VanitySubdomainBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "VanitySubdomainBody": "vanitySubdomainBody",
  });
});

/** @internal */
export type V1CheckVanitySubdomainAvailabilityRequest$Outbound = {
  ref: string;
  VanitySubdomainBody: components.VanitySubdomainBody$Outbound;
};

/** @internal */
export const V1CheckVanitySubdomainAvailabilityRequest$outboundSchema:
  z.ZodType<
    V1CheckVanitySubdomainAvailabilityRequest$Outbound,
    z.ZodTypeDef,
    V1CheckVanitySubdomainAvailabilityRequest
  > = z.object({
    ref: z.string(),
    vanitySubdomainBody: components.VanitySubdomainBody$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      vanitySubdomainBody: "VanitySubdomainBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1CheckVanitySubdomainAvailabilityRequest$ {
  /** @deprecated use `V1CheckVanitySubdomainAvailabilityRequest$inboundSchema` instead. */
  export const inboundSchema =
    V1CheckVanitySubdomainAvailabilityRequest$inboundSchema;
  /** @deprecated use `V1CheckVanitySubdomainAvailabilityRequest$outboundSchema` instead. */
  export const outboundSchema =
    V1CheckVanitySubdomainAvailabilityRequest$outboundSchema;
  /** @deprecated use `V1CheckVanitySubdomainAvailabilityRequest$Outbound` instead. */
  export type Outbound = V1CheckVanitySubdomainAvailabilityRequest$Outbound;
}

export function v1CheckVanitySubdomainAvailabilityRequestToJSON(
  v1CheckVanitySubdomainAvailabilityRequest:
    V1CheckVanitySubdomainAvailabilityRequest,
): string {
  return JSON.stringify(
    V1CheckVanitySubdomainAvailabilityRequest$outboundSchema.parse(
      v1CheckVanitySubdomainAvailabilityRequest,
    ),
  );
}

export function v1CheckVanitySubdomainAvailabilityRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  V1CheckVanitySubdomainAvailabilityRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V1CheckVanitySubdomainAvailabilityRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V1CheckVanitySubdomainAvailabilityRequest' from JSON`,
  );
}
