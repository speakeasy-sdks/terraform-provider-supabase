/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Services = {
  Auth: "auth",
  Db: "db",
  Pooler: "pooler",
  Realtime: "realtime",
  Rest: "rest",
  Storage: "storage",
} as const;
export type Services = ClosedEnum<typeof Services>;

export type V1GetServicesHealthRequest = {
  /**
   * Project ref
   */
  ref: string;
  timeoutMs?: number | undefined;
  services: Array<Services>;
};

/** @internal */
export const Services$inboundSchema: z.ZodNativeEnum<typeof Services> = z
  .nativeEnum(Services);

/** @internal */
export const Services$outboundSchema: z.ZodNativeEnum<typeof Services> =
  Services$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Services$ {
  /** @deprecated use `Services$inboundSchema` instead. */
  export const inboundSchema = Services$inboundSchema;
  /** @deprecated use `Services$outboundSchema` instead. */
  export const outboundSchema = Services$outboundSchema;
}

/** @internal */
export const V1GetServicesHealthRequest$inboundSchema: z.ZodType<
  V1GetServicesHealthRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ref: z.string(),
  timeout_ms: z.number().int().optional(),
  services: z.array(Services$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "timeout_ms": "timeoutMs",
  });
});

/** @internal */
export type V1GetServicesHealthRequest$Outbound = {
  ref: string;
  timeout_ms?: number | undefined;
  services: Array<string>;
};

/** @internal */
export const V1GetServicesHealthRequest$outboundSchema: z.ZodType<
  V1GetServicesHealthRequest$Outbound,
  z.ZodTypeDef,
  V1GetServicesHealthRequest
> = z.object({
  ref: z.string(),
  timeoutMs: z.number().int().optional(),
  services: z.array(Services$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    timeoutMs: "timeout_ms",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1GetServicesHealthRequest$ {
  /** @deprecated use `V1GetServicesHealthRequest$inboundSchema` instead. */
  export const inboundSchema = V1GetServicesHealthRequest$inboundSchema;
  /** @deprecated use `V1GetServicesHealthRequest$outboundSchema` instead. */
  export const outboundSchema = V1GetServicesHealthRequest$outboundSchema;
  /** @deprecated use `V1GetServicesHealthRequest$Outbound` instead. */
  export type Outbound = V1GetServicesHealthRequest$Outbound;
}

export function v1GetServicesHealthRequestToJSON(
  v1GetServicesHealthRequest: V1GetServicesHealthRequest,
): string {
  return JSON.stringify(
    V1GetServicesHealthRequest$outboundSchema.parse(v1GetServicesHealthRequest),
  );
}

export function v1GetServicesHealthRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1GetServicesHealthRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1GetServicesHealthRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1GetServicesHealthRequest' from JSON`,
  );
}
