/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1PhysicalBackup = {
  earliestPhysicalBackupDateUnix?: number | undefined;
  latestPhysicalBackupDateUnix?: number | undefined;
};

/** @internal */
export const V1PhysicalBackup$inboundSchema: z.ZodType<
  V1PhysicalBackup,
  z.ZodTypeDef,
  unknown
> = z.object({
  earliest_physical_backup_date_unix: z.number().int().optional(),
  latest_physical_backup_date_unix: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "earliest_physical_backup_date_unix": "earliestPhysicalBackupDateUnix",
    "latest_physical_backup_date_unix": "latestPhysicalBackupDateUnix",
  });
});

/** @internal */
export type V1PhysicalBackup$Outbound = {
  earliest_physical_backup_date_unix?: number | undefined;
  latest_physical_backup_date_unix?: number | undefined;
};

/** @internal */
export const V1PhysicalBackup$outboundSchema: z.ZodType<
  V1PhysicalBackup$Outbound,
  z.ZodTypeDef,
  V1PhysicalBackup
> = z.object({
  earliestPhysicalBackupDateUnix: z.number().int().optional(),
  latestPhysicalBackupDateUnix: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    earliestPhysicalBackupDateUnix: "earliest_physical_backup_date_unix",
    latestPhysicalBackupDateUnix: "latest_physical_backup_date_unix",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1PhysicalBackup$ {
  /** @deprecated use `V1PhysicalBackup$inboundSchema` instead. */
  export const inboundSchema = V1PhysicalBackup$inboundSchema;
  /** @deprecated use `V1PhysicalBackup$outboundSchema` instead. */
  export const outboundSchema = V1PhysicalBackup$outboundSchema;
  /** @deprecated use `V1PhysicalBackup$Outbound` instead. */
  export type Outbound = V1PhysicalBackup$Outbound;
}

export function v1PhysicalBackupToJSON(
  v1PhysicalBackup: V1PhysicalBackup,
): string {
  return JSON.stringify(
    V1PhysicalBackup$outboundSchema.parse(v1PhysicalBackup),
  );
}

export function v1PhysicalBackupFromJSON(
  jsonString: string,
): SafeParseResult<V1PhysicalBackup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1PhysicalBackup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1PhysicalBackup' from JSON`,
  );
}
