// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type BranchResponseStatus string

const (
	BranchResponseStatusCreatingProject   BranchResponseStatus = "CREATING_PROJECT"
	BranchResponseStatusRunningMigrations BranchResponseStatus = "RUNNING_MIGRATIONS"
	BranchResponseStatusMigrationsPassed  BranchResponseStatus = "MIGRATIONS_PASSED"
	BranchResponseStatusMigrationsFailed  BranchResponseStatus = "MIGRATIONS_FAILED"
	BranchResponseStatusFunctionsDeployed BranchResponseStatus = "FUNCTIONS_DEPLOYED"
	BranchResponseStatusFunctionsFailed   BranchResponseStatus = "FUNCTIONS_FAILED"
)

func (e BranchResponseStatus) ToPointer() *BranchResponseStatus {
	return &e
}
func (e *BranchResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREATING_PROJECT":
		fallthrough
	case "RUNNING_MIGRATIONS":
		fallthrough
	case "MIGRATIONS_PASSED":
		fallthrough
	case "MIGRATIONS_FAILED":
		fallthrough
	case "FUNCTIONS_DEPLOYED":
		fallthrough
	case "FUNCTIONS_FAILED":
		*e = BranchResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BranchResponseStatus: %v", v)
	}
}

type BranchResponse struct {
	PrNumber         *int                 `json:"pr_number,omitempty"`
	LatestCheckRunID *int64               `json:"latest_check_run_id,omitempty"`
	ID               string               `json:"id"`
	Name             string               `json:"name"`
	ProjectRef       string               `json:"project_ref"`
	ParentProjectRef string               `json:"parent_project_ref"`
	IsDefault        bool                 `json:"is_default"`
	GitBranch        *string              `json:"git_branch,omitempty"`
	ResetOnPush      bool                 `json:"reset_on_push"`
	Persistent       bool                 `json:"persistent"`
	Status           BranchResponseStatus `json:"status"`
	CreatedAt        string               `json:"created_at"`
	UpdatedAt        string               `json:"updated_at"`
}

func (o *BranchResponse) GetPrNumber() *int {
	if o == nil {
		return nil
	}
	return o.PrNumber
}

func (o *BranchResponse) GetLatestCheckRunID() *int64 {
	if o == nil {
		return nil
	}
	return o.LatestCheckRunID
}

func (o *BranchResponse) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *BranchResponse) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *BranchResponse) GetProjectRef() string {
	if o == nil {
		return ""
	}
	return o.ProjectRef
}

func (o *BranchResponse) GetParentProjectRef() string {
	if o == nil {
		return ""
	}
	return o.ParentProjectRef
}

func (o *BranchResponse) GetIsDefault() bool {
	if o == nil {
		return false
	}
	return o.IsDefault
}

func (o *BranchResponse) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *BranchResponse) GetResetOnPush() bool {
	if o == nil {
		return false
	}
	return o.ResetOnPush
}

func (o *BranchResponse) GetPersistent() bool {
	if o == nil {
		return false
	}
	return o.Persistent
}

func (o *BranchResponse) GetStatus() BranchResponseStatus {
	if o == nil {
		return BranchResponseStatus("")
	}
	return o.Status
}

func (o *BranchResponse) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *BranchResponse) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}
