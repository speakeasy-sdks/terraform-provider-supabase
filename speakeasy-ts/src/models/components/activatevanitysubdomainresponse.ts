/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ActivateVanitySubdomainResponse = {
  customDomain: string;
};

/** @internal */
export const ActivateVanitySubdomainResponse$inboundSchema: z.ZodType<
  ActivateVanitySubdomainResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  custom_domain: z.string(),
}).transform((v) => {
  return remap$(v, {
    "custom_domain": "customDomain",
  });
});

/** @internal */
export type ActivateVanitySubdomainResponse$Outbound = {
  custom_domain: string;
};

/** @internal */
export const ActivateVanitySubdomainResponse$outboundSchema: z.ZodType<
  ActivateVanitySubdomainResponse$Outbound,
  z.ZodTypeDef,
  ActivateVanitySubdomainResponse
> = z.object({
  customDomain: z.string(),
}).transform((v) => {
  return remap$(v, {
    customDomain: "custom_domain",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivateVanitySubdomainResponse$ {
  /** @deprecated use `ActivateVanitySubdomainResponse$inboundSchema` instead. */
  export const inboundSchema = ActivateVanitySubdomainResponse$inboundSchema;
  /** @deprecated use `ActivateVanitySubdomainResponse$outboundSchema` instead. */
  export const outboundSchema = ActivateVanitySubdomainResponse$outboundSchema;
  /** @deprecated use `ActivateVanitySubdomainResponse$Outbound` instead. */
  export type Outbound = ActivateVanitySubdomainResponse$Outbound;
}

export function activateVanitySubdomainResponseToJSON(
  activateVanitySubdomainResponse: ActivateVanitySubdomainResponse,
): string {
  return JSON.stringify(
    ActivateVanitySubdomainResponse$outboundSchema.parse(
      activateVanitySubdomainResponse,
    ),
  );
}

export function activateVanitySubdomainResponseFromJSON(
  jsonString: string,
): SafeParseResult<ActivateVanitySubdomainResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivateVanitySubdomainResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivateVanitySubdomainResponse' from JSON`,
  );
}
