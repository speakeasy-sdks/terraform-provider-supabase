/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1GenerateTypescriptTypesRequest = {
  includedSchemas?: string | undefined;
  /**
   * Project ref
   */
  ref: string;
};

/** @internal */
export const V1GenerateTypescriptTypesRequest$inboundSchema: z.ZodType<
  V1GenerateTypescriptTypesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  included_schemas: z.string().default("public"),
  ref: z.string(),
}).transform((v) => {
  return remap$(v, {
    "included_schemas": "includedSchemas",
  });
});

/** @internal */
export type V1GenerateTypescriptTypesRequest$Outbound = {
  included_schemas: string;
  ref: string;
};

/** @internal */
export const V1GenerateTypescriptTypesRequest$outboundSchema: z.ZodType<
  V1GenerateTypescriptTypesRequest$Outbound,
  z.ZodTypeDef,
  V1GenerateTypescriptTypesRequest
> = z.object({
  includedSchemas: z.string().default("public"),
  ref: z.string(),
}).transform((v) => {
  return remap$(v, {
    includedSchemas: "included_schemas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1GenerateTypescriptTypesRequest$ {
  /** @deprecated use `V1GenerateTypescriptTypesRequest$inboundSchema` instead. */
  export const inboundSchema = V1GenerateTypescriptTypesRequest$inboundSchema;
  /** @deprecated use `V1GenerateTypescriptTypesRequest$outboundSchema` instead. */
  export const outboundSchema = V1GenerateTypescriptTypesRequest$outboundSchema;
  /** @deprecated use `V1GenerateTypescriptTypesRequest$Outbound` instead. */
  export type Outbound = V1GenerateTypescriptTypesRequest$Outbound;
}

export function v1GenerateTypescriptTypesRequestToJSON(
  v1GenerateTypescriptTypesRequest: V1GenerateTypescriptTypesRequest,
): string {
  return JSON.stringify(
    V1GenerateTypescriptTypesRequest$outboundSchema.parse(
      v1GenerateTypescriptTypesRequest,
    ),
  );
}

export function v1GenerateTypescriptTypesRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1GenerateTypescriptTypesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1GenerateTypescriptTypesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1GenerateTypescriptTypesRequest' from JSON`,
  );
}
