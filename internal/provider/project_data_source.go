// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/speakeasy/terraform-provider-supabase/internal/provider/types"
	"github.com/speakeasy/terraform-provider-supabase/internal/sdk"
	"github.com/speakeasy/terraform-provider-supabase/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &ProjectDataSource{}
var _ datasource.DataSourceWithConfigure = &ProjectDataSource{}

func NewProjectDataSource() datasource.DataSource {
	return &ProjectDataSource{}
}

// ProjectDataSource is the data source implementation.
type ProjectDataSource struct {
	client *sdk.Supabase
}

// ProjectDataSourceModel describes the data model.
type ProjectDataSourceModel struct {
	CreatedAt      types.String               `tfsdk:"created_at"`
	Database       tfTypes.V1DatabaseResponse `tfsdk:"database"`
	ID             types.String               `tfsdk:"id"`
	Name           types.String               `tfsdk:"name"`
	OrganizationID types.String               `tfsdk:"organization_id"`
	Region         types.String               `tfsdk:"region"`
	Status         types.String               `tfsdk:"status"`
}

// Metadata returns the data source type name.
func (r *ProjectDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_project"
}

// Schema defines the schema for the data source.
func (r *ProjectDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Project DataSource",

		Attributes: map[string]schema.Attribute{
			"created_at": schema.StringAttribute{
				Computed:    true,
				Description: `Creation timestamp`,
			},
			"database": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"host": schema.StringAttribute{
						Computed:    true,
						Description: `Database host`,
					},
					"postgres_engine": schema.StringAttribute{
						Computed:    true,
						Description: `Database engine`,
					},
					"release_channel": schema.StringAttribute{
						Computed:    true,
						Description: `Release channel`,
					},
					"version": schema.StringAttribute{
						Computed:    true,
						Description: `Database version`,
					},
				},
			},
			"id": schema.StringAttribute{
				Required:    true,
				Description: `Project ref`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `Name of your project`,
			},
			"organization_id": schema.StringAttribute{
				Computed:    true,
				Description: `Slug of your organization`,
			},
			"region": schema.StringAttribute{
				Computed:    true,
				Description: `Region of your project`,
			},
			"status": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *ProjectDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Supabase)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Supabase, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ProjectDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *ProjectDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var id string
	id = data.ID.ValueString()

	request := operations.V1GetProjectRequest{
		ID: id,
	}
	res, err := r.client.Projects.Get(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.V1ProjectWithDatabaseResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedV1ProjectWithDatabaseResponse(res.V1ProjectWithDatabaseResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
