/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RealtimeHealthResponse = {
  connectedCluster: number;
};

/** @internal */
export const RealtimeHealthResponse$inboundSchema: z.ZodType<
  RealtimeHealthResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  connected_cluster: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "connected_cluster": "connectedCluster",
  });
});

/** @internal */
export type RealtimeHealthResponse$Outbound = {
  connected_cluster: number;
};

/** @internal */
export const RealtimeHealthResponse$outboundSchema: z.ZodType<
  RealtimeHealthResponse$Outbound,
  z.ZodTypeDef,
  RealtimeHealthResponse
> = z.object({
  connectedCluster: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    connectedCluster: "connected_cluster",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RealtimeHealthResponse$ {
  /** @deprecated use `RealtimeHealthResponse$inboundSchema` instead. */
  export const inboundSchema = RealtimeHealthResponse$inboundSchema;
  /** @deprecated use `RealtimeHealthResponse$outboundSchema` instead. */
  export const outboundSchema = RealtimeHealthResponse$outboundSchema;
  /** @deprecated use `RealtimeHealthResponse$Outbound` instead. */
  export type Outbound = RealtimeHealthResponse$Outbound;
}

export function realtimeHealthResponseToJSON(
  realtimeHealthResponse: RealtimeHealthResponse,
): string {
  return JSON.stringify(
    RealtimeHealthResponse$outboundSchema.parse(realtimeHealthResponse),
  );
}

export function realtimeHealthResponseFromJSON(
  jsonString: string,
): SafeParseResult<RealtimeHealthResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RealtimeHealthResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RealtimeHealthResponse' from JSON`,
  );
}
