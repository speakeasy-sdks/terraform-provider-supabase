/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { projectsCreate } from "../funcs/projectsCreate.js";
import { projectsDelete } from "../funcs/projectsDelete.js";
import { projectsDeleteNetworkBans } from "../funcs/projectsDeleteNetworkBans.js";
import { projectsGet } from "../funcs/projectsGet.js";
import { projectsGetHealth } from "../funcs/projectsGetHealth.js";
import { projectsGetNetworkRestrictions } from "../funcs/projectsGetNetworkRestrictions.js";
import { projectsGetUpgradeEligibility } from "../funcs/projectsGetUpgradeEligibility.js";
import { projectsGetUpgradeStatus } from "../funcs/projectsGetUpgradeStatus.js";
import { projectsList } from "../funcs/projectsList.js";
import { projectsListNetworkBans } from "../funcs/projectsListNetworkBans.js";
import { projectsUpdateNetworkRestrictions } from "../funcs/projectsUpdateNetworkRestrictions.js";
import { projectsUpgradePostgresVersion } from "../funcs/projectsUpgradePostgresVersion.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Projects extends ClientSDK {
  /**
   * List all projects
   *
   * @remarks
   * Returns a list of all projects you've previously created.
   */
  async list(
    options?: RequestOptions,
  ): Promise<Array<components.V1ProjectWithDatabaseResponse>> {
    return unwrapAsync(projectsList(
      this,
      options,
    ));
  }

  /**
   * Create a project
   */
  async create(
    request: components.V1CreateProjectBodyDto,
    options?: RequestOptions,
  ): Promise<components.V1ProjectResponse> {
    return unwrapAsync(projectsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * [Beta] Gets project's network bans
   */
  async listNetworkBans(
    request: operations.V1ListAllNetworkBansRequest,
    options?: RequestOptions,
  ): Promise<components.NetworkBanResponse> {
    return unwrapAsync(projectsListNetworkBans(
      this,
      request,
      options,
    ));
  }

  /**
   * [Beta] Remove network bans.
   */
  async deleteNetworkBans(
    request: operations.V1DeleteNetworkBansRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(projectsDeleteNetworkBans(
      this,
      request,
      options,
    ));
  }

  /**
   * [Beta] Gets project's network restrictions
   */
  async getNetworkRestrictions(
    request: operations.V1GetNetworkRestrictionsRequest,
    options?: RequestOptions,
  ): Promise<components.NetworkRestrictionsResponse> {
    return unwrapAsync(projectsGetNetworkRestrictions(
      this,
      request,
      options,
    ));
  }

  /**
   * [Beta] Updates project's network restrictions
   */
  async updateNetworkRestrictions(
    request: operations.V1UpdateNetworkRestrictionsRequest,
    options?: RequestOptions,
  ): Promise<components.NetworkRestrictionsResponse> {
    return unwrapAsync(projectsUpdateNetworkRestrictions(
      this,
      request,
      options,
    ));
  }

  /**
   * Gets a specific project that belongs to the authenticated user
   */
  async get(
    request: operations.V1GetProjectRequest,
    options?: RequestOptions,
  ): Promise<components.V1ProjectWithDatabaseResponse> {
    return unwrapAsync(projectsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes the given project
   */
  async delete(
    request: operations.V1DeleteAProjectRequest,
    options?: RequestOptions,
  ): Promise<components.V1ProjectRefResponse> {
    return unwrapAsync(projectsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * [Beta] Upgrades the project's Postgres version
   */
  async upgradePostgresVersion(
    request: operations.V1UpgradePostgresVersionRequest,
    options?: RequestOptions,
  ): Promise<components.ProjectUpgradeInitiateResponse> {
    return unwrapAsync(projectsUpgradePostgresVersion(
      this,
      request,
      options,
    ));
  }

  /**
   * [Beta] Returns the project's eligibility for upgrades
   */
  async getUpgradeEligibility(
    request: operations.V1GetPostgresUpgradeEligibilityRequest,
    options?: RequestOptions,
  ): Promise<components.ProjectUpgradeEligibilityResponse> {
    return unwrapAsync(projectsGetUpgradeEligibility(
      this,
      request,
      options,
    ));
  }

  /**
   * [Beta] Gets the latest status of the project's upgrade
   */
  async getUpgradeStatus(
    request: operations.V1GetPostgresUpgradeStatusRequest,
    options?: RequestOptions,
  ): Promise<components.DatabaseUpgradeStatusResponse> {
    return unwrapAsync(projectsGetUpgradeStatus(
      this,
      request,
      options,
    ));
  }

  /**
   * Gets project's service health status
   */
  async getHealth(
    request: operations.V1GetServicesHealthRequest,
    options?: RequestOptions,
  ): Promise<Array<components.V1ServiceHealthResponse>> {
    return unwrapAsync(projectsGetHealth(
      this,
      request,
      options,
    ));
  }
}
