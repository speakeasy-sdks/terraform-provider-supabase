/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BillingPlanId,
  BillingPlanId$inboundSchema,
  BillingPlanId$outboundSchema,
} from "./billingplanid.js";
import {
  ReleaseChannel,
  ReleaseChannel$inboundSchema,
  ReleaseChannel$outboundSchema,
} from "./releasechannel.js";

export const OptInTags = {
  AiSqlGeneratorOptIn: "AI_SQL_GENERATOR_OPT_IN",
} as const;
export type OptInTags = ClosedEnum<typeof OptInTags>;

export type V1OrganizationSlugResponse = {
  plan?: BillingPlanId | undefined;
  optInTags: Array<OptInTags>;
  allowedReleaseChannels: Array<ReleaseChannel>;
  id: string;
  name: string;
};

/** @internal */
export const OptInTags$inboundSchema: z.ZodNativeEnum<typeof OptInTags> = z
  .nativeEnum(OptInTags);

/** @internal */
export const OptInTags$outboundSchema: z.ZodNativeEnum<typeof OptInTags> =
  OptInTags$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OptInTags$ {
  /** @deprecated use `OptInTags$inboundSchema` instead. */
  export const inboundSchema = OptInTags$inboundSchema;
  /** @deprecated use `OptInTags$outboundSchema` instead. */
  export const outboundSchema = OptInTags$outboundSchema;
}

/** @internal */
export const V1OrganizationSlugResponse$inboundSchema: z.ZodType<
  V1OrganizationSlugResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  plan: BillingPlanId$inboundSchema.optional(),
  opt_in_tags: z.array(OptInTags$inboundSchema),
  allowed_release_channels: z.array(ReleaseChannel$inboundSchema),
  id: z.string(),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "opt_in_tags": "optInTags",
    "allowed_release_channels": "allowedReleaseChannels",
  });
});

/** @internal */
export type V1OrganizationSlugResponse$Outbound = {
  plan?: string | undefined;
  opt_in_tags: Array<string>;
  allowed_release_channels: Array<string>;
  id: string;
  name: string;
};

/** @internal */
export const V1OrganizationSlugResponse$outboundSchema: z.ZodType<
  V1OrganizationSlugResponse$Outbound,
  z.ZodTypeDef,
  V1OrganizationSlugResponse
> = z.object({
  plan: BillingPlanId$outboundSchema.optional(),
  optInTags: z.array(OptInTags$outboundSchema),
  allowedReleaseChannels: z.array(ReleaseChannel$outboundSchema),
  id: z.string(),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    optInTags: "opt_in_tags",
    allowedReleaseChannels: "allowed_release_channels",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1OrganizationSlugResponse$ {
  /** @deprecated use `V1OrganizationSlugResponse$inboundSchema` instead. */
  export const inboundSchema = V1OrganizationSlugResponse$inboundSchema;
  /** @deprecated use `V1OrganizationSlugResponse$outboundSchema` instead. */
  export const outboundSchema = V1OrganizationSlugResponse$outboundSchema;
  /** @deprecated use `V1OrganizationSlugResponse$Outbound` instead. */
  export type Outbound = V1OrganizationSlugResponse$Outbound;
}

export function v1OrganizationSlugResponseToJSON(
  v1OrganizationSlugResponse: V1OrganizationSlugResponse,
): string {
  return JSON.stringify(
    V1OrganizationSlugResponse$outboundSchema.parse(v1OrganizationSlugResponse),
  );
}

export function v1OrganizationSlugResponseFromJSON(
  jsonString: string,
): SafeParseResult<V1OrganizationSlugResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1OrganizationSlugResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1OrganizationSlugResponse' from JSON`,
  );
}
