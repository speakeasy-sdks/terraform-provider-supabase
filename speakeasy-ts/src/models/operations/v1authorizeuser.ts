/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ResponseType = {
  Code: "code",
  Token: "token",
  IdTokenToken: "id_token token",
} as const;
export type ResponseType = ClosedEnum<typeof ResponseType>;

export const CodeChallengeMethod = {
  Plain: "plain",
  Sha256: "sha256",
  S256: "S256",
} as const;
export type CodeChallengeMethod = ClosedEnum<typeof CodeChallengeMethod>;

export type V1AuthorizeUserRequest = {
  clientId: string;
  responseType: ResponseType;
  redirectUri: string;
  scope?: string | undefined;
  state?: string | undefined;
  responseMode?: string | undefined;
  codeChallenge?: string | undefined;
  codeChallengeMethod?: CodeChallengeMethod | undefined;
};

/** @internal */
export const ResponseType$inboundSchema: z.ZodNativeEnum<typeof ResponseType> =
  z.nativeEnum(ResponseType);

/** @internal */
export const ResponseType$outboundSchema: z.ZodNativeEnum<typeof ResponseType> =
  ResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseType$ {
  /** @deprecated use `ResponseType$inboundSchema` instead. */
  export const inboundSchema = ResponseType$inboundSchema;
  /** @deprecated use `ResponseType$outboundSchema` instead. */
  export const outboundSchema = ResponseType$outboundSchema;
}

/** @internal */
export const CodeChallengeMethod$inboundSchema: z.ZodNativeEnum<
  typeof CodeChallengeMethod
> = z.nativeEnum(CodeChallengeMethod);

/** @internal */
export const CodeChallengeMethod$outboundSchema: z.ZodNativeEnum<
  typeof CodeChallengeMethod
> = CodeChallengeMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CodeChallengeMethod$ {
  /** @deprecated use `CodeChallengeMethod$inboundSchema` instead. */
  export const inboundSchema = CodeChallengeMethod$inboundSchema;
  /** @deprecated use `CodeChallengeMethod$outboundSchema` instead. */
  export const outboundSchema = CodeChallengeMethod$outboundSchema;
}

/** @internal */
export const V1AuthorizeUserRequest$inboundSchema: z.ZodType<
  V1AuthorizeUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  client_id: z.string(),
  response_type: ResponseType$inboundSchema,
  redirect_uri: z.string(),
  scope: z.string().optional(),
  state: z.string().optional(),
  response_mode: z.string().optional(),
  code_challenge: z.string().optional(),
  code_challenge_method: CodeChallengeMethod$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "client_id": "clientId",
    "response_type": "responseType",
    "redirect_uri": "redirectUri",
    "response_mode": "responseMode",
    "code_challenge": "codeChallenge",
    "code_challenge_method": "codeChallengeMethod",
  });
});

/** @internal */
export type V1AuthorizeUserRequest$Outbound = {
  client_id: string;
  response_type: string;
  redirect_uri: string;
  scope?: string | undefined;
  state?: string | undefined;
  response_mode?: string | undefined;
  code_challenge?: string | undefined;
  code_challenge_method?: string | undefined;
};

/** @internal */
export const V1AuthorizeUserRequest$outboundSchema: z.ZodType<
  V1AuthorizeUserRequest$Outbound,
  z.ZodTypeDef,
  V1AuthorizeUserRequest
> = z.object({
  clientId: z.string(),
  responseType: ResponseType$outboundSchema,
  redirectUri: z.string(),
  scope: z.string().optional(),
  state: z.string().optional(),
  responseMode: z.string().optional(),
  codeChallenge: z.string().optional(),
  codeChallengeMethod: CodeChallengeMethod$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    clientId: "client_id",
    responseType: "response_type",
    redirectUri: "redirect_uri",
    responseMode: "response_mode",
    codeChallenge: "code_challenge",
    codeChallengeMethod: "code_challenge_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AuthorizeUserRequest$ {
  /** @deprecated use `V1AuthorizeUserRequest$inboundSchema` instead. */
  export const inboundSchema = V1AuthorizeUserRequest$inboundSchema;
  /** @deprecated use `V1AuthorizeUserRequest$outboundSchema` instead. */
  export const outboundSchema = V1AuthorizeUserRequest$outboundSchema;
  /** @deprecated use `V1AuthorizeUserRequest$Outbound` instead. */
  export type Outbound = V1AuthorizeUserRequest$Outbound;
}

export function v1AuthorizeUserRequestToJSON(
  v1AuthorizeUserRequest: V1AuthorizeUserRequest,
): string {
  return JSON.stringify(
    V1AuthorizeUserRequest$outboundSchema.parse(v1AuthorizeUserRequest),
  );
}

export function v1AuthorizeUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1AuthorizeUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1AuthorizeUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AuthorizeUserRequest' from JSON`,
  );
}
