/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CustomHostnameDetails,
  CustomHostnameDetails$inboundSchema,
  CustomHostnameDetails$Outbound,
  CustomHostnameDetails$outboundSchema,
} from "./customhostnamedetails.js";

export type Errors = {};

export type Messages = {};

export type CfResponse = {
  success: boolean;
  errors: Array<Errors>;
  messages: Array<Messages>;
  result: CustomHostnameDetails;
};

/** @internal */
export const Errors$inboundSchema: z.ZodType<Errors, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Errors$Outbound = {};

/** @internal */
export const Errors$outboundSchema: z.ZodType<
  Errors$Outbound,
  z.ZodTypeDef,
  Errors
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Errors$ {
  /** @deprecated use `Errors$inboundSchema` instead. */
  export const inboundSchema = Errors$inboundSchema;
  /** @deprecated use `Errors$outboundSchema` instead. */
  export const outboundSchema = Errors$outboundSchema;
  /** @deprecated use `Errors$Outbound` instead. */
  export type Outbound = Errors$Outbound;
}

export function errorsToJSON(errors: Errors): string {
  return JSON.stringify(Errors$outboundSchema.parse(errors));
}

export function errorsFromJSON(
  jsonString: string,
): SafeParseResult<Errors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Errors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Errors' from JSON`,
  );
}

/** @internal */
export const Messages$inboundSchema: z.ZodType<
  Messages,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Messages$Outbound = {};

/** @internal */
export const Messages$outboundSchema: z.ZodType<
  Messages$Outbound,
  z.ZodTypeDef,
  Messages
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Messages$ {
  /** @deprecated use `Messages$inboundSchema` instead. */
  export const inboundSchema = Messages$inboundSchema;
  /** @deprecated use `Messages$outboundSchema` instead. */
  export const outboundSchema = Messages$outboundSchema;
  /** @deprecated use `Messages$Outbound` instead. */
  export type Outbound = Messages$Outbound;
}

export function messagesToJSON(messages: Messages): string {
  return JSON.stringify(Messages$outboundSchema.parse(messages));
}

export function messagesFromJSON(
  jsonString: string,
): SafeParseResult<Messages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Messages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Messages' from JSON`,
  );
}

/** @internal */
export const CfResponse$inboundSchema: z.ZodType<
  CfResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  errors: z.array(z.lazy(() => Errors$inboundSchema)),
  messages: z.array(z.lazy(() => Messages$inboundSchema)),
  result: CustomHostnameDetails$inboundSchema,
});

/** @internal */
export type CfResponse$Outbound = {
  success: boolean;
  errors: Array<Errors$Outbound>;
  messages: Array<Messages$Outbound>;
  result: CustomHostnameDetails$Outbound;
};

/** @internal */
export const CfResponse$outboundSchema: z.ZodType<
  CfResponse$Outbound,
  z.ZodTypeDef,
  CfResponse
> = z.object({
  success: z.boolean(),
  errors: z.array(z.lazy(() => Errors$outboundSchema)),
  messages: z.array(z.lazy(() => Messages$outboundSchema)),
  result: CustomHostnameDetails$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CfResponse$ {
  /** @deprecated use `CfResponse$inboundSchema` instead. */
  export const inboundSchema = CfResponse$inboundSchema;
  /** @deprecated use `CfResponse$outboundSchema` instead. */
  export const outboundSchema = CfResponse$outboundSchema;
  /** @deprecated use `CfResponse$Outbound` instead. */
  export type Outbound = CfResponse$Outbound;
}

export function cfResponseToJSON(cfResponse: CfResponse): string {
  return JSON.stringify(CfResponse$outboundSchema.parse(cfResponse));
}

export function cfResponseFromJSON(
  jsonString: string,
): SafeParseResult<CfResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CfResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CfResponse' from JSON`,
  );
}
