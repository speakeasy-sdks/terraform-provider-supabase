/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateApiKeyBodyType = {
  Publishable: "publishable",
  Secret: "secret",
} as const;
export type CreateApiKeyBodyType = ClosedEnum<typeof CreateApiKeyBodyType>;

export type CreateApiKeyBodySecretJwtTemplate = {
  role: string;
};

export type CreateApiKeyBody = {
  type: CreateApiKeyBodyType;
  description?: string | null | undefined;
  secretJwtTemplate?: CreateApiKeyBodySecretJwtTemplate | null | undefined;
};

/** @internal */
export const CreateApiKeyBodyType$inboundSchema: z.ZodNativeEnum<
  typeof CreateApiKeyBodyType
> = z.nativeEnum(CreateApiKeyBodyType);

/** @internal */
export const CreateApiKeyBodyType$outboundSchema: z.ZodNativeEnum<
  typeof CreateApiKeyBodyType
> = CreateApiKeyBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateApiKeyBodyType$ {
  /** @deprecated use `CreateApiKeyBodyType$inboundSchema` instead. */
  export const inboundSchema = CreateApiKeyBodyType$inboundSchema;
  /** @deprecated use `CreateApiKeyBodyType$outboundSchema` instead. */
  export const outboundSchema = CreateApiKeyBodyType$outboundSchema;
}

/** @internal */
export const CreateApiKeyBodySecretJwtTemplate$inboundSchema: z.ZodType<
  CreateApiKeyBodySecretJwtTemplate,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: z.string(),
});

/** @internal */
export type CreateApiKeyBodySecretJwtTemplate$Outbound = {
  role: string;
};

/** @internal */
export const CreateApiKeyBodySecretJwtTemplate$outboundSchema: z.ZodType<
  CreateApiKeyBodySecretJwtTemplate$Outbound,
  z.ZodTypeDef,
  CreateApiKeyBodySecretJwtTemplate
> = z.object({
  role: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateApiKeyBodySecretJwtTemplate$ {
  /** @deprecated use `CreateApiKeyBodySecretJwtTemplate$inboundSchema` instead. */
  export const inboundSchema = CreateApiKeyBodySecretJwtTemplate$inboundSchema;
  /** @deprecated use `CreateApiKeyBodySecretJwtTemplate$outboundSchema` instead. */
  export const outboundSchema =
    CreateApiKeyBodySecretJwtTemplate$outboundSchema;
  /** @deprecated use `CreateApiKeyBodySecretJwtTemplate$Outbound` instead. */
  export type Outbound = CreateApiKeyBodySecretJwtTemplate$Outbound;
}

export function createApiKeyBodySecretJwtTemplateToJSON(
  createApiKeyBodySecretJwtTemplate: CreateApiKeyBodySecretJwtTemplate,
): string {
  return JSON.stringify(
    CreateApiKeyBodySecretJwtTemplate$outboundSchema.parse(
      createApiKeyBodySecretJwtTemplate,
    ),
  );
}

export function createApiKeyBodySecretJwtTemplateFromJSON(
  jsonString: string,
): SafeParseResult<CreateApiKeyBodySecretJwtTemplate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateApiKeyBodySecretJwtTemplate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateApiKeyBodySecretJwtTemplate' from JSON`,
  );
}

/** @internal */
export const CreateApiKeyBody$inboundSchema: z.ZodType<
  CreateApiKeyBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateApiKeyBodyType$inboundSchema,
  description: z.nullable(z.string()).optional(),
  secret_jwt_template: z.nullable(
    z.lazy(() => CreateApiKeyBodySecretJwtTemplate$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "secret_jwt_template": "secretJwtTemplate",
  });
});

/** @internal */
export type CreateApiKeyBody$Outbound = {
  type: string;
  description?: string | null | undefined;
  secret_jwt_template?:
    | CreateApiKeyBodySecretJwtTemplate$Outbound
    | null
    | undefined;
};

/** @internal */
export const CreateApiKeyBody$outboundSchema: z.ZodType<
  CreateApiKeyBody$Outbound,
  z.ZodTypeDef,
  CreateApiKeyBody
> = z.object({
  type: CreateApiKeyBodyType$outboundSchema,
  description: z.nullable(z.string()).optional(),
  secretJwtTemplate: z.nullable(
    z.lazy(() => CreateApiKeyBodySecretJwtTemplate$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    secretJwtTemplate: "secret_jwt_template",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateApiKeyBody$ {
  /** @deprecated use `CreateApiKeyBody$inboundSchema` instead. */
  export const inboundSchema = CreateApiKeyBody$inboundSchema;
  /** @deprecated use `CreateApiKeyBody$outboundSchema` instead. */
  export const outboundSchema = CreateApiKeyBody$outboundSchema;
  /** @deprecated use `CreateApiKeyBody$Outbound` instead. */
  export type Outbound = CreateApiKeyBody$Outbound;
}

export function createApiKeyBodyToJSON(
  createApiKeyBody: CreateApiKeyBody,
): string {
  return JSON.stringify(
    CreateApiKeyBody$outboundSchema.parse(createApiKeyBody),
  );
}

export function createApiKeyBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateApiKeyBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateApiKeyBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateApiKeyBody' from JSON`,
  );
}
