/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { databaseDisableReadonlyModeTemporarily } from "../funcs/databaseDisableReadonlyModeTemporarily.js";
import { databaseEnableWebhook } from "../funcs/databaseEnableWebhook.js";
import { databaseGetPgbouncerConfig } from "../funcs/databaseGetPgbouncerConfig.js";
import { databaseGetPostgresConfig } from "../funcs/databaseGetPostgresConfig.js";
import { databaseGetReadonlyModeStatus } from "../funcs/databaseGetReadonlyModeStatus.js";
import { databaseGetSnippet } from "../funcs/databaseGetSnippet.js";
import { databaseGetSSLEnforcement } from "../funcs/databaseGetSSLEnforcement.js";
import { databaseGetSupavisorConfig } from "../funcs/databaseGetSupavisorConfig.js";
import { databaseListBackups } from "../funcs/databaseListBackups.js";
import { databaseRemoveReadReplica } from "../funcs/databaseRemoveReadReplica.js";
import { databaseRestorePitrBackup } from "../funcs/databaseRestorePitrBackup.js";
import { databaseRunQuery } from "../funcs/databaseRunQuery.js";
import { databaseSetupReadReplica } from "../funcs/databaseSetupReadReplica.js";
import { databaseUpdateSSLEnforcement } from "../funcs/databaseUpdateSSLEnforcement.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Database extends ClientSDK {
  /**
   * Gets a specific SQL snippet
   */
  async getSnippet(
    request: operations.V1GetASnippetRequest,
    options?: RequestOptions,
  ): Promise<components.SnippetResponse> {
    return unwrapAsync(databaseGetSnippet(
      this,
      request,
      options,
    ));
  }

  /**
   * [Beta] Get project's SSL enforcement configuration.
   */
  async getSSLEnforcement(
    request: operations.V1GetSslEnforcementConfigRequest,
    options?: RequestOptions,
  ): Promise<components.SslEnforcementResponse> {
    return unwrapAsync(databaseGetSSLEnforcement(
      this,
      request,
      options,
    ));
  }

  /**
   * [Beta] Update project's SSL enforcement configuration.
   */
  async updateSSLEnforcement(
    request: operations.V1UpdateSslEnforcementConfigRequest,
    options?: RequestOptions,
  ): Promise<components.SslEnforcementResponse> {
    return unwrapAsync(databaseUpdateSSLEnforcement(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns project's readonly mode status
   */
  async getReadonlyModeStatus(
    request: operations.V1GetReadonlyModeStatusRequest,
    options?: RequestOptions,
  ): Promise<components.ReadOnlyStatusResponse> {
    return unwrapAsync(databaseGetReadonlyModeStatus(
      this,
      request,
      options,
    ));
  }

  /**
   * Disables project's readonly mode for the next 15 minutes
   */
  async disableReadonlyModeTemporarily(
    request: operations.V1DisableReadonlyModeTemporarilyRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(databaseDisableReadonlyModeTemporarily(
      this,
      request,
      options,
    ));
  }

  /**
   * [Beta] Set up a read replica
   */
  async setupReadReplica(
    request: operations.V1SetupAReadReplicaRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(databaseSetupReadReplica(
      this,
      request,
      options,
    ));
  }

  /**
   * [Beta] Remove a read replica
   */
  async removeReadReplica(
    request: operations.V1RemoveAReadReplicaRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(databaseRemoveReadReplica(
      this,
      request,
      options,
    ));
  }

  /**
   * Gets project's Postgres config
   */
  async getPostgresConfig(
    request: operations.V1GetPostgresConfigRequest,
    options?: RequestOptions,
  ): Promise<components.PostgresConfigResponse> {
    return unwrapAsync(databaseGetPostgresConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Get project's pgbouncer config
   */
  async getPgbouncerConfig(
    request: operations.V1GetProjectPgbouncerConfigRequest,
    options?: RequestOptions,
  ): Promise<components.V1PgbouncerConfigResponse> {
    return unwrapAsync(databaseGetPgbouncerConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * Gets project's supavisor config
   */
  async getSupavisorConfig(
    request: operations.V1GetSupavisorConfigRequest,
    options?: RequestOptions,
  ): Promise<Array<components.SupavisorConfigResponse>> {
    return unwrapAsync(databaseGetSupavisorConfig(
      this,
      request,
      options,
    ));
  }

  /**
   * [Beta] Run sql query
   */
  async runQuery(
    request: operations.V1RunAQueryRequest,
    options?: RequestOptions,
  ): Promise<operations.V1RunAQueryResponseBody> {
    return unwrapAsync(databaseRunQuery(
      this,
      request,
      options,
    ));
  }

  /**
   * [Beta] Enables Database Webhooks on the project
   */
  async enableWebhook(
    request: operations.V1EnableDatabaseWebhookRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(databaseEnableWebhook(
      this,
      request,
      options,
    ));
  }

  /**
   * Lists all backups
   */
  async listBackups(
    request: operations.V1ListAllBackupsRequest,
    options?: RequestOptions,
  ): Promise<components.V1BackupsResponse> {
    return unwrapAsync(databaseListBackups(
      this,
      request,
      options,
    ));
  }

  /**
   * Restores a PITR backup for a database
   */
  async restorePitrBackup(
    request: operations.V1RestorePitrBackupRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(databaseRestorePitrBackup(
      this,
      request,
      options,
    ));
  }
}
