/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateCustomHostnameBody = {
  customHostname: string;
};

/** @internal */
export const UpdateCustomHostnameBody$inboundSchema: z.ZodType<
  UpdateCustomHostnameBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  custom_hostname: z.string(),
}).transform((v) => {
  return remap$(v, {
    "custom_hostname": "customHostname",
  });
});

/** @internal */
export type UpdateCustomHostnameBody$Outbound = {
  custom_hostname: string;
};

/** @internal */
export const UpdateCustomHostnameBody$outboundSchema: z.ZodType<
  UpdateCustomHostnameBody$Outbound,
  z.ZodTypeDef,
  UpdateCustomHostnameBody
> = z.object({
  customHostname: z.string(),
}).transform((v) => {
  return remap$(v, {
    customHostname: "custom_hostname",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomHostnameBody$ {
  /** @deprecated use `UpdateCustomHostnameBody$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomHostnameBody$inboundSchema;
  /** @deprecated use `UpdateCustomHostnameBody$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomHostnameBody$outboundSchema;
  /** @deprecated use `UpdateCustomHostnameBody$Outbound` instead. */
  export type Outbound = UpdateCustomHostnameBody$Outbound;
}

export function updateCustomHostnameBodyToJSON(
  updateCustomHostnameBody: UpdateCustomHostnameBody,
): string {
  return JSON.stringify(
    UpdateCustomHostnameBody$outboundSchema.parse(updateCustomHostnameBody),
  );
}

export function updateCustomHostnameBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCustomHostnameBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCustomHostnameBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCustomHostnameBody' from JSON`,
  );
}
