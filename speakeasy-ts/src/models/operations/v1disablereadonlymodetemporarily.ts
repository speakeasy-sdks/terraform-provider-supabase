/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1DisableReadonlyModeTemporarilyRequest = {
  /**
   * Project ref
   */
  ref: string;
};

/** @internal */
export const V1DisableReadonlyModeTemporarilyRequest$inboundSchema: z.ZodType<
  V1DisableReadonlyModeTemporarilyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ref: z.string(),
});

/** @internal */
export type V1DisableReadonlyModeTemporarilyRequest$Outbound = {
  ref: string;
};

/** @internal */
export const V1DisableReadonlyModeTemporarilyRequest$outboundSchema: z.ZodType<
  V1DisableReadonlyModeTemporarilyRequest$Outbound,
  z.ZodTypeDef,
  V1DisableReadonlyModeTemporarilyRequest
> = z.object({
  ref: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1DisableReadonlyModeTemporarilyRequest$ {
  /** @deprecated use `V1DisableReadonlyModeTemporarilyRequest$inboundSchema` instead. */
  export const inboundSchema =
    V1DisableReadonlyModeTemporarilyRequest$inboundSchema;
  /** @deprecated use `V1DisableReadonlyModeTemporarilyRequest$outboundSchema` instead. */
  export const outboundSchema =
    V1DisableReadonlyModeTemporarilyRequest$outboundSchema;
  /** @deprecated use `V1DisableReadonlyModeTemporarilyRequest$Outbound` instead. */
  export type Outbound = V1DisableReadonlyModeTemporarilyRequest$Outbound;
}

export function v1DisableReadonlyModeTemporarilyRequestToJSON(
  v1DisableReadonlyModeTemporarilyRequest:
    V1DisableReadonlyModeTemporarilyRequest,
): string {
  return JSON.stringify(
    V1DisableReadonlyModeTemporarilyRequest$outboundSchema.parse(
      v1DisableReadonlyModeTemporarilyRequest,
    ),
  );
}

export function v1DisableReadonlyModeTemporarilyRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  V1DisableReadonlyModeTemporarilyRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V1DisableReadonlyModeTemporarilyRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V1DisableReadonlyModeTemporarilyRequest' from JSON`,
  );
}
