/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteTPAForProjectRequest = {
  /**
   * Project ref
   */
  ref: string;
  tpaId: string;
};

/** @internal */
export const DeleteTPAForProjectRequest$inboundSchema: z.ZodType<
  DeleteTPAForProjectRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ref: z.string(),
  tpa_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "tpa_id": "tpaId",
  });
});

/** @internal */
export type DeleteTPAForProjectRequest$Outbound = {
  ref: string;
  tpa_id: string;
};

/** @internal */
export const DeleteTPAForProjectRequest$outboundSchema: z.ZodType<
  DeleteTPAForProjectRequest$Outbound,
  z.ZodTypeDef,
  DeleteTPAForProjectRequest
> = z.object({
  ref: z.string(),
  tpaId: z.string(),
}).transform((v) => {
  return remap$(v, {
    tpaId: "tpa_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTPAForProjectRequest$ {
  /** @deprecated use `DeleteTPAForProjectRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteTPAForProjectRequest$inboundSchema;
  /** @deprecated use `DeleteTPAForProjectRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteTPAForProjectRequest$outboundSchema;
  /** @deprecated use `DeleteTPAForProjectRequest$Outbound` instead. */
  export type Outbound = DeleteTPAForProjectRequest$Outbound;
}

export function deleteTPAForProjectRequestToJSON(
  deleteTPAForProjectRequest: DeleteTPAForProjectRequest,
): string {
  return JSON.stringify(
    DeleteTPAForProjectRequest$outboundSchema.parse(deleteTPAForProjectRequest),
  );
}

export function deleteTPAForProjectRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTPAForProjectRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTPAForProjectRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTPAForProjectRequest' from JSON`,
  );
}
