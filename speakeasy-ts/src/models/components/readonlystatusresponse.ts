/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ReadOnlyStatusResponse = {
  enabled: boolean;
  overrideEnabled: boolean;
  overrideActiveUntil: string;
};

/** @internal */
export const ReadOnlyStatusResponse$inboundSchema: z.ZodType<
  ReadOnlyStatusResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean(),
  override_enabled: z.boolean(),
  override_active_until: z.string(),
}).transform((v) => {
  return remap$(v, {
    "override_enabled": "overrideEnabled",
    "override_active_until": "overrideActiveUntil",
  });
});

/** @internal */
export type ReadOnlyStatusResponse$Outbound = {
  enabled: boolean;
  override_enabled: boolean;
  override_active_until: string;
};

/** @internal */
export const ReadOnlyStatusResponse$outboundSchema: z.ZodType<
  ReadOnlyStatusResponse$Outbound,
  z.ZodTypeDef,
  ReadOnlyStatusResponse
> = z.object({
  enabled: z.boolean(),
  overrideEnabled: z.boolean(),
  overrideActiveUntil: z.string(),
}).transform((v) => {
  return remap$(v, {
    overrideEnabled: "override_enabled",
    overrideActiveUntil: "override_active_until",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadOnlyStatusResponse$ {
  /** @deprecated use `ReadOnlyStatusResponse$inboundSchema` instead. */
  export const inboundSchema = ReadOnlyStatusResponse$inboundSchema;
  /** @deprecated use `ReadOnlyStatusResponse$outboundSchema` instead. */
  export const outboundSchema = ReadOnlyStatusResponse$outboundSchema;
  /** @deprecated use `ReadOnlyStatusResponse$Outbound` instead. */
  export type Outbound = ReadOnlyStatusResponse$Outbound;
}

export function readOnlyStatusResponseToJSON(
  readOnlyStatusResponse: ReadOnlyStatusResponse,
): string {
  return JSON.stringify(
    ReadOnlyStatusResponse$outboundSchema.parse(readOnlyStatusResponse),
  );
}

export function readOnlyStatusResponseFromJSON(
  jsonString: string,
): SafeParseResult<ReadOnlyStatusResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadOnlyStatusResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadOnlyStatusResponse' from JSON`,
  );
}
