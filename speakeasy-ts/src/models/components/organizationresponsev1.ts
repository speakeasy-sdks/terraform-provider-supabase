/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OrganizationResponseV1 = {
  id: string;
  name: string;
};

/** @internal */
export const OrganizationResponseV1$inboundSchema: z.ZodType<
  OrganizationResponseV1,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
});

/** @internal */
export type OrganizationResponseV1$Outbound = {
  id: string;
  name: string;
};

/** @internal */
export const OrganizationResponseV1$outboundSchema: z.ZodType<
  OrganizationResponseV1$Outbound,
  z.ZodTypeDef,
  OrganizationResponseV1
> = z.object({
  id: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationResponseV1$ {
  /** @deprecated use `OrganizationResponseV1$inboundSchema` instead. */
  export const inboundSchema = OrganizationResponseV1$inboundSchema;
  /** @deprecated use `OrganizationResponseV1$outboundSchema` instead. */
  export const outboundSchema = OrganizationResponseV1$outboundSchema;
  /** @deprecated use `OrganizationResponseV1$Outbound` instead. */
  export type Outbound = OrganizationResponseV1$Outbound;
}

export function organizationResponseV1ToJSON(
  organizationResponseV1: OrganizationResponseV1,
): string {
  return JSON.stringify(
    OrganizationResponseV1$outboundSchema.parse(organizationResponseV1),
  );
}

export function organizationResponseV1FromJSON(
  jsonString: string,
): SafeParseResult<OrganizationResponseV1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationResponseV1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationResponseV1' from JSON`,
  );
}
