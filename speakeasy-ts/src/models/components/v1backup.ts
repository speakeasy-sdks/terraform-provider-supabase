/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const V1BackupStatus = {
  Completed: "COMPLETED",
  Failed: "FAILED",
  Pending: "PENDING",
  Removed: "REMOVED",
  Archived: "ARCHIVED",
  Cancelled: "CANCELLED",
} as const;
export type V1BackupStatus = ClosedEnum<typeof V1BackupStatus>;

export type V1Backup = {
  status: V1BackupStatus;
  isPhysicalBackup: boolean;
  insertedAt: string;
};

/** @internal */
export const V1BackupStatus$inboundSchema: z.ZodNativeEnum<
  typeof V1BackupStatus
> = z.nativeEnum(V1BackupStatus);

/** @internal */
export const V1BackupStatus$outboundSchema: z.ZodNativeEnum<
  typeof V1BackupStatus
> = V1BackupStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1BackupStatus$ {
  /** @deprecated use `V1BackupStatus$inboundSchema` instead. */
  export const inboundSchema = V1BackupStatus$inboundSchema;
  /** @deprecated use `V1BackupStatus$outboundSchema` instead. */
  export const outboundSchema = V1BackupStatus$outboundSchema;
}

/** @internal */
export const V1Backup$inboundSchema: z.ZodType<
  V1Backup,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: V1BackupStatus$inboundSchema,
  is_physical_backup: z.boolean(),
  inserted_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "is_physical_backup": "isPhysicalBackup",
    "inserted_at": "insertedAt",
  });
});

/** @internal */
export type V1Backup$Outbound = {
  status: string;
  is_physical_backup: boolean;
  inserted_at: string;
};

/** @internal */
export const V1Backup$outboundSchema: z.ZodType<
  V1Backup$Outbound,
  z.ZodTypeDef,
  V1Backup
> = z.object({
  status: V1BackupStatus$outboundSchema,
  isPhysicalBackup: z.boolean(),
  insertedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    isPhysicalBackup: "is_physical_backup",
    insertedAt: "inserted_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1Backup$ {
  /** @deprecated use `V1Backup$inboundSchema` instead. */
  export const inboundSchema = V1Backup$inboundSchema;
  /** @deprecated use `V1Backup$outboundSchema` instead. */
  export const outboundSchema = V1Backup$outboundSchema;
  /** @deprecated use `V1Backup$Outbound` instead. */
  export type Outbound = V1Backup$Outbound;
}

export function v1BackupToJSON(v1Backup: V1Backup): string {
  return JSON.stringify(V1Backup$outboundSchema.parse(v1Backup));
}

export function v1BackupFromJSON(
  jsonString: string,
): SafeParseResult<V1Backup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1Backup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1Backup' from JSON`,
  );
}
