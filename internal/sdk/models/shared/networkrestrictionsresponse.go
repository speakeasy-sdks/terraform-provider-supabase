// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Entitlement string

const (
	EntitlementDisallowed Entitlement = "disallowed"
	EntitlementAllowed    Entitlement = "allowed"
)

func (e Entitlement) ToPointer() *Entitlement {
	return &e
}
func (e *Entitlement) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disallowed":
		fallthrough
	case "allowed":
		*e = Entitlement(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Entitlement: %v", v)
	}
}

type NetworkRestrictionsResponseStatus string

const (
	NetworkRestrictionsResponseStatusStored  NetworkRestrictionsResponseStatus = "stored"
	NetworkRestrictionsResponseStatusApplied NetworkRestrictionsResponseStatus = "applied"
)

func (e NetworkRestrictionsResponseStatus) ToPointer() *NetworkRestrictionsResponseStatus {
	return &e
}
func (e *NetworkRestrictionsResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "stored":
		fallthrough
	case "applied":
		*e = NetworkRestrictionsResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NetworkRestrictionsResponseStatus: %v", v)
	}
}

type NetworkRestrictionsResponse struct {
	Entitlement Entitlement                       `json:"entitlement"`
	Config      NetworkRestrictionsRequest        `json:"config"`
	OldConfig   *NetworkRestrictionsRequest       `json:"old_config,omitempty"`
	Status      NetworkRestrictionsResponseStatus `json:"status"`
}

func (o *NetworkRestrictionsResponse) GetEntitlement() Entitlement {
	if o == nil {
		return Entitlement("")
	}
	return o.Entitlement
}

func (o *NetworkRestrictionsResponse) GetConfig() NetworkRestrictionsRequest {
	if o == nil {
		return NetworkRestrictionsRequest{}
	}
	return o.Config
}

func (o *NetworkRestrictionsResponse) GetOldConfig() *NetworkRestrictionsRequest {
	if o == nil {
		return nil
	}
	return o.OldConfig
}

func (o *NetworkRestrictionsResponse) GetStatus() NetworkRestrictionsResponseStatus {
	if o == nil {
		return NetworkRestrictionsResponseStatus("")
	}
	return o.Status
}
