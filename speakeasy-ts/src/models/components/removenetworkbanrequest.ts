/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoveNetworkBanRequest = {
  ipv4Addresses: Array<string>;
};

/** @internal */
export const RemoveNetworkBanRequest$inboundSchema: z.ZodType<
  RemoveNetworkBanRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ipv4_addresses: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "ipv4_addresses": "ipv4Addresses",
  });
});

/** @internal */
export type RemoveNetworkBanRequest$Outbound = {
  ipv4_addresses: Array<string>;
};

/** @internal */
export const RemoveNetworkBanRequest$outboundSchema: z.ZodType<
  RemoveNetworkBanRequest$Outbound,
  z.ZodTypeDef,
  RemoveNetworkBanRequest
> = z.object({
  ipv4Addresses: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    ipv4Addresses: "ipv4_addresses",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveNetworkBanRequest$ {
  /** @deprecated use `RemoveNetworkBanRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveNetworkBanRequest$inboundSchema;
  /** @deprecated use `RemoveNetworkBanRequest$outboundSchema` instead. */
  export const outboundSchema = RemoveNetworkBanRequest$outboundSchema;
  /** @deprecated use `RemoveNetworkBanRequest$Outbound` instead. */
  export type Outbound = RemoveNetworkBanRequest$Outbound;
}

export function removeNetworkBanRequestToJSON(
  removeNetworkBanRequest: RemoveNetworkBanRequest,
): string {
  return JSON.stringify(
    RemoveNetworkBanRequest$outboundSchema.parse(removeNetworkBanRequest),
  );
}

export function removeNetworkBanRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveNetworkBanRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveNetworkBanRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveNetworkBanRequest' from JSON`,
  );
}
