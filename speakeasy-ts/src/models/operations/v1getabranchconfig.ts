/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1GetABranchConfigRequest = {
  /**
   * Branch ID
   */
  branchId: string;
};

/** @internal */
export const V1GetABranchConfigRequest$inboundSchema: z.ZodType<
  V1GetABranchConfigRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  branch_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "branch_id": "branchId",
  });
});

/** @internal */
export type V1GetABranchConfigRequest$Outbound = {
  branch_id: string;
};

/** @internal */
export const V1GetABranchConfigRequest$outboundSchema: z.ZodType<
  V1GetABranchConfigRequest$Outbound,
  z.ZodTypeDef,
  V1GetABranchConfigRequest
> = z.object({
  branchId: z.string(),
}).transform((v) => {
  return remap$(v, {
    branchId: "branch_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1GetABranchConfigRequest$ {
  /** @deprecated use `V1GetABranchConfigRequest$inboundSchema` instead. */
  export const inboundSchema = V1GetABranchConfigRequest$inboundSchema;
  /** @deprecated use `V1GetABranchConfigRequest$outboundSchema` instead. */
  export const outboundSchema = V1GetABranchConfigRequest$outboundSchema;
  /** @deprecated use `V1GetABranchConfigRequest$Outbound` instead. */
  export type Outbound = V1GetABranchConfigRequest$Outbound;
}

export function v1GetABranchConfigRequestToJSON(
  v1GetABranchConfigRequest: V1GetABranchConfigRequest,
): string {
  return JSON.stringify(
    V1GetABranchConfigRequest$outboundSchema.parse(v1GetABranchConfigRequest),
  );
}

export function v1GetABranchConfigRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1GetABranchConfigRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1GetABranchConfigRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1GetABranchConfigRequest' from JSON`,
  );
}
