/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BranchResetResponse = {
  workflowRunId: string;
  message: string;
};

/** @internal */
export const BranchResetResponse$inboundSchema: z.ZodType<
  BranchResetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  workflow_run_id: z.string(),
  message: z.string(),
}).transform((v) => {
  return remap$(v, {
    "workflow_run_id": "workflowRunId",
  });
});

/** @internal */
export type BranchResetResponse$Outbound = {
  workflow_run_id: string;
  message: string;
};

/** @internal */
export const BranchResetResponse$outboundSchema: z.ZodType<
  BranchResetResponse$Outbound,
  z.ZodTypeDef,
  BranchResetResponse
> = z.object({
  workflowRunId: z.string(),
  message: z.string(),
}).transform((v) => {
  return remap$(v, {
    workflowRunId: "workflow_run_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BranchResetResponse$ {
  /** @deprecated use `BranchResetResponse$inboundSchema` instead. */
  export const inboundSchema = BranchResetResponse$inboundSchema;
  /** @deprecated use `BranchResetResponse$outboundSchema` instead. */
  export const outboundSchema = BranchResetResponse$outboundSchema;
  /** @deprecated use `BranchResetResponse$Outbound` instead. */
  export type Outbound = BranchResetResponse$Outbound;
}

export function branchResetResponseToJSON(
  branchResetResponse: BranchResetResponse,
): string {
  return JSON.stringify(
    BranchResetResponse$outboundSchema.parse(branchResetResponse),
  );
}

export function branchResetResponseFromJSON(
  jsonString: string,
): SafeParseResult<BranchResetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BranchResetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BranchResetResponse' from JSON`,
  );
}
