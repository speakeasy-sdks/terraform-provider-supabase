/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ReleaseChannel,
  ReleaseChannel$inboundSchema,
  ReleaseChannel$outboundSchema,
} from "./releasechannel.js";

export type UpgradeDatabaseBody = {
  releaseChannel: ReleaseChannel;
  targetVersion: string;
};

/** @internal */
export const UpgradeDatabaseBody$inboundSchema: z.ZodType<
  UpgradeDatabaseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  release_channel: ReleaseChannel$inboundSchema,
  target_version: z.string(),
}).transform((v) => {
  return remap$(v, {
    "release_channel": "releaseChannel",
    "target_version": "targetVersion",
  });
});

/** @internal */
export type UpgradeDatabaseBody$Outbound = {
  release_channel: string;
  target_version: string;
};

/** @internal */
export const UpgradeDatabaseBody$outboundSchema: z.ZodType<
  UpgradeDatabaseBody$Outbound,
  z.ZodTypeDef,
  UpgradeDatabaseBody
> = z.object({
  releaseChannel: ReleaseChannel$outboundSchema,
  targetVersion: z.string(),
}).transform((v) => {
  return remap$(v, {
    releaseChannel: "release_channel",
    targetVersion: "target_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpgradeDatabaseBody$ {
  /** @deprecated use `UpgradeDatabaseBody$inboundSchema` instead. */
  export const inboundSchema = UpgradeDatabaseBody$inboundSchema;
  /** @deprecated use `UpgradeDatabaseBody$outboundSchema` instead. */
  export const outboundSchema = UpgradeDatabaseBody$outboundSchema;
  /** @deprecated use `UpgradeDatabaseBody$Outbound` instead. */
  export type Outbound = UpgradeDatabaseBody$Outbound;
}

export function upgradeDatabaseBodyToJSON(
  upgradeDatabaseBody: UpgradeDatabaseBody,
): string {
  return JSON.stringify(
    UpgradeDatabaseBody$outboundSchema.parse(upgradeDatabaseBody),
  );
}

export function upgradeDatabaseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpgradeDatabaseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpgradeDatabaseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpgradeDatabaseBody' from JSON`,
  );
}
