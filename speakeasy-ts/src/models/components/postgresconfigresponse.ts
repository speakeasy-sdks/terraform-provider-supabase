/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const SessionReplicationRole = {
  Origin: "origin",
  Replica: "replica",
  Local: "local",
} as const;
export type SessionReplicationRole = ClosedEnum<typeof SessionReplicationRole>;

export type PostgresConfigResponse = {
  effectiveCacheSize?: string | undefined;
  logicalDecodingWorkMem?: string | undefined;
  maintenanceWorkMem?: string | undefined;
  maxConnections?: number | undefined;
  maxLocksPerTransaction?: number | undefined;
  maxParallelMaintenanceWorkers?: number | undefined;
  maxParallelWorkers?: number | undefined;
  maxParallelWorkersPerGather?: number | undefined;
  maxReplicationSlots?: number | undefined;
  maxSlotWalKeepSize?: string | undefined;
  maxStandbyArchiveDelay?: string | undefined;
  maxStandbyStreamingDelay?: string | undefined;
  maxWalSize?: string | undefined;
  maxWalSenders?: number | undefined;
  maxWorkerProcesses?: number | undefined;
  sharedBuffers?: string | undefined;
  statementTimeout?: string | undefined;
  trackCommitTimestamp?: boolean | undefined;
  walKeepSize?: string | undefined;
  walSenderTimeout?: string | undefined;
  workMem?: string | undefined;
  sessionReplicationRole?: SessionReplicationRole | undefined;
};

/** @internal */
export const SessionReplicationRole$inboundSchema: z.ZodNativeEnum<
  typeof SessionReplicationRole
> = z.nativeEnum(SessionReplicationRole);

/** @internal */
export const SessionReplicationRole$outboundSchema: z.ZodNativeEnum<
  typeof SessionReplicationRole
> = SessionReplicationRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SessionReplicationRole$ {
  /** @deprecated use `SessionReplicationRole$inboundSchema` instead. */
  export const inboundSchema = SessionReplicationRole$inboundSchema;
  /** @deprecated use `SessionReplicationRole$outboundSchema` instead. */
  export const outboundSchema = SessionReplicationRole$outboundSchema;
}

/** @internal */
export const PostgresConfigResponse$inboundSchema: z.ZodType<
  PostgresConfigResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  effective_cache_size: z.string().optional(),
  logical_decoding_work_mem: z.string().optional(),
  maintenance_work_mem: z.string().optional(),
  max_connections: z.number().int().optional(),
  max_locks_per_transaction: z.number().int().optional(),
  max_parallel_maintenance_workers: z.number().int().optional(),
  max_parallel_workers: z.number().int().optional(),
  max_parallel_workers_per_gather: z.number().int().optional(),
  max_replication_slots: z.number().int().optional(),
  max_slot_wal_keep_size: z.string().optional(),
  max_standby_archive_delay: z.string().optional(),
  max_standby_streaming_delay: z.string().optional(),
  max_wal_size: z.string().optional(),
  max_wal_senders: z.number().int().optional(),
  max_worker_processes: z.number().int().optional(),
  shared_buffers: z.string().optional(),
  statement_timeout: z.string().optional(),
  track_commit_timestamp: z.boolean().optional(),
  wal_keep_size: z.string().optional(),
  wal_sender_timeout: z.string().optional(),
  work_mem: z.string().optional(),
  session_replication_role: SessionReplicationRole$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "effective_cache_size": "effectiveCacheSize",
    "logical_decoding_work_mem": "logicalDecodingWorkMem",
    "maintenance_work_mem": "maintenanceWorkMem",
    "max_connections": "maxConnections",
    "max_locks_per_transaction": "maxLocksPerTransaction",
    "max_parallel_maintenance_workers": "maxParallelMaintenanceWorkers",
    "max_parallel_workers": "maxParallelWorkers",
    "max_parallel_workers_per_gather": "maxParallelWorkersPerGather",
    "max_replication_slots": "maxReplicationSlots",
    "max_slot_wal_keep_size": "maxSlotWalKeepSize",
    "max_standby_archive_delay": "maxStandbyArchiveDelay",
    "max_standby_streaming_delay": "maxStandbyStreamingDelay",
    "max_wal_size": "maxWalSize",
    "max_wal_senders": "maxWalSenders",
    "max_worker_processes": "maxWorkerProcesses",
    "shared_buffers": "sharedBuffers",
    "statement_timeout": "statementTimeout",
    "track_commit_timestamp": "trackCommitTimestamp",
    "wal_keep_size": "walKeepSize",
    "wal_sender_timeout": "walSenderTimeout",
    "work_mem": "workMem",
    "session_replication_role": "sessionReplicationRole",
  });
});

/** @internal */
export type PostgresConfigResponse$Outbound = {
  effective_cache_size?: string | undefined;
  logical_decoding_work_mem?: string | undefined;
  maintenance_work_mem?: string | undefined;
  max_connections?: number | undefined;
  max_locks_per_transaction?: number | undefined;
  max_parallel_maintenance_workers?: number | undefined;
  max_parallel_workers?: number | undefined;
  max_parallel_workers_per_gather?: number | undefined;
  max_replication_slots?: number | undefined;
  max_slot_wal_keep_size?: string | undefined;
  max_standby_archive_delay?: string | undefined;
  max_standby_streaming_delay?: string | undefined;
  max_wal_size?: string | undefined;
  max_wal_senders?: number | undefined;
  max_worker_processes?: number | undefined;
  shared_buffers?: string | undefined;
  statement_timeout?: string | undefined;
  track_commit_timestamp?: boolean | undefined;
  wal_keep_size?: string | undefined;
  wal_sender_timeout?: string | undefined;
  work_mem?: string | undefined;
  session_replication_role?: string | undefined;
};

/** @internal */
export const PostgresConfigResponse$outboundSchema: z.ZodType<
  PostgresConfigResponse$Outbound,
  z.ZodTypeDef,
  PostgresConfigResponse
> = z.object({
  effectiveCacheSize: z.string().optional(),
  logicalDecodingWorkMem: z.string().optional(),
  maintenanceWorkMem: z.string().optional(),
  maxConnections: z.number().int().optional(),
  maxLocksPerTransaction: z.number().int().optional(),
  maxParallelMaintenanceWorkers: z.number().int().optional(),
  maxParallelWorkers: z.number().int().optional(),
  maxParallelWorkersPerGather: z.number().int().optional(),
  maxReplicationSlots: z.number().int().optional(),
  maxSlotWalKeepSize: z.string().optional(),
  maxStandbyArchiveDelay: z.string().optional(),
  maxStandbyStreamingDelay: z.string().optional(),
  maxWalSize: z.string().optional(),
  maxWalSenders: z.number().int().optional(),
  maxWorkerProcesses: z.number().int().optional(),
  sharedBuffers: z.string().optional(),
  statementTimeout: z.string().optional(),
  trackCommitTimestamp: z.boolean().optional(),
  walKeepSize: z.string().optional(),
  walSenderTimeout: z.string().optional(),
  workMem: z.string().optional(),
  sessionReplicationRole: SessionReplicationRole$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    effectiveCacheSize: "effective_cache_size",
    logicalDecodingWorkMem: "logical_decoding_work_mem",
    maintenanceWorkMem: "maintenance_work_mem",
    maxConnections: "max_connections",
    maxLocksPerTransaction: "max_locks_per_transaction",
    maxParallelMaintenanceWorkers: "max_parallel_maintenance_workers",
    maxParallelWorkers: "max_parallel_workers",
    maxParallelWorkersPerGather: "max_parallel_workers_per_gather",
    maxReplicationSlots: "max_replication_slots",
    maxSlotWalKeepSize: "max_slot_wal_keep_size",
    maxStandbyArchiveDelay: "max_standby_archive_delay",
    maxStandbyStreamingDelay: "max_standby_streaming_delay",
    maxWalSize: "max_wal_size",
    maxWalSenders: "max_wal_senders",
    maxWorkerProcesses: "max_worker_processes",
    sharedBuffers: "shared_buffers",
    statementTimeout: "statement_timeout",
    trackCommitTimestamp: "track_commit_timestamp",
    walKeepSize: "wal_keep_size",
    walSenderTimeout: "wal_sender_timeout",
    workMem: "work_mem",
    sessionReplicationRole: "session_replication_role",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostgresConfigResponse$ {
  /** @deprecated use `PostgresConfigResponse$inboundSchema` instead. */
  export const inboundSchema = PostgresConfigResponse$inboundSchema;
  /** @deprecated use `PostgresConfigResponse$outboundSchema` instead. */
  export const outboundSchema = PostgresConfigResponse$outboundSchema;
  /** @deprecated use `PostgresConfigResponse$Outbound` instead. */
  export type Outbound = PostgresConfigResponse$Outbound;
}

export function postgresConfigResponseToJSON(
  postgresConfigResponse: PostgresConfigResponse,
): string {
  return JSON.stringify(
    PostgresConfigResponse$outboundSchema.parse(postgresConfigResponse),
  );
}

export function postgresConfigResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostgresConfigResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostgresConfigResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostgresConfigResponse' from JSON`,
  );
}
