/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Region you want your read replica to reside in
 */
export const ReadReplicaRegion = {
  UsEast1: "us-east-1",
  UsEast2: "us-east-2",
  UsWest1: "us-west-1",
  UsWest2: "us-west-2",
  ApEast1: "ap-east-1",
  ApSoutheast1: "ap-southeast-1",
  ApNortheast1: "ap-northeast-1",
  ApNortheast2: "ap-northeast-2",
  ApSoutheast2: "ap-southeast-2",
  EuWest1: "eu-west-1",
  EuWest2: "eu-west-2",
  EuWest3: "eu-west-3",
  EuNorth1: "eu-north-1",
  EuCentral1: "eu-central-1",
  EuCentral2: "eu-central-2",
  CaCentral1: "ca-central-1",
  ApSouth1: "ap-south-1",
  SaEast1: "sa-east-1",
} as const;
/**
 * Region you want your read replica to reside in
 */
export type ReadReplicaRegion = ClosedEnum<typeof ReadReplicaRegion>;

export type SetUpReadReplicaBody = {
  /**
   * Region you want your read replica to reside in
   */
  readReplicaRegion: ReadReplicaRegion;
};

/** @internal */
export const ReadReplicaRegion$inboundSchema: z.ZodNativeEnum<
  typeof ReadReplicaRegion
> = z.nativeEnum(ReadReplicaRegion);

/** @internal */
export const ReadReplicaRegion$outboundSchema: z.ZodNativeEnum<
  typeof ReadReplicaRegion
> = ReadReplicaRegion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadReplicaRegion$ {
  /** @deprecated use `ReadReplicaRegion$inboundSchema` instead. */
  export const inboundSchema = ReadReplicaRegion$inboundSchema;
  /** @deprecated use `ReadReplicaRegion$outboundSchema` instead. */
  export const outboundSchema = ReadReplicaRegion$outboundSchema;
}

/** @internal */
export const SetUpReadReplicaBody$inboundSchema: z.ZodType<
  SetUpReadReplicaBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  read_replica_region: ReadReplicaRegion$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "read_replica_region": "readReplicaRegion",
  });
});

/** @internal */
export type SetUpReadReplicaBody$Outbound = {
  read_replica_region: string;
};

/** @internal */
export const SetUpReadReplicaBody$outboundSchema: z.ZodType<
  SetUpReadReplicaBody$Outbound,
  z.ZodTypeDef,
  SetUpReadReplicaBody
> = z.object({
  readReplicaRegion: ReadReplicaRegion$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    readReplicaRegion: "read_replica_region",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetUpReadReplicaBody$ {
  /** @deprecated use `SetUpReadReplicaBody$inboundSchema` instead. */
  export const inboundSchema = SetUpReadReplicaBody$inboundSchema;
  /** @deprecated use `SetUpReadReplicaBody$outboundSchema` instead. */
  export const outboundSchema = SetUpReadReplicaBody$outboundSchema;
  /** @deprecated use `SetUpReadReplicaBody$Outbound` instead. */
  export type Outbound = SetUpReadReplicaBody$Outbound;
}

export function setUpReadReplicaBodyToJSON(
  setUpReadReplicaBody: SetUpReadReplicaBody,
): string {
  return JSON.stringify(
    SetUpReadReplicaBody$outboundSchema.parse(setUpReadReplicaBody),
  );
}

export function setUpReadReplicaBodyFromJSON(
  jsonString: string,
): SafeParseResult<SetUpReadReplicaBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetUpReadReplicaBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetUpReadReplicaBody' from JSON`,
  );
}
