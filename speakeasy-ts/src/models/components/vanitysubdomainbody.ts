/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VanitySubdomainBody = {
  vanitySubdomain: string;
};

/** @internal */
export const VanitySubdomainBody$inboundSchema: z.ZodType<
  VanitySubdomainBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  vanity_subdomain: z.string(),
}).transform((v) => {
  return remap$(v, {
    "vanity_subdomain": "vanitySubdomain",
  });
});

/** @internal */
export type VanitySubdomainBody$Outbound = {
  vanity_subdomain: string;
};

/** @internal */
export const VanitySubdomainBody$outboundSchema: z.ZodType<
  VanitySubdomainBody$Outbound,
  z.ZodTypeDef,
  VanitySubdomainBody
> = z.object({
  vanitySubdomain: z.string(),
}).transform((v) => {
  return remap$(v, {
    vanitySubdomain: "vanity_subdomain",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VanitySubdomainBody$ {
  /** @deprecated use `VanitySubdomainBody$inboundSchema` instead. */
  export const inboundSchema = VanitySubdomainBody$inboundSchema;
  /** @deprecated use `VanitySubdomainBody$outboundSchema` instead. */
  export const outboundSchema = VanitySubdomainBody$outboundSchema;
  /** @deprecated use `VanitySubdomainBody$Outbound` instead. */
  export type Outbound = VanitySubdomainBody$Outbound;
}

export function vanitySubdomainBodyToJSON(
  vanitySubdomainBody: VanitySubdomainBody,
): string {
  return JSON.stringify(
    VanitySubdomainBody$outboundSchema.parse(vanitySubdomainBody),
  );
}

export function vanitySubdomainBodyFromJSON(
  jsonString: string,
): SafeParseResult<VanitySubdomainBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VanitySubdomainBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VanitySubdomainBody' from JSON`,
  );
}
