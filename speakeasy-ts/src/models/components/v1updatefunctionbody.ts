/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1UpdateFunctionBody = {
  name?: string | undefined;
  body?: string | undefined;
  verifyJwt?: boolean | undefined;
  computeMultiplier?: number | undefined;
};

/** @internal */
export const V1UpdateFunctionBody$inboundSchema: z.ZodType<
  V1UpdateFunctionBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  body: z.string().optional(),
  verify_jwt: z.boolean().optional(),
  compute_multiplier: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "verify_jwt": "verifyJwt",
    "compute_multiplier": "computeMultiplier",
  });
});

/** @internal */
export type V1UpdateFunctionBody$Outbound = {
  name?: string | undefined;
  body?: string | undefined;
  verify_jwt?: boolean | undefined;
  compute_multiplier?: number | undefined;
};

/** @internal */
export const V1UpdateFunctionBody$outboundSchema: z.ZodType<
  V1UpdateFunctionBody$Outbound,
  z.ZodTypeDef,
  V1UpdateFunctionBody
> = z.object({
  name: z.string().optional(),
  body: z.string().optional(),
  verifyJwt: z.boolean().optional(),
  computeMultiplier: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    verifyJwt: "verify_jwt",
    computeMultiplier: "compute_multiplier",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1UpdateFunctionBody$ {
  /** @deprecated use `V1UpdateFunctionBody$inboundSchema` instead. */
  export const inboundSchema = V1UpdateFunctionBody$inboundSchema;
  /** @deprecated use `V1UpdateFunctionBody$outboundSchema` instead. */
  export const outboundSchema = V1UpdateFunctionBody$outboundSchema;
  /** @deprecated use `V1UpdateFunctionBody$Outbound` instead. */
  export type Outbound = V1UpdateFunctionBody$Outbound;
}

export function v1UpdateFunctionBodyToJSON(
  v1UpdateFunctionBody: V1UpdateFunctionBody,
): string {
  return JSON.stringify(
    V1UpdateFunctionBody$outboundSchema.parse(v1UpdateFunctionBody),
  );
}

export function v1UpdateFunctionBodyFromJSON(
  jsonString: string,
): SafeParseResult<V1UpdateFunctionBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1UpdateFunctionBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1UpdateFunctionBody' from JSON`,
  );
}
