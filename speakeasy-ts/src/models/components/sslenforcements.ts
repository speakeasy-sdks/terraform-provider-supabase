/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SslEnforcements = {
  database: boolean;
};

/** @internal */
export const SslEnforcements$inboundSchema: z.ZodType<
  SslEnforcements,
  z.ZodTypeDef,
  unknown
> = z.object({
  database: z.boolean(),
});

/** @internal */
export type SslEnforcements$Outbound = {
  database: boolean;
};

/** @internal */
export const SslEnforcements$outboundSchema: z.ZodType<
  SslEnforcements$Outbound,
  z.ZodTypeDef,
  SslEnforcements
> = z.object({
  database: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SslEnforcements$ {
  /** @deprecated use `SslEnforcements$inboundSchema` instead. */
  export const inboundSchema = SslEnforcements$inboundSchema;
  /** @deprecated use `SslEnforcements$outboundSchema` instead. */
  export const outboundSchema = SslEnforcements$outboundSchema;
  /** @deprecated use `SslEnforcements$Outbound` instead. */
  export type Outbound = SslEnforcements$Outbound;
}

export function sslEnforcementsToJSON(
  sslEnforcements: SslEnforcements,
): string {
  return JSON.stringify(SslEnforcements$outboundSchema.parse(sslEnforcements));
}

export function sslEnforcementsFromJSON(
  jsonString: string,
): SafeParseResult<SslEnforcements, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SslEnforcements$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SslEnforcements' from JSON`,
  );
}
