// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type UpdateBranchBodyStatus string

const (
	UpdateBranchBodyStatusCreatingProject   UpdateBranchBodyStatus = "CREATING_PROJECT"
	UpdateBranchBodyStatusRunningMigrations UpdateBranchBodyStatus = "RUNNING_MIGRATIONS"
	UpdateBranchBodyStatusMigrationsPassed  UpdateBranchBodyStatus = "MIGRATIONS_PASSED"
	UpdateBranchBodyStatusMigrationsFailed  UpdateBranchBodyStatus = "MIGRATIONS_FAILED"
	UpdateBranchBodyStatusFunctionsDeployed UpdateBranchBodyStatus = "FUNCTIONS_DEPLOYED"
	UpdateBranchBodyStatusFunctionsFailed   UpdateBranchBodyStatus = "FUNCTIONS_FAILED"
)

func (e UpdateBranchBodyStatus) ToPointer() *UpdateBranchBodyStatus {
	return &e
}
func (e *UpdateBranchBodyStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREATING_PROJECT":
		fallthrough
	case "RUNNING_MIGRATIONS":
		fallthrough
	case "MIGRATIONS_PASSED":
		fallthrough
	case "MIGRATIONS_FAILED":
		fallthrough
	case "FUNCTIONS_DEPLOYED":
		fallthrough
	case "FUNCTIONS_FAILED":
		*e = UpdateBranchBodyStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateBranchBodyStatus: %v", v)
	}
}

type UpdateBranchBody struct {
	BranchName  *string                 `json:"branch_name,omitempty"`
	GitBranch   *string                 `json:"git_branch,omitempty"`
	ResetOnPush *bool                   `json:"reset_on_push,omitempty"`
	Persistent  *bool                   `json:"persistent,omitempty"`
	Status      *UpdateBranchBodyStatus `json:"status,omitempty"`
}

func (o *UpdateBranchBody) GetBranchName() *string {
	if o == nil {
		return nil
	}
	return o.BranchName
}

func (o *UpdateBranchBody) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *UpdateBranchBody) GetResetOnPush() *bool {
	if o == nil {
		return nil
	}
	return o.ResetOnPush
}

func (o *UpdateBranchBody) GetPersistent() *bool {
	if o == nil {
		return nil
	}
	return o.Persistent
}

func (o *UpdateBranchBody) GetStatus() *UpdateBranchBodyStatus {
	if o == nil {
		return nil
	}
	return o.Status
}
