/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FunctionResponseStatus = {
  Active: "ACTIVE",
  Removed: "REMOVED",
  Throttled: "THROTTLED",
} as const;
export type FunctionResponseStatus = ClosedEnum<typeof FunctionResponseStatus>;

export type FunctionResponse = {
  version: number;
  createdAt: number;
  updatedAt: number;
  id: string;
  slug: string;
  name: string;
  status: FunctionResponseStatus;
  verifyJwt?: boolean | undefined;
  importMap?: boolean | undefined;
  entrypointPath?: string | undefined;
  importMapPath?: string | undefined;
  computeMultiplier?: number | undefined;
};

/** @internal */
export const FunctionResponseStatus$inboundSchema: z.ZodNativeEnum<
  typeof FunctionResponseStatus
> = z.nativeEnum(FunctionResponseStatus);

/** @internal */
export const FunctionResponseStatus$outboundSchema: z.ZodNativeEnum<
  typeof FunctionResponseStatus
> = FunctionResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionResponseStatus$ {
  /** @deprecated use `FunctionResponseStatus$inboundSchema` instead. */
  export const inboundSchema = FunctionResponseStatus$inboundSchema;
  /** @deprecated use `FunctionResponseStatus$outboundSchema` instead. */
  export const outboundSchema = FunctionResponseStatus$outboundSchema;
}

/** @internal */
export const FunctionResponse$inboundSchema: z.ZodType<
  FunctionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.number().int(),
  created_at: z.number().int(),
  updated_at: z.number().int(),
  id: z.string(),
  slug: z.string(),
  name: z.string(),
  status: FunctionResponseStatus$inboundSchema,
  verify_jwt: z.boolean().optional(),
  import_map: z.boolean().optional(),
  entrypoint_path: z.string().optional(),
  import_map_path: z.string().optional(),
  compute_multiplier: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "verify_jwt": "verifyJwt",
    "import_map": "importMap",
    "entrypoint_path": "entrypointPath",
    "import_map_path": "importMapPath",
    "compute_multiplier": "computeMultiplier",
  });
});

/** @internal */
export type FunctionResponse$Outbound = {
  version: number;
  created_at: number;
  updated_at: number;
  id: string;
  slug: string;
  name: string;
  status: string;
  verify_jwt?: boolean | undefined;
  import_map?: boolean | undefined;
  entrypoint_path?: string | undefined;
  import_map_path?: string | undefined;
  compute_multiplier?: number | undefined;
};

/** @internal */
export const FunctionResponse$outboundSchema: z.ZodType<
  FunctionResponse$Outbound,
  z.ZodTypeDef,
  FunctionResponse
> = z.object({
  version: z.number().int(),
  createdAt: z.number().int(),
  updatedAt: z.number().int(),
  id: z.string(),
  slug: z.string(),
  name: z.string(),
  status: FunctionResponseStatus$outboundSchema,
  verifyJwt: z.boolean().optional(),
  importMap: z.boolean().optional(),
  entrypointPath: z.string().optional(),
  importMapPath: z.string().optional(),
  computeMultiplier: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
    verifyJwt: "verify_jwt",
    importMap: "import_map",
    entrypointPath: "entrypoint_path",
    importMapPath: "import_map_path",
    computeMultiplier: "compute_multiplier",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionResponse$ {
  /** @deprecated use `FunctionResponse$inboundSchema` instead. */
  export const inboundSchema = FunctionResponse$inboundSchema;
  /** @deprecated use `FunctionResponse$outboundSchema` instead. */
  export const outboundSchema = FunctionResponse$outboundSchema;
  /** @deprecated use `FunctionResponse$Outbound` instead. */
  export type Outbound = FunctionResponse$Outbound;
}

export function functionResponseToJSON(
  functionResponse: FunctionResponse,
): string {
  return JSON.stringify(
    FunctionResponse$outboundSchema.parse(functionResponse),
  );
}

export function functionResponseFromJSON(
  jsonString: string,
): SafeParseResult<FunctionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FunctionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionResponse' from JSON`,
  );
}
