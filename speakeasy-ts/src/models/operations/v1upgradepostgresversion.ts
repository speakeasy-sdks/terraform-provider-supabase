/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1UpgradePostgresVersionRequest = {
  /**
   * Project ref
   */
  ref: string;
  upgradeDatabaseBody: components.UpgradeDatabaseBody;
};

/** @internal */
export const V1UpgradePostgresVersionRequest$inboundSchema: z.ZodType<
  V1UpgradePostgresVersionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ref: z.string(),
  UpgradeDatabaseBody: components.UpgradeDatabaseBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "UpgradeDatabaseBody": "upgradeDatabaseBody",
  });
});

/** @internal */
export type V1UpgradePostgresVersionRequest$Outbound = {
  ref: string;
  UpgradeDatabaseBody: components.UpgradeDatabaseBody$Outbound;
};

/** @internal */
export const V1UpgradePostgresVersionRequest$outboundSchema: z.ZodType<
  V1UpgradePostgresVersionRequest$Outbound,
  z.ZodTypeDef,
  V1UpgradePostgresVersionRequest
> = z.object({
  ref: z.string(),
  upgradeDatabaseBody: components.UpgradeDatabaseBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    upgradeDatabaseBody: "UpgradeDatabaseBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1UpgradePostgresVersionRequest$ {
  /** @deprecated use `V1UpgradePostgresVersionRequest$inboundSchema` instead. */
  export const inboundSchema = V1UpgradePostgresVersionRequest$inboundSchema;
  /** @deprecated use `V1UpgradePostgresVersionRequest$outboundSchema` instead. */
  export const outboundSchema = V1UpgradePostgresVersionRequest$outboundSchema;
  /** @deprecated use `V1UpgradePostgresVersionRequest$Outbound` instead. */
  export type Outbound = V1UpgradePostgresVersionRequest$Outbound;
}

export function v1UpgradePostgresVersionRequestToJSON(
  v1UpgradePostgresVersionRequest: V1UpgradePostgresVersionRequest,
): string {
  return JSON.stringify(
    V1UpgradePostgresVersionRequest$outboundSchema.parse(
      v1UpgradePostgresVersionRequest,
    ),
  );
}

export function v1UpgradePostgresVersionRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1UpgradePostgresVersionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1UpgradePostgresVersionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1UpgradePostgresVersionRequest' from JSON`,
  );
}
