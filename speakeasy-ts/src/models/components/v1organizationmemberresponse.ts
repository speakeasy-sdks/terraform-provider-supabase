/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1OrganizationMemberResponse = {
  userId: string;
  userName: string;
  email?: string | undefined;
  roleName: string;
  mfaEnabled: boolean;
};

/** @internal */
export const V1OrganizationMemberResponse$inboundSchema: z.ZodType<
  V1OrganizationMemberResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.string(),
  user_name: z.string(),
  email: z.string().optional(),
  role_name: z.string(),
  mfa_enabled: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
    "user_name": "userName",
    "role_name": "roleName",
    "mfa_enabled": "mfaEnabled",
  });
});

/** @internal */
export type V1OrganizationMemberResponse$Outbound = {
  user_id: string;
  user_name: string;
  email?: string | undefined;
  role_name: string;
  mfa_enabled: boolean;
};

/** @internal */
export const V1OrganizationMemberResponse$outboundSchema: z.ZodType<
  V1OrganizationMemberResponse$Outbound,
  z.ZodTypeDef,
  V1OrganizationMemberResponse
> = z.object({
  userId: z.string(),
  userName: z.string(),
  email: z.string().optional(),
  roleName: z.string(),
  mfaEnabled: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    userName: "user_name",
    roleName: "role_name",
    mfaEnabled: "mfa_enabled",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1OrganizationMemberResponse$ {
  /** @deprecated use `V1OrganizationMemberResponse$inboundSchema` instead. */
  export const inboundSchema = V1OrganizationMemberResponse$inboundSchema;
  /** @deprecated use `V1OrganizationMemberResponse$outboundSchema` instead. */
  export const outboundSchema = V1OrganizationMemberResponse$outboundSchema;
  /** @deprecated use `V1OrganizationMemberResponse$Outbound` instead. */
  export type Outbound = V1OrganizationMemberResponse$Outbound;
}

export function v1OrganizationMemberResponseToJSON(
  v1OrganizationMemberResponse: V1OrganizationMemberResponse,
): string {
  return JSON.stringify(
    V1OrganizationMemberResponse$outboundSchema.parse(
      v1OrganizationMemberResponse,
    ),
  );
}

export function v1OrganizationMemberResponseFromJSON(
  jsonString: string,
): SafeParseResult<V1OrganizationMemberResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1OrganizationMemberResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1OrganizationMemberResponse' from JSON`,
  );
}
