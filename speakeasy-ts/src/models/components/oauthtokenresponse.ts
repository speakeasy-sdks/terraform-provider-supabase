/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const TokenType = {
  Bearer: "Bearer",
} as const;
export type TokenType = ClosedEnum<typeof TokenType>;

export type OAuthTokenResponse = {
  expiresIn: number;
  tokenType: TokenType;
  accessToken: string;
  refreshToken: string;
};

/** @internal */
export const TokenType$inboundSchema: z.ZodNativeEnum<typeof TokenType> = z
  .nativeEnum(TokenType);

/** @internal */
export const TokenType$outboundSchema: z.ZodNativeEnum<typeof TokenType> =
  TokenType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TokenType$ {
  /** @deprecated use `TokenType$inboundSchema` instead. */
  export const inboundSchema = TokenType$inboundSchema;
  /** @deprecated use `TokenType$outboundSchema` instead. */
  export const outboundSchema = TokenType$outboundSchema;
}

/** @internal */
export const OAuthTokenResponse$inboundSchema: z.ZodType<
  OAuthTokenResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  expires_in: z.number().int(),
  token_type: TokenType$inboundSchema,
  access_token: z.string(),
  refresh_token: z.string(),
}).transform((v) => {
  return remap$(v, {
    "expires_in": "expiresIn",
    "token_type": "tokenType",
    "access_token": "accessToken",
    "refresh_token": "refreshToken",
  });
});

/** @internal */
export type OAuthTokenResponse$Outbound = {
  expires_in: number;
  token_type: string;
  access_token: string;
  refresh_token: string;
};

/** @internal */
export const OAuthTokenResponse$outboundSchema: z.ZodType<
  OAuthTokenResponse$Outbound,
  z.ZodTypeDef,
  OAuthTokenResponse
> = z.object({
  expiresIn: z.number().int(),
  tokenType: TokenType$outboundSchema,
  accessToken: z.string(),
  refreshToken: z.string(),
}).transform((v) => {
  return remap$(v, {
    expiresIn: "expires_in",
    tokenType: "token_type",
    accessToken: "access_token",
    refreshToken: "refresh_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OAuthTokenResponse$ {
  /** @deprecated use `OAuthTokenResponse$inboundSchema` instead. */
  export const inboundSchema = OAuthTokenResponse$inboundSchema;
  /** @deprecated use `OAuthTokenResponse$outboundSchema` instead. */
  export const outboundSchema = OAuthTokenResponse$outboundSchema;
  /** @deprecated use `OAuthTokenResponse$Outbound` instead. */
  export type Outbound = OAuthTokenResponse$Outbound;
}

export function oAuthTokenResponseToJSON(
  oAuthTokenResponse: OAuthTokenResponse,
): string {
  return JSON.stringify(
    OAuthTokenResponse$outboundSchema.parse(oAuthTokenResponse),
  );
}

export function oAuthTokenResponseFromJSON(
  jsonString: string,
): SafeParseResult<OAuthTokenResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OAuthTokenResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OAuthTokenResponse' from JSON`,
  );
}
