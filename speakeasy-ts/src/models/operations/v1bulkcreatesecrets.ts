/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V1BulkCreateSecretsRequest = {
  /**
   * Project ref
   */
  ref: string;
  requestBody: Array<components.CreateSecretBody>;
};

/** @internal */
export const V1BulkCreateSecretsRequest$inboundSchema: z.ZodType<
  V1BulkCreateSecretsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ref: z.string(),
  RequestBody: z.array(components.CreateSecretBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type V1BulkCreateSecretsRequest$Outbound = {
  ref: string;
  RequestBody: Array<components.CreateSecretBody$Outbound>;
};

/** @internal */
export const V1BulkCreateSecretsRequest$outboundSchema: z.ZodType<
  V1BulkCreateSecretsRequest$Outbound,
  z.ZodTypeDef,
  V1BulkCreateSecretsRequest
> = z.object({
  ref: z.string(),
  requestBody: z.array(components.CreateSecretBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1BulkCreateSecretsRequest$ {
  /** @deprecated use `V1BulkCreateSecretsRequest$inboundSchema` instead. */
  export const inboundSchema = V1BulkCreateSecretsRequest$inboundSchema;
  /** @deprecated use `V1BulkCreateSecretsRequest$outboundSchema` instead. */
  export const outboundSchema = V1BulkCreateSecretsRequest$outboundSchema;
  /** @deprecated use `V1BulkCreateSecretsRequest$Outbound` instead. */
  export type Outbound = V1BulkCreateSecretsRequest$Outbound;
}

export function v1BulkCreateSecretsRequestToJSON(
  v1BulkCreateSecretsRequest: V1BulkCreateSecretsRequest,
): string {
  return JSON.stringify(
    V1BulkCreateSecretsRequest$outboundSchema.parse(v1BulkCreateSecretsRequest),
  );
}

export function v1BulkCreateSecretsRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1BulkCreateSecretsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1BulkCreateSecretsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1BulkCreateSecretsRequest' from JSON`,
  );
}
